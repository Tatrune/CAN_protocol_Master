
CAN_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb18  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  0800fca8  0800fca8  0001fca8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080101c4  080101c4  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  080101c4  080101c4  000201c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080101cc  080101cc  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080101cc  080101cc  000201cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080101d0  080101d0  000201d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  080101d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030200  2**0
                  CONTENTS
 10 .bss          000009cc  20000200  20000200  00030200  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000bcc  20000bcc  00030200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002029e  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004202  00000000  00000000  000504ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a20  00000000  00000000  000546d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018a0  00000000  00000000  000560f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027738  00000000  00000000  00057990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000201cf  00000000  00000000  0007f0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4990  00000000  00000000  0009f297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00183c27  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000085c0  00000000  00000000  00183c78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fc90 	.word	0x0800fc90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	0800fc90 	.word	0x0800fc90

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <DWT_Delay_Init+0x58>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	4a13      	ldr	r2, [pc, #76]	; (8001050 <DWT_Delay_Init+0x58>)
 8001002:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001006:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <DWT_Delay_Init+0x58>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	4a10      	ldr	r2, [pc, #64]	; (8001050 <DWT_Delay_Init+0x58>)
 800100e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001012:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <DWT_Delay_Init+0x5c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <DWT_Delay_Init+0x5c>)
 800101a:	f023 0301 	bic.w	r3, r3, #1
 800101e:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <DWT_Delay_Init+0x5c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a0b      	ldr	r2, [pc, #44]	; (8001054 <DWT_Delay_Init+0x5c>)
 8001026:	f043 0301 	orr.w	r3, r3, #1
 800102a:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <DWT_Delay_Init+0x5c>)
 800102e:	2200      	movs	r2, #0
 8001030:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8001032:	bf00      	nop
     __ASM volatile ("NOP");
 8001034:	bf00      	nop
  __ASM volatile ("NOP");
 8001036:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <DWT_Delay_Init+0x5c>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8001040:	2300      	movs	r3, #0
 8001042:	e000      	b.n	8001046 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8001044:	2301      	movs	r3, #1
  }
}
 8001046:	4618      	mov	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000edf0 	.word	0xe000edf0
 8001054:	e0001000 	.word	0xe0001000

08001058 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8001060:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <delay+0x40>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001066:	f005 f9cd 	bl	8006404 <HAL_RCC_GetHCLKFreq>
 800106a:	4603      	mov	r3, r0
 800106c:	4a0b      	ldr	r2, [pc, #44]	; (800109c <delay+0x44>)
 800106e:	fba2 2303 	umull	r2, r3, r2, r3
 8001072:	0c9b      	lsrs	r3, r3, #18
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	fb02 f303 	mul.w	r3, r2, r3
 800107a:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800107c:	bf00      	nop
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <delay+0x40>)
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	1ad2      	subs	r2, r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	429a      	cmp	r2, r3
 800108a:	d3f8      	bcc.n	800107e <delay+0x26>
}
 800108c:	bf00      	nop
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	e0001000 	.word	0xe0001000
 800109c:	431bde83 	.word	0x431bde83

080010a0 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80010bc:	887b      	ldrh	r3, [r7, #2]
 80010be:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c0:	2301      	movs	r3, #1
 80010c2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	4619      	mov	r1, r3
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f002 fde6 	bl	8003ca0 <HAL_GPIO_Init>
}
 80010d4:	bf00      	nop
 80010d6:	3720      	adds	r7, #32
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 030c 	add.w	r3, r7, #12
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80010f8:	887b      	ldrh	r3, [r7, #2]
 80010fa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fc:	2300      	movs	r3, #0
 80010fe:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	4619      	mov	r1, r3
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f002 fdc8 	bl	8003ca0 <HAL_GPIO_Init>
}
 8001110:	bf00      	nop
 8001112:	3720      	adds	r7, #32
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <DHT_Start>:


void DHT_Start (void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 800111c:	f7ff ff6c 	bl	8000ff8 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8001120:	2102      	movs	r1, #2
 8001122:	480d      	ldr	r0, [pc, #52]	; (8001158 <DHT_Start+0x40>)
 8001124:	f7ff ffbc 	bl	80010a0 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8001128:	2200      	movs	r2, #0
 800112a:	2102      	movs	r1, #2
 800112c:	480a      	ldr	r0, [pc, #40]	; (8001158 <DHT_Start+0x40>)
 800112e:	f002 ff6b 	bl	8004008 <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8001132:	f244 6050 	movw	r0, #18000	; 0x4650
 8001136:	f7ff ff8f 	bl	8001058 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 800113a:	2201      	movs	r2, #1
 800113c:	2102      	movs	r1, #2
 800113e:	4806      	ldr	r0, [pc, #24]	; (8001158 <DHT_Start+0x40>)
 8001140:	f002 ff62 	bl	8004008 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8001144:	2014      	movs	r0, #20
 8001146:	f7ff ff87 	bl	8001058 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 800114a:	2102      	movs	r1, #2
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <DHT_Start+0x40>)
 800114e:	f7ff ffc5 	bl	80010dc <Set_Pin_Input>
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40020000 	.word	0x40020000

0800115c <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8001166:	2028      	movs	r0, #40	; 0x28
 8001168:	f7ff ff76 	bl	8001058 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 800116c:	2102      	movs	r1, #2
 800116e:	4811      	ldr	r0, [pc, #68]	; (80011b4 <DHT_Check_Response+0x58>)
 8001170:	f002 ff32 	bl	8003fd8 <HAL_GPIO_ReadPin>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d10e      	bne.n	8001198 <DHT_Check_Response+0x3c>
	{
		delay (80);
 800117a:	2050      	movs	r0, #80	; 0x50
 800117c:	f7ff ff6c 	bl	8001058 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8001180:	2102      	movs	r1, #2
 8001182:	480c      	ldr	r0, [pc, #48]	; (80011b4 <DHT_Check_Response+0x58>)
 8001184:	f002 ff28 	bl	8003fd8 <HAL_GPIO_ReadPin>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d002      	beq.n	8001194 <DHT_Check_Response+0x38>
 800118e:	2301      	movs	r3, #1
 8001190:	71fb      	strb	r3, [r7, #7]
 8001192:	e001      	b.n	8001198 <DHT_Check_Response+0x3c>
		else Response = -1;
 8001194:	23ff      	movs	r3, #255	; 0xff
 8001196:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8001198:	bf00      	nop
 800119a:	2102      	movs	r1, #2
 800119c:	4805      	ldr	r0, [pc, #20]	; (80011b4 <DHT_Check_Response+0x58>)
 800119e:	f002 ff1b 	bl	8003fd8 <HAL_GPIO_ReadPin>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1f8      	bne.n	800119a <DHT_Check_Response+0x3e>

	return Response;
 80011a8:	79fb      	ldrb	r3, [r7, #7]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40020000 	.word	0x40020000

080011b8 <DHT_Read>:

uint8_t DHT_Read (void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80011be:	2300      	movs	r3, #0
 80011c0:	71bb      	strb	r3, [r7, #6]
 80011c2:	e037      	b.n	8001234 <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 80011c4:	bf00      	nop
 80011c6:	2102      	movs	r1, #2
 80011c8:	481e      	ldr	r0, [pc, #120]	; (8001244 <DHT_Read+0x8c>)
 80011ca:	f002 ff05 	bl	8003fd8 <HAL_GPIO_ReadPin>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0f8      	beq.n	80011c6 <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 80011d4:	2028      	movs	r0, #40	; 0x28
 80011d6:	f7ff ff3f 	bl	8001058 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 80011da:	2102      	movs	r1, #2
 80011dc:	4819      	ldr	r0, [pc, #100]	; (8001244 <DHT_Read+0x8c>)
 80011de:	f002 fefb 	bl	8003fd8 <HAL_GPIO_ReadPin>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d10e      	bne.n	8001206 <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 80011e8:	79bb      	ldrb	r3, [r7, #6]
 80011ea:	f1c3 0307 	rsb	r3, r3, #7
 80011ee:	2201      	movs	r2, #1
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	b25b      	sxtb	r3, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	b25a      	sxtb	r2, r3
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	4013      	ands	r3, r2
 8001200:	b25b      	sxtb	r3, r3
 8001202:	71fb      	strb	r3, [r7, #7]
 8001204:	e00b      	b.n	800121e <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001206:	79bb      	ldrb	r3, [r7, #6]
 8001208:	f1c3 0307 	rsb	r3, r3, #7
 800120c:	2201      	movs	r2, #1
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	b25a      	sxtb	r2, r3
 8001214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001218:	4313      	orrs	r3, r2
 800121a:	b25b      	sxtb	r3, r3
 800121c:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 800121e:	bf00      	nop
 8001220:	2102      	movs	r1, #2
 8001222:	4808      	ldr	r0, [pc, #32]	; (8001244 <DHT_Read+0x8c>)
 8001224:	f002 fed8 	bl	8003fd8 <HAL_GPIO_ReadPin>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f8      	bne.n	8001220 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 800122e:	79bb      	ldrb	r3, [r7, #6]
 8001230:	3301      	adds	r3, #1
 8001232:	71bb      	strb	r3, [r7, #6]
 8001234:	79bb      	ldrb	r3, [r7, #6]
 8001236:	2b07      	cmp	r3, #7
 8001238:	d9c4      	bls.n	80011c4 <DHT_Read+0xc>
	}
	return i;
 800123a:	79fb      	ldrb	r3, [r7, #7]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40020000 	.word	0x40020000

08001248 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8001250:	f7ff ff62 	bl	8001118 <DHT_Start>
	Presence = DHT_Check_Response ();
 8001254:	f7ff ff82 	bl	800115c <DHT_Check_Response>
 8001258:	4603      	mov	r3, r0
 800125a:	461a      	mov	r2, r3
 800125c:	4b23      	ldr	r3, [pc, #140]	; (80012ec <DHT_GetData+0xa4>)
 800125e:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8001260:	f7ff ffaa 	bl	80011b8 <DHT_Read>
 8001264:	4603      	mov	r3, r0
 8001266:	461a      	mov	r2, r3
 8001268:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <DHT_GetData+0xa8>)
 800126a:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 800126c:	f7ff ffa4 	bl	80011b8 <DHT_Read>
 8001270:	4603      	mov	r3, r0
 8001272:	461a      	mov	r2, r3
 8001274:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <DHT_GetData+0xac>)
 8001276:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8001278:	f7ff ff9e 	bl	80011b8 <DHT_Read>
 800127c:	4603      	mov	r3, r0
 800127e:	461a      	mov	r2, r3
 8001280:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <DHT_GetData+0xb0>)
 8001282:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8001284:	f7ff ff98 	bl	80011b8 <DHT_Read>
 8001288:	4603      	mov	r3, r0
 800128a:	461a      	mov	r2, r3
 800128c:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <DHT_GetData+0xb4>)
 800128e:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8001290:	f7ff ff92 	bl	80011b8 <DHT_Read>
 8001294:	4603      	mov	r3, r0
 8001296:	b29a      	uxth	r2, r3
 8001298:	4b19      	ldr	r3, [pc, #100]	; (8001300 <DHT_GetData+0xb8>)
 800129a:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 800129c:	4b18      	ldr	r3, [pc, #96]	; (8001300 <DHT_GetData+0xb8>)
 800129e:	881b      	ldrh	r3, [r3, #0]
 80012a0:	4619      	mov	r1, r3
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <DHT_GetData+0xa8>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <DHT_GetData+0xac>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	4413      	add	r3, r2
 80012ae:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <DHT_GetData+0xb0>)
 80012b0:	7812      	ldrb	r2, [r2, #0]
 80012b2:	4413      	add	r3, r2
 80012b4:	4a11      	ldr	r2, [pc, #68]	; (80012fc <DHT_GetData+0xb4>)
 80012b6:	7812      	ldrb	r2, [r2, #0]
 80012b8:	4413      	add	r3, r2
 80012ba:	4299      	cmp	r1, r3
 80012bc:	d111      	bne.n	80012e2 <DHT_GetData+0x9a>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <DHT_GetData+0xb0>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	ee07 3a90 	vmov	s15, r3
 80012c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = Rh_byte1;
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <DHT_GetData+0xa8>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	ee07 3a90 	vmov	s15, r3
 80012d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	edc3 7a01 	vstr	s15, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000222 	.word	0x20000222
 80012f0:	2000021c 	.word	0x2000021c
 80012f4:	2000021d 	.word	0x2000021d
 80012f8:	2000021e 	.word	0x2000021e
 80012fc:	2000021f 	.word	0x2000021f
 8001300:	20000220 	.word	0x20000220

08001304 <HAL_GPIO_EXTI_Callback>:

	uint32_t TxMailbox;

	int datacheck = 0;
	void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	80fb      	strh	r3, [r7, #6]
		if (GPIO_Pin == GPIO_PIN_0)
 800130e:	88fb      	ldrh	r3, [r7, #6]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d11b      	bne.n	800134c <HAL_GPIO_EXTI_Callback+0x48>
		{
			TxData[0] = 100;   // ms Delay
 8001314:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <HAL_GPIO_EXTI_Callback+0x50>)
 8001316:	2264      	movs	r2, #100	; 0x64
 8001318:	701a      	strb	r2, [r3, #0]
			TxData[1] = 20;    // loop rep
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <HAL_GPIO_EXTI_Callback+0x50>)
 800131c:	2214      	movs	r2, #20
 800131e:	705a      	strb	r2, [r3, #1]
			TxData[2] = 0;
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <HAL_GPIO_EXTI_Callback+0x50>)
 8001322:	2200      	movs	r2, #0
 8001324:	709a      	strb	r2, [r3, #2]
			TxData[3] = 0;
 8001326:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <HAL_GPIO_EXTI_Callback+0x50>)
 8001328:	2200      	movs	r2, #0
 800132a:	70da      	strb	r2, [r3, #3]


			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12); // Green led
 800132c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001330:	4809      	ldr	r0, [pc, #36]	; (8001358 <HAL_GPIO_EXTI_Callback+0x54>)
 8001332:	f002 fe82 	bl	800403a <HAL_GPIO_TogglePin>

			if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox)!= HAL_OK)// add
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <HAL_GPIO_EXTI_Callback+0x58>)
 8001338:	4a06      	ldr	r2, [pc, #24]	; (8001354 <HAL_GPIO_EXTI_Callback+0x50>)
 800133a:	4909      	ldr	r1, [pc, #36]	; (8001360 <HAL_GPIO_EXTI_Callback+0x5c>)
 800133c:	4809      	ldr	r0, [pc, #36]	; (8001364 <HAL_GPIO_EXTI_Callback+0x60>)
 800133e:	f001 ff5b 	bl	80031f8 <HAL_CAN_AddTxMessage>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <HAL_GPIO_EXTI_Callback+0x48>
			{
				Error_Handler();
 8001348:	f000 fcfc 	bl	8001d44 <Error_Handler>

			}
		}
	}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	200004bc 	.word	0x200004bc
 8001358:	40020c00 	.word	0x40020c00
 800135c:	200004cc 	.word	0x200004cc
 8001360:	20000488 	.word	0x20000488
 8001364:	200002e0 	.word	0x200002e0

08001368 <HAL_CAN_RxFifo0MsgPendingCallback>:

	void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
		if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)//add
 8001370:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8001372:	4a0c      	ldr	r2, [pc, #48]	; (80013a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8001374:	2100      	movs	r1, #0
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f002 f819 	bl	80033ae <HAL_CAN_GetRxMessage>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		{
			Error_Handler();
 8001382:	f000 fcdf 	bl	8001d44 <Error_Handler>
		}

		//if (RxHeader.DLC == 2)
		if (RxHeader.StdId== 0x103)
 8001386:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f240 1203 	movw	r2, #259	; 0x103
 800138e:	4293      	cmp	r3, r2
 8001390:	d102      	bne.n	8001398 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
		{
			datacheck = 1;
 8001392:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8001394:	2201      	movs	r2, #1
 8001396:	601a      	str	r2, [r3, #0]
		}

	}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200004c4 	.word	0x200004c4
 80013a4:	200004a0 	.word	0x200004a0
 80013a8:	200004d0 	.word	0x200004d0

080013ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b2:	f001 f86b 	bl	800248c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b6:	f000 f92b 	bl	8001610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ba:	f000 fb75 	bl	8001aa8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80013be:	f000 fa39 	bl	8001834 <MX_I2C1_Init>
  MX_SPI1_Init();
 80013c2:	f000 fa65 	bl	8001890 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80013c6:	f009 fcb5 	bl	800ad34 <MX_USB_HOST_Init>
  MX_CAN1_Init();
 80013ca:	f000 f9df 	bl	800178c <MX_CAN1_Init>
  MX_TIM4_Init();
 80013ce:	f000 fa95 	bl	80018fc <MX_TIM4_Init>
  MX_TIM6_Init();
 80013d2:	f000 fb09 	bl	80019e8 <MX_TIM6_Init>
  MX_UART5_Init();
 80013d6:	f000 fb3d 	bl	8001a54 <MX_UART5_Init>
  MX_ADC1_Init();
 80013da:	f000 f983 	bl	80016e4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1);
 80013de:	486a      	ldr	r0, [pc, #424]	; (8001588 <main+0x1dc>)
 80013e0:	f001 fec6 	bl	8003170 <HAL_CAN_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80013e4:	2100      	movs	r1, #0
 80013e6:	4869      	ldr	r0, [pc, #420]	; (800158c <main+0x1e0>)
 80013e8:	f005 f9e2 	bl	80067b0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 80013ec:	4868      	ldr	r0, [pc, #416]	; (8001590 <main+0x1e4>)
 80013ee:	f005 f915 	bl	800661c <HAL_TIM_Base_Start_IT>

  // Active the notification
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80013f2:	2102      	movs	r1, #2
 80013f4:	4864      	ldr	r0, [pc, #400]	; (8001588 <main+0x1dc>)
 80013f6:	f002 f8ec 	bl	80035d2 <HAL_CAN_ActivateNotification>

	TxHeader.DLC = 4;  // data length [ byte1 : delay cua led / byte2: so lan den nhap nhay ]
 80013fa:	4b66      	ldr	r3, [pc, #408]	; (8001594 <main+0x1e8>)
 80013fc:	2204      	movs	r2, #4
 80013fe:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;
 8001400:	4b64      	ldr	r3, [pc, #400]	; (8001594 <main+0x1e8>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8001406:	4b63      	ldr	r3, [pc, #396]	; (8001594 <main+0x1e8>)
 8001408:	2200      	movs	r2, #0
 800140a:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x446;  // ID
 800140c:	4b61      	ldr	r3, [pc, #388]	; (8001594 <main+0x1e8>)
 800140e:	f240 4246 	movw	r2, #1094	; 0x446
 8001412:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001414:	f009 fcb4 	bl	800ad80 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    // ADC
   	  HAL_ADC_Start(&hadc1);
 8001418:	485f      	ldr	r0, [pc, #380]	; (8001598 <main+0x1ec>)
 800141a:	f001 f911 	bl	8002640 <HAL_ADC_Start>
   	  if(HAL_ADC_PollForConversion(&hadc1, 10)==HAL_OK)
 800141e:	210a      	movs	r1, #10
 8001420:	485d      	ldr	r0, [pc, #372]	; (8001598 <main+0x1ec>)
 8001422:	f001 fa12 	bl	800284a <HAL_ADC_PollForConversion>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d120      	bne.n	800146e <main+0xc2>
   	  {
   		  analog_value = HAL_ADC_GetValue(&hadc1);
 800142c:	485a      	ldr	r0, [pc, #360]	; (8001598 <main+0x1ec>)
 800142e:	f001 fa97 	bl	8002960 <HAL_ADC_GetValue>
 8001432:	ee07 0a90 	vmov	s15, r0
 8001436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800143a:	4b58      	ldr	r3, [pc, #352]	; (800159c <main+0x1f0>)
 800143c:	edc3 7a00 	vstr	s15, [r3]
   	   	  // warning
   	   	  if (analog_value>=200)
 8001440:	4b56      	ldr	r3, [pc, #344]	; (800159c <main+0x1f0>)
 8001442:	edd3 7a00 	vldr	s15, [r3]
 8001446:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80015a0 <main+0x1f4>
 800144a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800144e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001452:	db06      	blt.n	8001462 <main+0xb6>
   	   	  {
   	   		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8001454:	2201      	movs	r2, #1
 8001456:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800145a:	4852      	ldr	r0, [pc, #328]	; (80015a4 <main+0x1f8>)
 800145c:	f002 fdd4 	bl	8004008 <HAL_GPIO_WritePin>
 8001460:	e005      	b.n	800146e <main+0xc2>
   	   	  }
   	   	  else HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001468:	484e      	ldr	r0, [pc, #312]	; (80015a4 <main+0x1f8>)
 800146a:	f002 fdcd 	bl	8004008 <HAL_GPIO_WritePin>
   	  }
   	  HAL_ADC_Stop(&hadc1);
 800146e:	484a      	ldr	r0, [pc, #296]	; (8001598 <main+0x1ec>)
 8001470:	f001 f9b8 	bl	80027e4 <HAL_ADC_Stop>
//   	  DHT_GetData(&DHT11_Data);
//   	  Temperature = DHT11_Data.Temperature;
//   	  Humidity = DHT11_Data.Humidity;

   	  // pwm to channel 1
   	  __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_1,analog_value);
 8001474:	4b49      	ldr	r3, [pc, #292]	; (800159c <main+0x1f0>)
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	4b44      	ldr	r3, [pc, #272]	; (800158c <main+0x1e0>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001482:	ee17 2a90 	vmov	r2, s15
 8001486:	635a      	str	r2, [r3, #52]	; 0x34

	  	// uint8t to char
	  	sprintf(temp, "Gia tri cua nhiet do = %.2f\r\n", Temperature);
 8001488:	4b47      	ldr	r3, [pc, #284]	; (80015a8 <main+0x1fc>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff f85b 	bl	8000548 <__aeabi_f2d>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	4945      	ldr	r1, [pc, #276]	; (80015ac <main+0x200>)
 8001498:	4845      	ldr	r0, [pc, #276]	; (80015b0 <main+0x204>)
 800149a:	f00a ff05 	bl	800c2a8 <siprintf>
	  	sprintf(humi, "Gia tri cua do am = %.2f\r\n", Humidity);
 800149e:	4b45      	ldr	r3, [pc, #276]	; (80015b4 <main+0x208>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff f850 	bl	8000548 <__aeabi_f2d>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4942      	ldr	r1, [pc, #264]	; (80015b8 <main+0x20c>)
 80014ae:	4843      	ldr	r0, [pc, #268]	; (80015bc <main+0x210>)
 80014b0:	f00a fefa 	bl	800c2a8 <siprintf>
	  	sprintf(adc, "Gia tri cua adc = %.2f\r\n\n", analog_value);
 80014b4:	4b39      	ldr	r3, [pc, #228]	; (800159c <main+0x1f0>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f845 	bl	8000548 <__aeabi_f2d>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	493f      	ldr	r1, [pc, #252]	; (80015c0 <main+0x214>)
 80014c4:	483f      	ldr	r0, [pc, #252]	; (80015c4 <main+0x218>)
 80014c6:	f00a feef 	bl	800c2a8 <siprintf>

	  	// truyen uart
		HAL_UART_Transmit(&huart5, temp , strlen(temp) , HAL_MAX_DELAY);
 80014ca:	4839      	ldr	r0, [pc, #228]	; (80015b0 <main+0x204>)
 80014cc:	f7fe fe80 	bl	80001d0 <strlen>
 80014d0:	4603      	mov	r3, r0
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	f04f 33ff 	mov.w	r3, #4294967295
 80014d8:	4935      	ldr	r1, [pc, #212]	; (80015b0 <main+0x204>)
 80014da:	483b      	ldr	r0, [pc, #236]	; (80015c8 <main+0x21c>)
 80014dc:	f006 f8e1 	bl	80076a2 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart5, humi , strlen(humi) , HAL_MAX_DELAY);
 80014e0:	4836      	ldr	r0, [pc, #216]	; (80015bc <main+0x210>)
 80014e2:	f7fe fe75 	bl	80001d0 <strlen>
 80014e6:	4603      	mov	r3, r0
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295
 80014ee:	4933      	ldr	r1, [pc, #204]	; (80015bc <main+0x210>)
 80014f0:	4835      	ldr	r0, [pc, #212]	; (80015c8 <main+0x21c>)
 80014f2:	f006 f8d6 	bl	80076a2 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart5, adc , strlen(adc) , HAL_MAX_DELAY);
 80014f6:	4833      	ldr	r0, [pc, #204]	; (80015c4 <main+0x218>)
 80014f8:	f7fe fe6a 	bl	80001d0 <strlen>
 80014fc:	4603      	mov	r3, r0
 80014fe:	b29a      	uxth	r2, r3
 8001500:	f04f 33ff 	mov.w	r3, #4294967295
 8001504:	492f      	ldr	r1, [pc, #188]	; (80015c4 <main+0x218>)
 8001506:	4830      	ldr	r0, [pc, #192]	; (80015c8 <main+0x21c>)
 8001508:	f006 f8cb 	bl	80076a2 <HAL_UART_Transmit>
		HAL_Delay(1000);
 800150c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001510:	f001 f82e 	bl	8002570 <HAL_Delay>


    // blink the LED (CAN)
    if(datacheck)
 8001514:	4b2d      	ldr	r3, [pc, #180]	; (80015cc <main+0x220>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	f43f af7b 	beq.w	8001414 <main+0x68>
    {
    	for (int i = 0; i < RxData[1]; i++) {
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	e00c      	b.n	800153e <main+0x192>
    		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14); // led red
 8001524:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001528:	481e      	ldr	r0, [pc, #120]	; (80015a4 <main+0x1f8>)
 800152a:	f002 fd86 	bl	800403a <HAL_GPIO_TogglePin>
    		HAL_Delay(RxData[0]);
 800152e:	4b28      	ldr	r3, [pc, #160]	; (80015d0 <main+0x224>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f001 f81c 	bl	8002570 <HAL_Delay>
    	for (int i = 0; i < RxData[1]; i++) {
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3301      	adds	r3, #1
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	4b24      	ldr	r3, [pc, #144]	; (80015d0 <main+0x224>)
 8001540:	785b      	ldrb	r3, [r3, #1]
 8001542:	461a      	mov	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4293      	cmp	r3, r2
 8001548:	dbec      	blt.n	8001524 <main+0x178>
    	}
    	datacheck = 0;
 800154a:	4b20      	ldr	r3, [pc, #128]	; (80015cc <main+0x220>)
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]

    	TxData[0] = 200;   // ms Delay
 8001550:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <main+0x228>)
 8001552:	22c8      	movs	r2, #200	; 0xc8
 8001554:	701a      	strb	r2, [r3, #0]
    	TxData[1] = 20;    // loop rep
 8001556:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <main+0x228>)
 8001558:	2214      	movs	r2, #20
 800155a:	705a      	strb	r2, [r3, #1]
    	TxData[2] = (uint8_t*)(&Temperature);
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <main+0x1fc>)
 800155e:	b2da      	uxtb	r2, r3
 8001560:	4b1c      	ldr	r3, [pc, #112]	; (80015d4 <main+0x228>)
 8001562:	709a      	strb	r2, [r3, #2]
    	TxData[3] = (uint8_t)humi;
 8001564:	4b15      	ldr	r3, [pc, #84]	; (80015bc <main+0x210>)
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <main+0x228>)
 800156a:	70da      	strb	r2, [r3, #3]

    	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK){ //add
 800156c:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <main+0x22c>)
 800156e:	4a19      	ldr	r2, [pc, #100]	; (80015d4 <main+0x228>)
 8001570:	4908      	ldr	r1, [pc, #32]	; (8001594 <main+0x1e8>)
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <main+0x1dc>)
 8001574:	f001 fe40 	bl	80031f8 <HAL_CAN_AddTxMessage>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	f43f af4a 	beq.w	8001414 <main+0x68>
			Error_Handler();
 8001580:	f000 fbe0 	bl	8001d44 <Error_Handler>
  {
 8001584:	e746      	b.n	8001414 <main+0x68>
 8001586:	bf00      	nop
 8001588:	200002e0 	.word	0x200002e0
 800158c:	200003b4 	.word	0x200003b4
 8001590:	200003fc 	.word	0x200003fc
 8001594:	20000488 	.word	0x20000488
 8001598:	20000298 	.word	0x20000298
 800159c:	20000234 	.word	0x20000234
 80015a0:	43480000 	.word	0x43480000
 80015a4:	40020c00 	.word	0x40020c00
 80015a8:	2000022c 	.word	0x2000022c
 80015ac:	0800fca8 	.word	0x0800fca8
 80015b0:	20000238 	.word	0x20000238
 80015b4:	20000230 	.word	0x20000230
 80015b8:	0800fcc8 	.word	0x0800fcc8
 80015bc:	20000258 	.word	0x20000258
 80015c0:	0800fce4 	.word	0x0800fce4
 80015c4:	20000278 	.word	0x20000278
 80015c8:	20000444 	.word	0x20000444
 80015cc:	200004d0 	.word	0x200004d0
 80015d0:	200004c4 	.word	0x200004c4
 80015d4:	200004bc 	.word	0x200004bc
 80015d8:	200004cc 	.word	0x200004cc

080015dc <TIM6_DAC_IRQHandler>:
  }
  /* USER CODE END 3 */
}

void TIM6_DAC_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
////
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015e0:	4807      	ldr	r0, [pc, #28]	; (8001600 <TIM6_DAC_IRQHandler+0x24>)
 80015e2:	f005 f9ad 	bl	8006940 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
	  // doc dht
	  DHT_GetData(&DHT11_Data);
 80015e6:	4807      	ldr	r0, [pc, #28]	; (8001604 <TIM6_DAC_IRQHandler+0x28>)
 80015e8:	f7ff fe2e 	bl	8001248 <DHT_GetData>
	  Temperature = DHT11_Data.Temperature;
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <TIM6_DAC_IRQHandler+0x28>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a05      	ldr	r2, [pc, #20]	; (8001608 <TIM6_DAC_IRQHandler+0x2c>)
 80015f2:	6013      	str	r3, [r2, #0]
	  Humidity = DHT11_Data.Humidity;
 80015f4:	4b03      	ldr	r3, [pc, #12]	; (8001604 <TIM6_DAC_IRQHandler+0x28>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	4a04      	ldr	r2, [pc, #16]	; (800160c <TIM6_DAC_IRQHandler+0x30>)
 80015fa:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	200003fc 	.word	0x200003fc
 8001604:	20000224 	.word	0x20000224
 8001608:	2000022c 	.word	0x2000022c
 800160c:	20000230 	.word	0x20000230

08001610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b094      	sub	sp, #80	; 0x50
 8001614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001616:	f107 0320 	add.w	r3, r7, #32
 800161a:	2230      	movs	r2, #48	; 0x30
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f009 feca 	bl	800b3b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001624:	f107 030c 	add.w	r3, r7, #12
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001634:	2300      	movs	r3, #0
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	4b28      	ldr	r3, [pc, #160]	; (80016dc <SystemClock_Config+0xcc>)
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	4a27      	ldr	r2, [pc, #156]	; (80016dc <SystemClock_Config+0xcc>)
 800163e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001642:	6413      	str	r3, [r2, #64]	; 0x40
 8001644:	4b25      	ldr	r3, [pc, #148]	; (80016dc <SystemClock_Config+0xcc>)
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001650:	2300      	movs	r3, #0
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <SystemClock_Config+0xd0>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a21      	ldr	r2, [pc, #132]	; (80016e0 <SystemClock_Config+0xd0>)
 800165a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800165e:	6013      	str	r3, [r2, #0]
 8001660:	4b1f      	ldr	r3, [pc, #124]	; (80016e0 <SystemClock_Config+0xd0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800166c:	2301      	movs	r3, #1
 800166e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001670:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001676:	2302      	movs	r3, #2
 8001678:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800167a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800167e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001680:	2308      	movs	r3, #8
 8001682:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001684:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001688:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800168a:	2302      	movs	r3, #2
 800168c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800168e:	2307      	movs	r3, #7
 8001690:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001692:	f107 0320 	add.w	r3, r7, #32
 8001696:	4618      	mov	r0, r3
 8001698:	f004 fa50 	bl	8005b3c <HAL_RCC_OscConfig>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80016a2:	f000 fb4f 	bl	8001d44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016a6:	230f      	movs	r3, #15
 80016a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016aa:	2302      	movs	r3, #2
 80016ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016be:	f107 030c 	add.w	r3, r7, #12
 80016c2:	2105      	movs	r1, #5
 80016c4:	4618      	mov	r0, r3
 80016c6:	f004 fcb1 	bl	800602c <HAL_RCC_ClockConfig>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80016d0:	f000 fb38 	bl	8001d44 <Error_Handler>
  }
}
 80016d4:	bf00      	nop
 80016d6:	3750      	adds	r7, #80	; 0x50
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40007000 	.word	0x40007000

080016e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016ea:	463b      	mov	r3, r7
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016f6:	4b22      	ldr	r3, [pc, #136]	; (8001780 <MX_ADC1_Init+0x9c>)
 80016f8:	4a22      	ldr	r2, [pc, #136]	; (8001784 <MX_ADC1_Init+0xa0>)
 80016fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016fc:	4b20      	ldr	r3, [pc, #128]	; (8001780 <MX_ADC1_Init+0x9c>)
 80016fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001702:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001704:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <MX_ADC1_Init+0x9c>)
 8001706:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800170a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800170c:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <MX_ADC1_Init+0x9c>)
 800170e:	2200      	movs	r2, #0
 8001710:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001712:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <MX_ADC1_Init+0x9c>)
 8001714:	2200      	movs	r2, #0
 8001716:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001718:	4b19      	ldr	r3, [pc, #100]	; (8001780 <MX_ADC1_Init+0x9c>)
 800171a:	2200      	movs	r2, #0
 800171c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001720:	4b17      	ldr	r3, [pc, #92]	; (8001780 <MX_ADC1_Init+0x9c>)
 8001722:	2200      	movs	r2, #0
 8001724:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001726:	4b16      	ldr	r3, [pc, #88]	; (8001780 <MX_ADC1_Init+0x9c>)
 8001728:	4a17      	ldr	r2, [pc, #92]	; (8001788 <MX_ADC1_Init+0xa4>)
 800172a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800172c:	4b14      	ldr	r3, [pc, #80]	; (8001780 <MX_ADC1_Init+0x9c>)
 800172e:	2200      	movs	r2, #0
 8001730:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001732:	4b13      	ldr	r3, [pc, #76]	; (8001780 <MX_ADC1_Init+0x9c>)
 8001734:	2201      	movs	r2, #1
 8001736:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <MX_ADC1_Init+0x9c>)
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001740:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <MX_ADC1_Init+0x9c>)
 8001742:	2201      	movs	r2, #1
 8001744:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001746:	480e      	ldr	r0, [pc, #56]	; (8001780 <MX_ADC1_Init+0x9c>)
 8001748:	f000 ff36 	bl	80025b8 <HAL_ADC_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001752:	f000 faf7 	bl	8001d44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001756:	2302      	movs	r3, #2
 8001758:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800175a:	2301      	movs	r3, #1
 800175c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800175e:	2300      	movs	r3, #0
 8001760:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001762:	463b      	mov	r3, r7
 8001764:	4619      	mov	r1, r3
 8001766:	4806      	ldr	r0, [pc, #24]	; (8001780 <MX_ADC1_Init+0x9c>)
 8001768:	f001 f908 	bl	800297c <HAL_ADC_ConfigChannel>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001772:	f000 fae7 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000298 	.word	0x20000298
 8001784:	40012000 	.word	0x40012000
 8001788:	0f000001 	.word	0x0f000001

0800178c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08a      	sub	sp, #40	; 0x28
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001792:	4b26      	ldr	r3, [pc, #152]	; (800182c <MX_CAN1_Init+0xa0>)
 8001794:	4a26      	ldr	r2, [pc, #152]	; (8001830 <MX_CAN1_Init+0xa4>)
 8001796:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8001798:	4b24      	ldr	r3, [pc, #144]	; (800182c <MX_CAN1_Init+0xa0>)
 800179a:	2212      	movs	r2, #18
 800179c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800179e:	4b23      	ldr	r3, [pc, #140]	; (800182c <MX_CAN1_Init+0xa0>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80017a4:	4b21      	ldr	r3, [pc, #132]	; (800182c <MX_CAN1_Init+0xa0>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80017aa:	4b20      	ldr	r3, [pc, #128]	; (800182c <MX_CAN1_Init+0xa0>)
 80017ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017b0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80017b2:	4b1e      	ldr	r3, [pc, #120]	; (800182c <MX_CAN1_Init+0xa0>)
 80017b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80017b8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80017ba:	4b1c      	ldr	r3, [pc, #112]	; (800182c <MX_CAN1_Init+0xa0>)
 80017bc:	2200      	movs	r2, #0
 80017be:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80017c0:	4b1a      	ldr	r3, [pc, #104]	; (800182c <MX_CAN1_Init+0xa0>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80017c6:	4b19      	ldr	r3, [pc, #100]	; (800182c <MX_CAN1_Init+0xa0>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80017cc:	4b17      	ldr	r3, [pc, #92]	; (800182c <MX_CAN1_Init+0xa0>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80017d2:	4b16      	ldr	r3, [pc, #88]	; (800182c <MX_CAN1_Init+0xa0>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80017d8:	4b14      	ldr	r3, [pc, #80]	; (800182c <MX_CAN1_Init+0xa0>)
 80017da:	2200      	movs	r2, #0
 80017dc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80017de:	4813      	ldr	r0, [pc, #76]	; (800182c <MX_CAN1_Init+0xa0>)
 80017e0:	f001 faea 	bl	8002db8 <HAL_CAN_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80017ea:	f000 faab 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80017ee:	2301      	movs	r3, #1
 80017f0:	623b      	str	r3, [r7, #32]
  	canfilterconfig.FilterBank = 18; // which filter bank to use from the assigned ones
 80017f2:	2312      	movs	r3, #18
 80017f4:	617b      	str	r3, [r7, #20]
  	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
  	canfilterconfig.FilterIdHigh = 0x103 << 5;
 80017fa:	f242 0360 	movw	r3, #8288	; 0x2060
 80017fe:	603b      	str	r3, [r7, #0]
  	canfilterconfig.FilterIdLow = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	607b      	str	r3, [r7, #4]
  	canfilterconfig.FilterMaskIdHigh = 0x103 << 5;
 8001804:	f242 0360 	movw	r3, #8288	; 0x2060
 8001808:	60bb      	str	r3, [r7, #8]
  	canfilterconfig.FilterMaskIdLow = 0x0000;
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
  	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
  	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001812:	2301      	movs	r3, #1
 8001814:	61fb      	str	r3, [r7, #28]
  	canfilterconfig.SlaveStartFilterBank = 20; // how many filters to assign to the CAN1 (master can)
 8001816:	2314      	movs	r3, #20
 8001818:	627b      	str	r3, [r7, #36]	; 0x24

  	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800181a:	463b      	mov	r3, r7
 800181c:	4619      	mov	r1, r3
 800181e:	4803      	ldr	r0, [pc, #12]	; (800182c <MX_CAN1_Init+0xa0>)
 8001820:	f001 fbc6 	bl	8002fb0 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8001824:	bf00      	nop
 8001826:	3728      	adds	r7, #40	; 0x28
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	200002e0 	.word	0x200002e0
 8001830:	40006400 	.word	0x40006400

08001834 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001838:	4b12      	ldr	r3, [pc, #72]	; (8001884 <MX_I2C1_Init+0x50>)
 800183a:	4a13      	ldr	r2, [pc, #76]	; (8001888 <MX_I2C1_Init+0x54>)
 800183c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800183e:	4b11      	ldr	r3, [pc, #68]	; (8001884 <MX_I2C1_Init+0x50>)
 8001840:	4a12      	ldr	r2, [pc, #72]	; (800188c <MX_I2C1_Init+0x58>)
 8001842:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001844:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <MX_I2C1_Init+0x50>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800184a:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <MX_I2C1_Init+0x50>)
 800184c:	2200      	movs	r2, #0
 800184e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <MX_I2C1_Init+0x50>)
 8001852:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001856:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001858:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <MX_I2C1_Init+0x50>)
 800185a:	2200      	movs	r2, #0
 800185c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800185e:	4b09      	ldr	r3, [pc, #36]	; (8001884 <MX_I2C1_Init+0x50>)
 8001860:	2200      	movs	r2, #0
 8001862:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001864:	4b07      	ldr	r3, [pc, #28]	; (8001884 <MX_I2C1_Init+0x50>)
 8001866:	2200      	movs	r2, #0
 8001868:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800186a:	4b06      	ldr	r3, [pc, #24]	; (8001884 <MX_I2C1_Init+0x50>)
 800186c:	2200      	movs	r2, #0
 800186e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001870:	4804      	ldr	r0, [pc, #16]	; (8001884 <MX_I2C1_Init+0x50>)
 8001872:	f004 f81f 	bl	80058b4 <HAL_I2C_Init>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800187c:	f000 fa62 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000308 	.word	0x20000308
 8001888:	40005400 	.word	0x40005400
 800188c:	000186a0 	.word	0x000186a0

08001890 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001894:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <MX_SPI1_Init+0x64>)
 8001896:	4a18      	ldr	r2, [pc, #96]	; (80018f8 <MX_SPI1_Init+0x68>)
 8001898:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800189a:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <MX_SPI1_Init+0x64>)
 800189c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018a2:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018b4:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018c2:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018c8:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018d4:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018dc:	220a      	movs	r2, #10
 80018de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018e0:	4804      	ldr	r0, [pc, #16]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018e2:	f004 fdc3 	bl	800646c <HAL_SPI_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018ec:	f000 fa2a 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	2000035c 	.word	0x2000035c
 80018f8:	40013000 	.word	0x40013000

080018fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08e      	sub	sp, #56	; 0x38
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001902:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001910:	f107 0320 	add.w	r3, r7, #32
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
 8001928:	615a      	str	r2, [r3, #20]
 800192a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800192c:	4b2c      	ldr	r3, [pc, #176]	; (80019e0 <MX_TIM4_Init+0xe4>)
 800192e:	4a2d      	ldr	r2, [pc, #180]	; (80019e4 <MX_TIM4_Init+0xe8>)
 8001930:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 328;
 8001932:	4b2b      	ldr	r3, [pc, #172]	; (80019e0 <MX_TIM4_Init+0xe4>)
 8001934:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8001938:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800193a:	4b29      	ldr	r3, [pc, #164]	; (80019e0 <MX_TIM4_Init+0xe4>)
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 8001940:	4b27      	ldr	r3, [pc, #156]	; (80019e0 <MX_TIM4_Init+0xe4>)
 8001942:	22ff      	movs	r2, #255	; 0xff
 8001944:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001946:	4b26      	ldr	r3, [pc, #152]	; (80019e0 <MX_TIM4_Init+0xe4>)
 8001948:	2200      	movs	r2, #0
 800194a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194c:	4b24      	ldr	r3, [pc, #144]	; (80019e0 <MX_TIM4_Init+0xe4>)
 800194e:	2200      	movs	r2, #0
 8001950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001952:	4823      	ldr	r0, [pc, #140]	; (80019e0 <MX_TIM4_Init+0xe4>)
 8001954:	f004 fe13 	bl	800657e <HAL_TIM_Base_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800195e:	f000 f9f1 	bl	8001d44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001966:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001968:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800196c:	4619      	mov	r1, r3
 800196e:	481c      	ldr	r0, [pc, #112]	; (80019e0 <MX_TIM4_Init+0xe4>)
 8001970:	f005 f9b0 	bl	8006cd4 <HAL_TIM_ConfigClockSource>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800197a:	f000 f9e3 	bl	8001d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800197e:	4818      	ldr	r0, [pc, #96]	; (80019e0 <MX_TIM4_Init+0xe4>)
 8001980:	f004 febc 	bl	80066fc <HAL_TIM_PWM_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800198a:	f000 f9db 	bl	8001d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800198e:	2300      	movs	r3, #0
 8001990:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001996:	f107 0320 	add.w	r3, r7, #32
 800199a:	4619      	mov	r1, r3
 800199c:	4810      	ldr	r0, [pc, #64]	; (80019e0 <MX_TIM4_Init+0xe4>)
 800199e:	f005 fda3 	bl	80074e8 <HAL_TIMEx_MasterConfigSynchronization>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80019a8:	f000 f9cc 	bl	8001d44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ac:	2360      	movs	r3, #96	; 0x60
 80019ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	2200      	movs	r2, #0
 80019c0:	4619      	mov	r1, r3
 80019c2:	4807      	ldr	r0, [pc, #28]	; (80019e0 <MX_TIM4_Init+0xe4>)
 80019c4:	f005 f8c4 	bl	8006b50 <HAL_TIM_PWM_ConfigChannel>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80019ce:	f000 f9b9 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80019d2:	4803      	ldr	r0, [pc, #12]	; (80019e0 <MX_TIM4_Init+0xe4>)
 80019d4:	f000 fb5e 	bl	8002094 <HAL_TIM_MspPostInit>

}
 80019d8:	bf00      	nop
 80019da:	3738      	adds	r7, #56	; 0x38
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	200003b4 	.word	0x200003b4
 80019e4:	40000800 	.word	0x40000800

080019e8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ee:	463b      	mov	r3, r7
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <MX_TIM6_Init+0x64>)
 80019f8:	4a15      	ldr	r2, [pc, #84]	; (8001a50 <MX_TIM6_Init+0x68>)
 80019fa:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400;
 80019fc:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <MX_TIM6_Init+0x64>)
 80019fe:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8001a02:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <MX_TIM6_Init+0x64>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20000;
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <MX_TIM6_Init+0x64>)
 8001a0c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001a10:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <MX_TIM6_Init+0x64>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001a18:	480c      	ldr	r0, [pc, #48]	; (8001a4c <MX_TIM6_Init+0x64>)
 8001a1a:	f004 fdb0 	bl	800657e <HAL_TIM_Base_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001a24:	f000 f98e 	bl	8001d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001a30:	463b      	mov	r3, r7
 8001a32:	4619      	mov	r1, r3
 8001a34:	4805      	ldr	r0, [pc, #20]	; (8001a4c <MX_TIM6_Init+0x64>)
 8001a36:	f005 fd57 	bl	80074e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001a40:	f000 f980 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001a44:	bf00      	nop
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	200003fc 	.word	0x200003fc
 8001a50:	40001000 	.word	0x40001000

08001a54 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001a58:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <MX_UART5_Init+0x4c>)
 8001a5a:	4a12      	ldr	r2, [pc, #72]	; (8001aa4 <MX_UART5_Init+0x50>)
 8001a5c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001a5e:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <MX_UART5_Init+0x4c>)
 8001a60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a64:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <MX_UART5_Init+0x4c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <MX_UART5_Init+0x4c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001a72:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <MX_UART5_Init+0x4c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001a78:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <MX_UART5_Init+0x4c>)
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a7e:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <MX_UART5_Init+0x4c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <MX_UART5_Init+0x4c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001a8a:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <MX_UART5_Init+0x4c>)
 8001a8c:	f005 fdbc 	bl	8007608 <HAL_UART_Init>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001a96:	f000 f955 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000444 	.word	0x20000444
 8001aa4:	40005000 	.word	0x40005000

08001aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08c      	sub	sp, #48	; 0x30
 8001aac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aae:	f107 031c 	add.w	r3, r7, #28
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	60da      	str	r2, [r3, #12]
 8001abc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61bb      	str	r3, [r7, #24]
 8001ac2:	4b9a      	ldr	r3, [pc, #616]	; (8001d2c <MX_GPIO_Init+0x284>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a99      	ldr	r2, [pc, #612]	; (8001d2c <MX_GPIO_Init+0x284>)
 8001ac8:	f043 0310 	orr.w	r3, r3, #16
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b97      	ldr	r3, [pc, #604]	; (8001d2c <MX_GPIO_Init+0x284>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0310 	and.w	r3, r3, #16
 8001ad6:	61bb      	str	r3, [r7, #24]
 8001ad8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	4b93      	ldr	r3, [pc, #588]	; (8001d2c <MX_GPIO_Init+0x284>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	4a92      	ldr	r2, [pc, #584]	; (8001d2c <MX_GPIO_Init+0x284>)
 8001ae4:	f043 0304 	orr.w	r3, r3, #4
 8001ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aea:	4b90      	ldr	r3, [pc, #576]	; (8001d2c <MX_GPIO_Init+0x284>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f003 0304 	and.w	r3, r3, #4
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	4b8c      	ldr	r3, [pc, #560]	; (8001d2c <MX_GPIO_Init+0x284>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a8b      	ldr	r2, [pc, #556]	; (8001d2c <MX_GPIO_Init+0x284>)
 8001b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b89      	ldr	r3, [pc, #548]	; (8001d2c <MX_GPIO_Init+0x284>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	4b85      	ldr	r3, [pc, #532]	; (8001d2c <MX_GPIO_Init+0x284>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a84      	ldr	r2, [pc, #528]	; (8001d2c <MX_GPIO_Init+0x284>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b82      	ldr	r3, [pc, #520]	; (8001d2c <MX_GPIO_Init+0x284>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	4b7e      	ldr	r3, [pc, #504]	; (8001d2c <MX_GPIO_Init+0x284>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	4a7d      	ldr	r2, [pc, #500]	; (8001d2c <MX_GPIO_Init+0x284>)
 8001b38:	f043 0302 	orr.w	r3, r3, #2
 8001b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3e:	4b7b      	ldr	r3, [pc, #492]	; (8001d2c <MX_GPIO_Init+0x284>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	4b77      	ldr	r3, [pc, #476]	; (8001d2c <MX_GPIO_Init+0x284>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	4a76      	ldr	r2, [pc, #472]	; (8001d2c <MX_GPIO_Init+0x284>)
 8001b54:	f043 0308 	orr.w	r3, r3, #8
 8001b58:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5a:	4b74      	ldr	r3, [pc, #464]	; (8001d2c <MX_GPIO_Init+0x284>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2108      	movs	r1, #8
 8001b6a:	4871      	ldr	r0, [pc, #452]	; (8001d30 <MX_GPIO_Init+0x288>)
 8001b6c:	f002 fa4c 	bl	8004008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001b70:	2201      	movs	r2, #1
 8001b72:	2101      	movs	r1, #1
 8001b74:	486f      	ldr	r0, [pc, #444]	; (8001d34 <MX_GPIO_Init+0x28c>)
 8001b76:	f002 fa47 	bl	8004008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2120      	movs	r1, #32
 8001b7e:	486d      	ldr	r0, [pc, #436]	; (8001d34 <MX_GPIO_Init+0x28c>)
 8001b80:	f002 fa42 	bl	8004008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 8001b84:	2200      	movs	r2, #0
 8001b86:	f24e 0110 	movw	r1, #57360	; 0xe010
 8001b8a:	486b      	ldr	r0, [pc, #428]	; (8001d38 <MX_GPIO_Init+0x290>)
 8001b8c:	f002 fa3c 	bl	8004008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001b90:	2308      	movs	r3, #8
 8001b92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b94:	2301      	movs	r3, #1
 8001b96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001ba0:	f107 031c 	add.w	r3, r7, #28
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4862      	ldr	r0, [pc, #392]	; (8001d30 <MX_GPIO_Init+0x288>)
 8001ba8:	f002 f87a 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001bac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bb2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001bb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bbc:	f107 031c 	add.w	r3, r7, #28
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	485c      	ldr	r0, [pc, #368]	; (8001d34 <MX_GPIO_Init+0x28c>)
 8001bc4:	f002 f86c 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC5 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_5;
 8001bc8:	2321      	movs	r3, #33	; 0x21
 8001bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd8:	f107 031c 	add.w	r3, r7, #28
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4855      	ldr	r0, [pc, #340]	; (8001d34 <MX_GPIO_Init+0x28c>)
 8001be0:	f002 f85e 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001be4:	2308      	movs	r3, #8
 8001be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be8:	2302      	movs	r3, #2
 8001bea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bf4:	2305      	movs	r3, #5
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001bf8:	f107 031c 	add.w	r3, r7, #28
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	484d      	ldr	r0, [pc, #308]	; (8001d34 <MX_GPIO_Init+0x28c>)
 8001c00:	f002 f84e 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c04:	2301      	movs	r3, #1
 8001c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c08:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c12:	f107 031c 	add.w	r3, r7, #28
 8001c16:	4619      	mov	r1, r3
 8001c18:	4848      	ldr	r0, [pc, #288]	; (8001d3c <MX_GPIO_Init+0x294>)
 8001c1a:	f002 f841 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : dht11_Pin */
  GPIO_InitStruct.Pin = dht11_Pin;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c22:	2300      	movs	r3, #0
 8001c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(dht11_GPIO_Port, &GPIO_InitStruct);
 8001c2a:	f107 031c 	add.w	r3, r7, #28
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4842      	ldr	r0, [pc, #264]	; (8001d3c <MX_GPIO_Init+0x294>)
 8001c32:	f002 f835 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001c36:	2310      	movs	r3, #16
 8001c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	2300      	movs	r3, #0
 8001c44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c46:	2306      	movs	r3, #6
 8001c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001c4a:	f107 031c 	add.w	r3, r7, #28
 8001c4e:	4619      	mov	r1, r3
 8001c50:	483a      	ldr	r0, [pc, #232]	; (8001d3c <MX_GPIO_Init+0x294>)
 8001c52:	f002 f825 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001c56:	2304      	movs	r3, #4
 8001c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001c62:	f107 031c 	add.w	r3, r7, #28
 8001c66:	4619      	mov	r1, r3
 8001c68:	4835      	ldr	r0, [pc, #212]	; (8001d40 <MX_GPIO_Init+0x298>)
 8001c6a:	f002 f819 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c80:	2305      	movs	r3, #5
 8001c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001c84:	f107 031c 	add.w	r3, r7, #28
 8001c88:	4619      	mov	r1, r3
 8001c8a:	482d      	ldr	r0, [pc, #180]	; (8001d40 <MX_GPIO_Init+0x298>)
 8001c8c:	f002 f808 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin;
 8001c90:	f24e 0310 	movw	r3, #57360	; 0xe010
 8001c94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c96:	2301      	movs	r3, #1
 8001c98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ca2:	f107 031c 	add.w	r3, r7, #28
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4823      	ldr	r0, [pc, #140]	; (8001d38 <MX_GPIO_Init+0x290>)
 8001caa:	f001 fff9 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin;
 8001cae:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8001cb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cc0:	2306      	movs	r3, #6
 8001cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc4:	f107 031c 	add.w	r3, r7, #28
 8001cc8:	4619      	mov	r1, r3
 8001cca:	481a      	ldr	r0, [pc, #104]	; (8001d34 <MX_GPIO_Init+0x28c>)
 8001ccc:	f001 ffe8 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001cd0:	2320      	movs	r3, #32
 8001cd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001cdc:	f107 031c 	add.w	r3, r7, #28
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4815      	ldr	r0, [pc, #84]	; (8001d38 <MX_GPIO_Init+0x290>)
 8001ce4:	f001 ffdc 	bl	8003ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001cec:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001cf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001cf6:	f107 031c 	add.w	r3, r7, #28
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	480c      	ldr	r0, [pc, #48]	; (8001d30 <MX_GPIO_Init+0x288>)
 8001cfe:	f001 ffcf 	bl	8003ca0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2100      	movs	r1, #0
 8001d06:	2006      	movs	r0, #6
 8001d08:	f001 ff93 	bl	8003c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001d0c:	2006      	movs	r0, #6
 8001d0e:	f001 ffac 	bl	8003c6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d12:	2200      	movs	r2, #0
 8001d14:	2100      	movs	r1, #0
 8001d16:	2028      	movs	r0, #40	; 0x28
 8001d18:	f001 ff8b 	bl	8003c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d1c:	2028      	movs	r0, #40	; 0x28
 8001d1e:	f001 ffa4 	bl	8003c6a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d22:	bf00      	nop
 8001d24:	3730      	adds	r7, #48	; 0x30
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40020800 	.word	0x40020800
 8001d38:	40020c00 	.word	0x40020c00
 8001d3c:	40020000 	.word	0x40020000
 8001d40:	40020400 	.word	0x40020400

08001d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d48:	b672      	cpsid	i
}
 8001d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <Error_Handler+0x8>
	...

08001d50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <HAL_MspInit+0x4c>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5e:	4a0f      	ldr	r2, [pc, #60]	; (8001d9c <HAL_MspInit+0x4c>)
 8001d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d64:	6453      	str	r3, [r2, #68]	; 0x44
 8001d66:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <HAL_MspInit+0x4c>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	603b      	str	r3, [r7, #0]
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <HAL_MspInit+0x4c>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	4a08      	ldr	r2, [pc, #32]	; (8001d9c <HAL_MspInit+0x4c>)
 8001d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d80:	6413      	str	r3, [r2, #64]	; 0x40
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <HAL_MspInit+0x4c>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8a:	603b      	str	r3, [r7, #0]
 8001d8c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d8e:	2007      	movs	r0, #7
 8001d90:	f001 ff44 	bl	8003c1c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d94:	bf00      	nop
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40023800 	.word	0x40023800

08001da0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08a      	sub	sp, #40	; 0x28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da8:	f107 0314 	add.w	r3, r7, #20
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a17      	ldr	r2, [pc, #92]	; (8001e1c <HAL_ADC_MspInit+0x7c>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d127      	bne.n	8001e12 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <HAL_ADC_MspInit+0x80>)
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	4a15      	ldr	r2, [pc, #84]	; (8001e20 <HAL_ADC_MspInit+0x80>)
 8001dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd2:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <HAL_ADC_MspInit+0x80>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dda:	613b      	str	r3, [r7, #16]
 8001ddc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <HAL_ADC_MspInit+0x80>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a0e      	ldr	r2, [pc, #56]	; (8001e20 <HAL_ADC_MspInit+0x80>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <HAL_ADC_MspInit+0x80>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001dfa:	2304      	movs	r3, #4
 8001dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e06:	f107 0314 	add.w	r3, r7, #20
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4805      	ldr	r0, [pc, #20]	; (8001e24 <HAL_ADC_MspInit+0x84>)
 8001e0e:	f001 ff47 	bl	8003ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e12:	bf00      	nop
 8001e14:	3728      	adds	r7, #40	; 0x28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40012000 	.word	0x40012000
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40020000 	.word	0x40020000

08001e28 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08a      	sub	sp, #40	; 0x28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a25      	ldr	r2, [pc, #148]	; (8001edc <HAL_CAN_MspInit+0xb4>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d143      	bne.n	8001ed2 <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	4b24      	ldr	r3, [pc, #144]	; (8001ee0 <HAL_CAN_MspInit+0xb8>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	4a23      	ldr	r2, [pc, #140]	; (8001ee0 <HAL_CAN_MspInit+0xb8>)
 8001e54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e58:	6413      	str	r3, [r2, #64]	; 0x40
 8001e5a:	4b21      	ldr	r3, [pc, #132]	; (8001ee0 <HAL_CAN_MspInit+0xb8>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <HAL_CAN_MspInit+0xb8>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	4a1c      	ldr	r2, [pc, #112]	; (8001ee0 <HAL_CAN_MspInit+0xb8>)
 8001e70:	f043 0308 	orr.w	r3, r3, #8
 8001e74:	6313      	str	r3, [r2, #48]	; 0x30
 8001e76:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <HAL_CAN_MspInit+0xb8>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e82:	2301      	movs	r3, #1
 8001e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e86:	2302      	movs	r3, #2
 8001e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001e92:	2309      	movs	r3, #9
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e96:	f107 0314 	add.w	r3, r7, #20
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4811      	ldr	r0, [pc, #68]	; (8001ee4 <HAL_CAN_MspInit+0xbc>)
 8001e9e:	f001 feff 	bl	8003ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001eb2:	2309      	movs	r3, #9
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eb6:	f107 0314 	add.w	r3, r7, #20
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4809      	ldr	r0, [pc, #36]	; (8001ee4 <HAL_CAN_MspInit+0xbc>)
 8001ebe:	f001 feef 	bl	8003ca0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	2014      	movs	r0, #20
 8001ec8:	f001 feb3 	bl	8003c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001ecc:	2014      	movs	r0, #20
 8001ece:	f001 fecc 	bl	8003c6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001ed2:	bf00      	nop
 8001ed4:	3728      	adds	r7, #40	; 0x28
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40006400 	.word	0x40006400
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40020c00 	.word	0x40020c00

08001ee8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08a      	sub	sp, #40	; 0x28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a19      	ldr	r2, [pc, #100]	; (8001f6c <HAL_I2C_MspInit+0x84>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d12c      	bne.n	8001f64 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	4b18      	ldr	r3, [pc, #96]	; (8001f70 <HAL_I2C_MspInit+0x88>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	4a17      	ldr	r2, [pc, #92]	; (8001f70 <HAL_I2C_MspInit+0x88>)
 8001f14:	f043 0302 	orr.w	r3, r3, #2
 8001f18:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1a:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <HAL_I2C_MspInit+0x88>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001f26:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f2c:	2312      	movs	r3, #18
 8001f2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f30:	2301      	movs	r3, #1
 8001f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f34:	2300      	movs	r3, #0
 8001f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f38:	2304      	movs	r3, #4
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	4619      	mov	r1, r3
 8001f42:	480c      	ldr	r0, [pc, #48]	; (8001f74 <HAL_I2C_MspInit+0x8c>)
 8001f44:	f001 feac 	bl	8003ca0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <HAL_I2C_MspInit+0x88>)
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	4a07      	ldr	r2, [pc, #28]	; (8001f70 <HAL_I2C_MspInit+0x88>)
 8001f52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f56:	6413      	str	r3, [r2, #64]	; 0x40
 8001f58:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <HAL_I2C_MspInit+0x88>)
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f64:	bf00      	nop
 8001f66:	3728      	adds	r7, #40	; 0x28
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40005400 	.word	0x40005400
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40020400 	.word	0x40020400

08001f78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08a      	sub	sp, #40	; 0x28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a19      	ldr	r2, [pc, #100]	; (8001ffc <HAL_SPI_MspInit+0x84>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d12b      	bne.n	8001ff2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	4b18      	ldr	r3, [pc, #96]	; (8002000 <HAL_SPI_MspInit+0x88>)
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa2:	4a17      	ldr	r2, [pc, #92]	; (8002000 <HAL_SPI_MspInit+0x88>)
 8001fa4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8001faa:	4b15      	ldr	r3, [pc, #84]	; (8002000 <HAL_SPI_MspInit+0x88>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	4b11      	ldr	r3, [pc, #68]	; (8002000 <HAL_SPI_MspInit+0x88>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	4a10      	ldr	r2, [pc, #64]	; (8002000 <HAL_SPI_MspInit+0x88>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <HAL_SPI_MspInit+0x88>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001fd2:	23e0      	movs	r3, #224	; 0xe0
 8001fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fe2:	2305      	movs	r3, #5
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe6:	f107 0314 	add.w	r3, r7, #20
 8001fea:	4619      	mov	r1, r3
 8001fec:	4805      	ldr	r0, [pc, #20]	; (8002004 <HAL_SPI_MspInit+0x8c>)
 8001fee:	f001 fe57 	bl	8003ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ff2:	bf00      	nop
 8001ff4:	3728      	adds	r7, #40	; 0x28
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40013000 	.word	0x40013000
 8002000:	40023800 	.word	0x40023800
 8002004:	40020000 	.word	0x40020000

08002008 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a1c      	ldr	r2, [pc, #112]	; (8002088 <HAL_TIM_Base_MspInit+0x80>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d116      	bne.n	8002048 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	4b1b      	ldr	r3, [pc, #108]	; (800208c <HAL_TIM_Base_MspInit+0x84>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	4a1a      	ldr	r2, [pc, #104]	; (800208c <HAL_TIM_Base_MspInit+0x84>)
 8002024:	f043 0304 	orr.w	r3, r3, #4
 8002028:	6413      	str	r3, [r2, #64]	; 0x40
 800202a:	4b18      	ldr	r3, [pc, #96]	; (800208c <HAL_TIM_Base_MspInit+0x84>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002036:	2200      	movs	r2, #0
 8002038:	2100      	movs	r1, #0
 800203a:	201e      	movs	r0, #30
 800203c:	f001 fdf9 	bl	8003c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002040:	201e      	movs	r0, #30
 8002042:	f001 fe12 	bl	8003c6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002046:	e01a      	b.n	800207e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM6)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a10      	ldr	r2, [pc, #64]	; (8002090 <HAL_TIM_Base_MspInit+0x88>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d115      	bne.n	800207e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	4b0d      	ldr	r3, [pc, #52]	; (800208c <HAL_TIM_Base_MspInit+0x84>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	4a0c      	ldr	r2, [pc, #48]	; (800208c <HAL_TIM_Base_MspInit+0x84>)
 800205c:	f043 0310 	orr.w	r3, r3, #16
 8002060:	6413      	str	r3, [r2, #64]	; 0x40
 8002062:	4b0a      	ldr	r3, [pc, #40]	; (800208c <HAL_TIM_Base_MspInit+0x84>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	f003 0310 	and.w	r3, r3, #16
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800206e:	2200      	movs	r2, #0
 8002070:	2100      	movs	r1, #0
 8002072:	2036      	movs	r0, #54	; 0x36
 8002074:	f001 fddd 	bl	8003c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002078:	2036      	movs	r0, #54	; 0x36
 800207a:	f001 fdf6 	bl	8003c6a <HAL_NVIC_EnableIRQ>
}
 800207e:	bf00      	nop
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40000800 	.word	0x40000800
 800208c:	40023800 	.word	0x40023800
 8002090:	40001000 	.word	0x40001000

08002094 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209c:	f107 030c 	add.w	r3, r7, #12
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a12      	ldr	r2, [pc, #72]	; (80020fc <HAL_TIM_MspPostInit+0x68>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d11e      	bne.n	80020f4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	4b11      	ldr	r3, [pc, #68]	; (8002100 <HAL_TIM_MspPostInit+0x6c>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	4a10      	ldr	r2, [pc, #64]	; (8002100 <HAL_TIM_MspPostInit+0x6c>)
 80020c0:	f043 0308 	orr.w	r3, r3, #8
 80020c4:	6313      	str	r3, [r2, #48]	; 0x30
 80020c6:	4b0e      	ldr	r3, [pc, #56]	; (8002100 <HAL_TIM_MspPostInit+0x6c>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	60bb      	str	r3, [r7, #8]
 80020d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80020d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d8:	2302      	movs	r3, #2
 80020da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020e4:	2302      	movs	r3, #2
 80020e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020e8:	f107 030c 	add.w	r3, r7, #12
 80020ec:	4619      	mov	r1, r3
 80020ee:	4805      	ldr	r0, [pc, #20]	; (8002104 <HAL_TIM_MspPostInit+0x70>)
 80020f0:	f001 fdd6 	bl	8003ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80020f4:	bf00      	nop
 80020f6:	3720      	adds	r7, #32
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40000800 	.word	0x40000800
 8002100:	40023800 	.word	0x40023800
 8002104:	40020c00 	.word	0x40020c00

08002108 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08a      	sub	sp, #40	; 0x28
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002110:	f107 0314 	add.w	r3, r7, #20
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a28      	ldr	r2, [pc, #160]	; (80021c8 <HAL_UART_MspInit+0xc0>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d14a      	bne.n	80021c0 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	4b27      	ldr	r3, [pc, #156]	; (80021cc <HAL_UART_MspInit+0xc4>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	4a26      	ldr	r2, [pc, #152]	; (80021cc <HAL_UART_MspInit+0xc4>)
 8002134:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002138:	6413      	str	r3, [r2, #64]	; 0x40
 800213a:	4b24      	ldr	r3, [pc, #144]	; (80021cc <HAL_UART_MspInit+0xc4>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	4b20      	ldr	r3, [pc, #128]	; (80021cc <HAL_UART_MspInit+0xc4>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	4a1f      	ldr	r2, [pc, #124]	; (80021cc <HAL_UART_MspInit+0xc4>)
 8002150:	f043 0304 	orr.w	r3, r3, #4
 8002154:	6313      	str	r3, [r2, #48]	; 0x30
 8002156:	4b1d      	ldr	r3, [pc, #116]	; (80021cc <HAL_UART_MspInit+0xc4>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f003 0304 	and.w	r3, r3, #4
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	60bb      	str	r3, [r7, #8]
 8002166:	4b19      	ldr	r3, [pc, #100]	; (80021cc <HAL_UART_MspInit+0xc4>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	4a18      	ldr	r2, [pc, #96]	; (80021cc <HAL_UART_MspInit+0xc4>)
 800216c:	f043 0308 	orr.w	r3, r3, #8
 8002170:	6313      	str	r3, [r2, #48]	; 0x30
 8002172:	4b16      	ldr	r3, [pc, #88]	; (80021cc <HAL_UART_MspInit+0xc4>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	60bb      	str	r3, [r7, #8]
 800217c:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800217e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002184:	2302      	movs	r3, #2
 8002186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218c:	2303      	movs	r3, #3
 800218e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002190:	2308      	movs	r3, #8
 8002192:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002194:	f107 0314 	add.w	r3, r7, #20
 8002198:	4619      	mov	r1, r3
 800219a:	480d      	ldr	r0, [pc, #52]	; (80021d0 <HAL_UART_MspInit+0xc8>)
 800219c:	f001 fd80 	bl	8003ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021a0:	2304      	movs	r3, #4
 80021a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	2302      	movs	r3, #2
 80021a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ac:	2303      	movs	r3, #3
 80021ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80021b0:	2308      	movs	r3, #8
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	4619      	mov	r1, r3
 80021ba:	4806      	ldr	r0, [pc, #24]	; (80021d4 <HAL_UART_MspInit+0xcc>)
 80021bc:	f001 fd70 	bl	8003ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80021c0:	bf00      	nop
 80021c2:	3728      	adds	r7, #40	; 0x28
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40005000 	.word	0x40005000
 80021cc:	40023800 	.word	0x40023800
 80021d0:	40020800 	.word	0x40020800
 80021d4:	40020c00 	.word	0x40020c00

080021d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021dc:	e7fe      	b.n	80021dc <NMI_Handler+0x4>

080021de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021de:	b480      	push	{r7}
 80021e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021e2:	e7fe      	b.n	80021e2 <HardFault_Handler+0x4>

080021e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021e8:	e7fe      	b.n	80021e8 <MemManage_Handler+0x4>

080021ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ee:	e7fe      	b.n	80021ee <BusFault_Handler+0x4>

080021f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021f4:	e7fe      	b.n	80021f4 <UsageFault_Handler+0x4>

080021f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021f6:	b480      	push	{r7}
 80021f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002212:	b480      	push	{r7}
 8002214:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002224:	f000 f984 	bl	8002530 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002228:	bf00      	nop
 800222a:	bd80      	pop	{r7, pc}

0800222c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002230:	2001      	movs	r0, #1
 8002232:	f001 ff1d 	bl	8004070 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002240:	4802      	ldr	r0, [pc, #8]	; (800224c <CAN1_RX0_IRQHandler+0x10>)
 8002242:	f001 f9ec 	bl	800361e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	200002e0 	.word	0x200002e0

08002250 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002254:	4802      	ldr	r0, [pc, #8]	; (8002260 <TIM4_IRQHandler+0x10>)
 8002256:	f004 fb73 	bl	8006940 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	200003b4 	.word	0x200003b4

08002264 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002268:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800226c:	f001 ff00 	bl	8004070 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002270:	bf00      	nop
 8002272:	bd80      	pop	{r7, pc}

08002274 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002278:	4802      	ldr	r0, [pc, #8]	; (8002284 <OTG_FS_IRQHandler+0x10>)
 800227a:	f002 f97b 	bl	8004574 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	200008b8 	.word	0x200008b8

08002288 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  return 1;
 800228c:	2301      	movs	r3, #1
}
 800228e:	4618      	mov	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <_kill>:

int _kill(int pid, int sig)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022a2:	f009 f84f 	bl	800b344 <__errno>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2216      	movs	r2, #22
 80022aa:	601a      	str	r2, [r3, #0]
  return -1;
 80022ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <_exit>:

void _exit (int status)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022c0:	f04f 31ff 	mov.w	r1, #4294967295
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f7ff ffe7 	bl	8002298 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022ca:	e7fe      	b.n	80022ca <_exit+0x12>

080022cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	e00a      	b.n	80022f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022de:	f3af 8000 	nop.w
 80022e2:	4601      	mov	r1, r0
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	1c5a      	adds	r2, r3, #1
 80022e8:	60ba      	str	r2, [r7, #8]
 80022ea:	b2ca      	uxtb	r2, r1
 80022ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	3301      	adds	r3, #1
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	dbf0      	blt.n	80022de <_read+0x12>
  }

  return len;
 80022fc:	687b      	ldr	r3, [r7, #4]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b086      	sub	sp, #24
 800230a:	af00      	add	r7, sp, #0
 800230c:	60f8      	str	r0, [r7, #12]
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]
 8002316:	e009      	b.n	800232c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	1c5a      	adds	r2, r3, #1
 800231c:	60ba      	str	r2, [r7, #8]
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	3301      	adds	r3, #1
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	429a      	cmp	r2, r3
 8002332:	dbf1      	blt.n	8002318 <_write+0x12>
  }
  return len;
 8002334:	687b      	ldr	r3, [r7, #4]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <_close>:

int _close(int file)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002346:	f04f 33ff 	mov.w	r3, #4294967295
}
 800234a:	4618      	mov	r0, r3
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002366:	605a      	str	r2, [r3, #4]
  return 0;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <_isatty>:

int _isatty(int file)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800237e:	2301      	movs	r3, #1
}
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
	...

080023a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023b0:	4a14      	ldr	r2, [pc, #80]	; (8002404 <_sbrk+0x5c>)
 80023b2:	4b15      	ldr	r3, [pc, #84]	; (8002408 <_sbrk+0x60>)
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023bc:	4b13      	ldr	r3, [pc, #76]	; (800240c <_sbrk+0x64>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d102      	bne.n	80023ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023c4:	4b11      	ldr	r3, [pc, #68]	; (800240c <_sbrk+0x64>)
 80023c6:	4a12      	ldr	r2, [pc, #72]	; (8002410 <_sbrk+0x68>)
 80023c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <_sbrk+0x64>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d207      	bcs.n	80023e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023d8:	f008 ffb4 	bl	800b344 <__errno>
 80023dc:	4603      	mov	r3, r0
 80023de:	220c      	movs	r2, #12
 80023e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023e2:	f04f 33ff 	mov.w	r3, #4294967295
 80023e6:	e009      	b.n	80023fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023e8:	4b08      	ldr	r3, [pc, #32]	; (800240c <_sbrk+0x64>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ee:	4b07      	ldr	r3, [pc, #28]	; (800240c <_sbrk+0x64>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4413      	add	r3, r2
 80023f6:	4a05      	ldr	r2, [pc, #20]	; (800240c <_sbrk+0x64>)
 80023f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023fa:	68fb      	ldr	r3, [r7, #12]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	20020000 	.word	0x20020000
 8002408:	00000400 	.word	0x00000400
 800240c:	200004d4 	.word	0x200004d4
 8002410:	20000bd0 	.word	0x20000bd0

08002414 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002418:	4b06      	ldr	r3, [pc, #24]	; (8002434 <SystemInit+0x20>)
 800241a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241e:	4a05      	ldr	r2, [pc, #20]	; (8002434 <SystemInit+0x20>)
 8002420:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002424:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002438:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002470 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800243c:	480d      	ldr	r0, [pc, #52]	; (8002474 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800243e:	490e      	ldr	r1, [pc, #56]	; (8002478 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002440:	4a0e      	ldr	r2, [pc, #56]	; (800247c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002444:	e002      	b.n	800244c <LoopCopyDataInit>

08002446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800244a:	3304      	adds	r3, #4

0800244c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800244c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800244e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002450:	d3f9      	bcc.n	8002446 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002452:	4a0b      	ldr	r2, [pc, #44]	; (8002480 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002454:	4c0b      	ldr	r4, [pc, #44]	; (8002484 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002458:	e001      	b.n	800245e <LoopFillZerobss>

0800245a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800245a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800245c:	3204      	adds	r2, #4

0800245e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800245e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002460:	d3fb      	bcc.n	800245a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002462:	f7ff ffd7 	bl	8002414 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002466:	f008 ff73 	bl	800b350 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800246a:	f7fe ff9f 	bl	80013ac <main>
  bx  lr    
 800246e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002470:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002478:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 800247c:	080101d4 	.word	0x080101d4
  ldr r2, =_sbss
 8002480:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8002484:	20000bcc 	.word	0x20000bcc

08002488 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002488:	e7fe      	b.n	8002488 <ADC_IRQHandler>
	...

0800248c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002490:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <HAL_Init+0x40>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a0d      	ldr	r2, [pc, #52]	; (80024cc <HAL_Init+0x40>)
 8002496:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800249a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800249c:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <HAL_Init+0x40>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a0a      	ldr	r2, [pc, #40]	; (80024cc <HAL_Init+0x40>)
 80024a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024a8:	4b08      	ldr	r3, [pc, #32]	; (80024cc <HAL_Init+0x40>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a07      	ldr	r2, [pc, #28]	; (80024cc <HAL_Init+0x40>)
 80024ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024b4:	2003      	movs	r0, #3
 80024b6:	f001 fbb1 	bl	8003c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ba:	2000      	movs	r0, #0
 80024bc:	f000 f808 	bl	80024d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024c0:	f7ff fc46 	bl	8001d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40023c00 	.word	0x40023c00

080024d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024d8:	4b12      	ldr	r3, [pc, #72]	; (8002524 <HAL_InitTick+0x54>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	4b12      	ldr	r3, [pc, #72]	; (8002528 <HAL_InitTick+0x58>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	4619      	mov	r1, r3
 80024e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ee:	4618      	mov	r0, r3
 80024f0:	f001 fbc9 	bl	8003c86 <HAL_SYSTICK_Config>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e00e      	b.n	800251c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b0f      	cmp	r3, #15
 8002502:	d80a      	bhi.n	800251a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002504:	2200      	movs	r2, #0
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	f04f 30ff 	mov.w	r0, #4294967295
 800250c:	f001 fb91 	bl	8003c32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002510:	4a06      	ldr	r2, [pc, #24]	; (800252c <HAL_InitTick+0x5c>)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	e000      	b.n	800251c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
}
 800251c:	4618      	mov	r0, r3
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	20000000 	.word	0x20000000
 8002528:	20000008 	.word	0x20000008
 800252c:	20000004 	.word	0x20000004

08002530 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002534:	4b06      	ldr	r3, [pc, #24]	; (8002550 <HAL_IncTick+0x20>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	461a      	mov	r2, r3
 800253a:	4b06      	ldr	r3, [pc, #24]	; (8002554 <HAL_IncTick+0x24>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4413      	add	r3, r2
 8002540:	4a04      	ldr	r2, [pc, #16]	; (8002554 <HAL_IncTick+0x24>)
 8002542:	6013      	str	r3, [r2, #0]
}
 8002544:	bf00      	nop
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	20000008 	.word	0x20000008
 8002554:	200004d8 	.word	0x200004d8

08002558 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  return uwTick;
 800255c:	4b03      	ldr	r3, [pc, #12]	; (800256c <HAL_GetTick+0x14>)
 800255e:	681b      	ldr	r3, [r3, #0]
}
 8002560:	4618      	mov	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	200004d8 	.word	0x200004d8

08002570 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002578:	f7ff ffee 	bl	8002558 <HAL_GetTick>
 800257c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002588:	d005      	beq.n	8002596 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800258a:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <HAL_Delay+0x44>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	461a      	mov	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4413      	add	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002596:	bf00      	nop
 8002598:	f7ff ffde 	bl	8002558 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d8f7      	bhi.n	8002598 <HAL_Delay+0x28>
  {
  }
}
 80025a8:	bf00      	nop
 80025aa:	bf00      	nop
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20000008 	.word	0x20000008

080025b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025c0:	2300      	movs	r3, #0
 80025c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e033      	b.n	8002636 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d109      	bne.n	80025ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7ff fbe2 	bl	8001da0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f003 0310 	and.w	r3, r3, #16
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d118      	bne.n	8002628 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025fe:	f023 0302 	bic.w	r3, r3, #2
 8002602:	f043 0202 	orr.w	r2, r3, #2
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 fad8 	bl	8002bc0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	f023 0303 	bic.w	r3, r3, #3
 800261e:	f043 0201 	orr.w	r2, r3, #1
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	641a      	str	r2, [r3, #64]	; 0x40
 8002626:	e001      	b.n	800262c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002634:	7bfb      	ldrb	r3, [r7, #15]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002648:	2300      	movs	r3, #0
 800264a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002652:	2b01      	cmp	r3, #1
 8002654:	d101      	bne.n	800265a <HAL_ADC_Start+0x1a>
 8002656:	2302      	movs	r3, #2
 8002658:	e0b2      	b.n	80027c0 <HAL_ADC_Start+0x180>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b01      	cmp	r3, #1
 800266e:	d018      	beq.n	80026a2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0201 	orr.w	r2, r2, #1
 800267e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002680:	4b52      	ldr	r3, [pc, #328]	; (80027cc <HAL_ADC_Start+0x18c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a52      	ldr	r2, [pc, #328]	; (80027d0 <HAL_ADC_Start+0x190>)
 8002686:	fba2 2303 	umull	r2, r3, r2, r3
 800268a:	0c9a      	lsrs	r2, r3, #18
 800268c:	4613      	mov	r3, r2
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	4413      	add	r3, r2
 8002692:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002694:	e002      	b.n	800269c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	3b01      	subs	r3, #1
 800269a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f9      	bne.n	8002696 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d17a      	bne.n	80027a6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80026b8:	f023 0301 	bic.w	r3, r3, #1
 80026bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d007      	beq.n	80026e2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ee:	d106      	bne.n	80026fe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f4:	f023 0206 	bic.w	r2, r3, #6
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	645a      	str	r2, [r3, #68]	; 0x44
 80026fc:	e002      	b.n	8002704 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800270c:	4b31      	ldr	r3, [pc, #196]	; (80027d4 <HAL_ADC_Start+0x194>)
 800270e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002718:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f003 031f 	and.w	r3, r3, #31
 8002722:	2b00      	cmp	r3, #0
 8002724:	d12a      	bne.n	800277c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a2b      	ldr	r2, [pc, #172]	; (80027d8 <HAL_ADC_Start+0x198>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d015      	beq.n	800275c <HAL_ADC_Start+0x11c>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a29      	ldr	r2, [pc, #164]	; (80027dc <HAL_ADC_Start+0x19c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d105      	bne.n	8002746 <HAL_ADC_Start+0x106>
 800273a:	4b26      	ldr	r3, [pc, #152]	; (80027d4 <HAL_ADC_Start+0x194>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 031f 	and.w	r3, r3, #31
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00a      	beq.n	800275c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a25      	ldr	r2, [pc, #148]	; (80027e0 <HAL_ADC_Start+0x1a0>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d136      	bne.n	80027be <HAL_ADC_Start+0x17e>
 8002750:	4b20      	ldr	r3, [pc, #128]	; (80027d4 <HAL_ADC_Start+0x194>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 0310 	and.w	r3, r3, #16
 8002758:	2b00      	cmp	r3, #0
 800275a:	d130      	bne.n	80027be <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d129      	bne.n	80027be <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002778:	609a      	str	r2, [r3, #8]
 800277a:	e020      	b.n	80027be <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a15      	ldr	r2, [pc, #84]	; (80027d8 <HAL_ADC_Start+0x198>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d11b      	bne.n	80027be <HAL_ADC_Start+0x17e>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d114      	bne.n	80027be <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	e00b      	b.n	80027be <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f043 0210 	orr.w	r2, r3, #16
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	f043 0201 	orr.w	r2, r3, #1
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	20000000 	.word	0x20000000
 80027d0:	431bde83 	.word	0x431bde83
 80027d4:	40012300 	.word	0x40012300
 80027d8:	40012000 	.word	0x40012000
 80027dc:	40012100 	.word	0x40012100
 80027e0:	40012200 	.word	0x40012200

080027e4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d101      	bne.n	80027fa <HAL_ADC_Stop+0x16>
 80027f6:	2302      	movs	r3, #2
 80027f8:	e021      	b.n	800283e <HAL_ADC_Stop+0x5a>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 0201 	bic.w	r2, r2, #1
 8002810:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b00      	cmp	r3, #0
 800281e:	d109      	bne.n	8002834 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002824:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002828:	f023 0301 	bic.w	r3, r3, #1
 800282c:	f043 0201 	orr.w	r2, r3, #1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b084      	sub	sp, #16
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
 8002852:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002854:	2300      	movs	r3, #0
 8002856:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002866:	d113      	bne.n	8002890 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002876:	d10b      	bne.n	8002890 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287c:	f043 0220 	orr.w	r2, r3, #32
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e063      	b.n	8002958 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002890:	f7ff fe62 	bl	8002558 <HAL_GetTick>
 8002894:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002896:	e021      	b.n	80028dc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800289e:	d01d      	beq.n	80028dc <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d007      	beq.n	80028b6 <HAL_ADC_PollForConversion+0x6c>
 80028a6:	f7ff fe57 	bl	8002558 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d212      	bcs.n	80028dc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d00b      	beq.n	80028dc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c8:	f043 0204 	orr.w	r2, r3, #4
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e03d      	b.n	8002958 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d1d6      	bne.n	8002898 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f06f 0212 	mvn.w	r2, #18
 80028f2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d123      	bne.n	8002956 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002912:	2b00      	cmp	r3, #0
 8002914:	d11f      	bne.n	8002956 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002920:	2b00      	cmp	r3, #0
 8002922:	d006      	beq.n	8002932 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800292e:	2b00      	cmp	r3, #0
 8002930:	d111      	bne.n	8002956 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d105      	bne.n	8002956 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f043 0201 	orr.w	r2, r3, #1
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800296e:	4618      	mov	r0, r3
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
	...

0800297c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x1c>
 8002994:	2302      	movs	r3, #2
 8002996:	e105      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x228>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b09      	cmp	r3, #9
 80029a6:	d925      	bls.n	80029f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68d9      	ldr	r1, [r3, #12]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	461a      	mov	r2, r3
 80029b6:	4613      	mov	r3, r2
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	4413      	add	r3, r2
 80029bc:	3b1e      	subs	r3, #30
 80029be:	2207      	movs	r2, #7
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43da      	mvns	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	400a      	ands	r2, r1
 80029cc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68d9      	ldr	r1, [r3, #12]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	b29b      	uxth	r3, r3
 80029de:	4618      	mov	r0, r3
 80029e0:	4603      	mov	r3, r0
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	4403      	add	r3, r0
 80029e6:	3b1e      	subs	r3, #30
 80029e8:	409a      	lsls	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	60da      	str	r2, [r3, #12]
 80029f2:	e022      	b.n	8002a3a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6919      	ldr	r1, [r3, #16]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	461a      	mov	r2, r3
 8002a02:	4613      	mov	r3, r2
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	4413      	add	r3, r2
 8002a08:	2207      	movs	r2, #7
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43da      	mvns	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	400a      	ands	r2, r1
 8002a16:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6919      	ldr	r1, [r3, #16]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	4618      	mov	r0, r3
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	4403      	add	r3, r0
 8002a30:	409a      	lsls	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b06      	cmp	r3, #6
 8002a40:	d824      	bhi.n	8002a8c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	3b05      	subs	r3, #5
 8002a54:	221f      	movs	r2, #31
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43da      	mvns	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	400a      	ands	r2, r1
 8002a62:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	4618      	mov	r0, r3
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685a      	ldr	r2, [r3, #4]
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3b05      	subs	r3, #5
 8002a7e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	635a      	str	r2, [r3, #52]	; 0x34
 8002a8a:	e04c      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2b0c      	cmp	r3, #12
 8002a92:	d824      	bhi.n	8002ade <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3b23      	subs	r3, #35	; 0x23
 8002aa6:	221f      	movs	r2, #31
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43da      	mvns	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	400a      	ands	r2, r1
 8002ab4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	3b23      	subs	r3, #35	; 0x23
 8002ad0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	631a      	str	r2, [r3, #48]	; 0x30
 8002adc:	e023      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	3b41      	subs	r3, #65	; 0x41
 8002af0:	221f      	movs	r2, #31
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	43da      	mvns	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	400a      	ands	r2, r1
 8002afe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	3b41      	subs	r3, #65	; 0x41
 8002b1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b26:	4b22      	ldr	r3, [pc, #136]	; (8002bb0 <HAL_ADC_ConfigChannel+0x234>)
 8002b28:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a21      	ldr	r2, [pc, #132]	; (8002bb4 <HAL_ADC_ConfigChannel+0x238>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d109      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x1cc>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b12      	cmp	r3, #18
 8002b3a:	d105      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a19      	ldr	r2, [pc, #100]	; (8002bb4 <HAL_ADC_ConfigChannel+0x238>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d123      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x21e>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2b10      	cmp	r3, #16
 8002b58:	d003      	beq.n	8002b62 <HAL_ADC_ConfigChannel+0x1e6>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b11      	cmp	r3, #17
 8002b60:	d11b      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2b10      	cmp	r3, #16
 8002b74:	d111      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b76:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <HAL_ADC_ConfigChannel+0x23c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a10      	ldr	r2, [pc, #64]	; (8002bbc <HAL_ADC_ConfigChannel+0x240>)
 8002b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b80:	0c9a      	lsrs	r2, r3, #18
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b8c:	e002      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	3b01      	subs	r3, #1
 8002b92:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f9      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	40012300 	.word	0x40012300
 8002bb4:	40012000 	.word	0x40012000
 8002bb8:	20000000 	.word	0x20000000
 8002bbc:	431bde83 	.word	0x431bde83

08002bc0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bc8:	4b79      	ldr	r3, [pc, #484]	; (8002db0 <ADC_Init+0x1f0>)
 8002bca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	431a      	orrs	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bf4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6859      	ldr	r1, [r3, #4]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	021a      	lsls	r2, r3, #8
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6859      	ldr	r1, [r3, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6899      	ldr	r1, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c52:	4a58      	ldr	r2, [pc, #352]	; (8002db4 <ADC_Init+0x1f4>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d022      	beq.n	8002c9e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c66:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6899      	ldr	r1, [r3, #8]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6899      	ldr	r1, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	e00f      	b.n	8002cbe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cbc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0202 	bic.w	r2, r2, #2
 8002ccc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6899      	ldr	r1, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	7e1b      	ldrb	r3, [r3, #24]
 8002cd8:	005a      	lsls	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d01b      	beq.n	8002d24 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cfa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d0a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6859      	ldr	r1, [r3, #4]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	3b01      	subs	r3, #1
 8002d18:	035a      	lsls	r2, r3, #13
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	605a      	str	r2, [r3, #4]
 8002d22:	e007      	b.n	8002d34 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d32:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	051a      	lsls	r2, r3, #20
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6899      	ldr	r1, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d76:	025a      	lsls	r2, r3, #9
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689a      	ldr	r2, [r3, #8]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6899      	ldr	r1, [r3, #8]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	029a      	lsls	r2, r3, #10
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	609a      	str	r2, [r3, #8]
}
 8002da4:	bf00      	nop
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	40012300 	.word	0x40012300
 8002db4:	0f000001 	.word	0x0f000001

08002db8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e0ed      	b.n	8002fa6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d102      	bne.n	8002ddc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7ff f826 	bl	8001e28 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0201 	orr.w	r2, r2, #1
 8002dea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002dec:	f7ff fbb4 	bl	8002558 <HAL_GetTick>
 8002df0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002df2:	e012      	b.n	8002e1a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002df4:	f7ff fbb0 	bl	8002558 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b0a      	cmp	r3, #10
 8002e00:	d90b      	bls.n	8002e1a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2205      	movs	r2, #5
 8002e12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e0c5      	b.n	8002fa6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0e5      	beq.n	8002df4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0202 	bic.w	r2, r2, #2
 8002e36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e38:	f7ff fb8e 	bl	8002558 <HAL_GetTick>
 8002e3c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e3e:	e012      	b.n	8002e66 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e40:	f7ff fb8a 	bl	8002558 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b0a      	cmp	r3, #10
 8002e4c:	d90b      	bls.n	8002e66 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2205      	movs	r2, #5
 8002e5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e09f      	b.n	8002fa6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1e5      	bne.n	8002e40 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	7e1b      	ldrb	r3, [r3, #24]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d108      	bne.n	8002e8e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	e007      	b.n	8002e9e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	7e5b      	ldrb	r3, [r3, #25]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d108      	bne.n	8002eb8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	e007      	b.n	8002ec8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ec6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	7e9b      	ldrb	r3, [r3, #26]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d108      	bne.n	8002ee2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f042 0220 	orr.w	r2, r2, #32
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	e007      	b.n	8002ef2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0220 	bic.w	r2, r2, #32
 8002ef0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	7edb      	ldrb	r3, [r3, #27]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d108      	bne.n	8002f0c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0210 	bic.w	r2, r2, #16
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	e007      	b.n	8002f1c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 0210 	orr.w	r2, r2, #16
 8002f1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	7f1b      	ldrb	r3, [r3, #28]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d108      	bne.n	8002f36 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0208 	orr.w	r2, r2, #8
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	e007      	b.n	8002f46 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0208 	bic.w	r2, r2, #8
 8002f44:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	7f5b      	ldrb	r3, [r3, #29]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d108      	bne.n	8002f60 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f042 0204 	orr.w	r2, r2, #4
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	e007      	b.n	8002f70 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0204 	bic.w	r2, r2, #4
 8002f6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	ea42 0103 	orr.w	r1, r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	1e5a      	subs	r2, r3, #1
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b087      	sub	sp, #28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fc6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002fc8:	7cfb      	ldrb	r3, [r7, #19]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d003      	beq.n	8002fd6 <HAL_CAN_ConfigFilter+0x26>
 8002fce:	7cfb      	ldrb	r3, [r7, #19]
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	f040 80be 	bne.w	8003152 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002fd6:	4b65      	ldr	r3, [pc, #404]	; (800316c <HAL_CAN_ConfigFilter+0x1bc>)
 8002fd8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002fe0:	f043 0201 	orr.w	r2, r3, #1
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ff0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	021b      	lsls	r3, r3, #8
 8003006:	431a      	orrs	r2, r3
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	f003 031f 	and.w	r3, r3, #31
 8003016:	2201      	movs	r2, #1
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	43db      	mvns	r3, r3
 8003028:	401a      	ands	r2, r3
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d123      	bne.n	8003080 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	43db      	mvns	r3, r3
 8003042:	401a      	ands	r2, r3
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800305a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	3248      	adds	r2, #72	; 0x48
 8003060:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003074:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003076:	6979      	ldr	r1, [r7, #20]
 8003078:	3348      	adds	r3, #72	; 0x48
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	440b      	add	r3, r1
 800307e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	69db      	ldr	r3, [r3, #28]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d122      	bne.n	80030ce <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	431a      	orrs	r2, r3
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80030a8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	3248      	adds	r2, #72	; 0x48
 80030ae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030c2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030c4:	6979      	ldr	r1, [r7, #20]
 80030c6:	3348      	adds	r3, #72	; 0x48
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	440b      	add	r3, r1
 80030cc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d109      	bne.n	80030ea <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	43db      	mvns	r3, r3
 80030e0:	401a      	ands	r2, r3
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80030e8:	e007      	b.n	80030fa <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	431a      	orrs	r2, r3
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d109      	bne.n	8003116 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	43db      	mvns	r3, r3
 800310c:	401a      	ands	r2, r3
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003114:	e007      	b.n	8003126 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	431a      	orrs	r2, r3
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d107      	bne.n	800313e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	431a      	orrs	r2, r3
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003144:	f023 0201 	bic.w	r2, r3, #1
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800314e:	2300      	movs	r3, #0
 8003150:	e006      	b.n	8003160 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
  }
}
 8003160:	4618      	mov	r0, r3
 8003162:	371c      	adds	r7, #28
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	40006400 	.word	0x40006400

08003170 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b01      	cmp	r3, #1
 8003182:	d12e      	bne.n	80031e2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2202      	movs	r2, #2
 8003188:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0201 	bic.w	r2, r2, #1
 800319a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800319c:	f7ff f9dc 	bl	8002558 <HAL_GetTick>
 80031a0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80031a2:	e012      	b.n	80031ca <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031a4:	f7ff f9d8 	bl	8002558 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b0a      	cmp	r3, #10
 80031b0:	d90b      	bls.n	80031ca <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2205      	movs	r2, #5
 80031c2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e012      	b.n	80031f0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1e5      	bne.n	80031a4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80031de:	2300      	movs	r3, #0
 80031e0:	e006      	b.n	80031f0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
  }
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b089      	sub	sp, #36	; 0x24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f893 3020 	ldrb.w	r3, [r3, #32]
 800320c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003216:	7ffb      	ldrb	r3, [r7, #31]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d003      	beq.n	8003224 <HAL_CAN_AddTxMessage+0x2c>
 800321c:	7ffb      	ldrb	r3, [r7, #31]
 800321e:	2b02      	cmp	r3, #2
 8003220:	f040 80b8 	bne.w	8003394 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10a      	bne.n	8003244 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003234:	2b00      	cmp	r3, #0
 8003236:	d105      	bne.n	8003244 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 80a0 	beq.w	8003384 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	0e1b      	lsrs	r3, r3, #24
 8003248:	f003 0303 	and.w	r3, r3, #3
 800324c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2b02      	cmp	r3, #2
 8003252:	d907      	bls.n	8003264 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e09e      	b.n	80033a2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003264:	2201      	movs	r2, #1
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	409a      	lsls	r2, r3
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10d      	bne.n	8003292 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003280:	68f9      	ldr	r1, [r7, #12]
 8003282:	6809      	ldr	r1, [r1, #0]
 8003284:	431a      	orrs	r2, r3
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	3318      	adds	r3, #24
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	440b      	add	r3, r1
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	e00f      	b.n	80032b2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800329c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032a2:	68f9      	ldr	r1, [r7, #12]
 80032a4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80032a6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	3318      	adds	r3, #24
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	440b      	add	r3, r1
 80032b0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6819      	ldr	r1, [r3, #0]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	691a      	ldr	r2, [r3, #16]
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	3318      	adds	r3, #24
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	440b      	add	r3, r1
 80032c2:	3304      	adds	r3, #4
 80032c4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	7d1b      	ldrb	r3, [r3, #20]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d111      	bne.n	80032f2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	3318      	adds	r3, #24
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	4413      	add	r3, r2
 80032da:	3304      	adds	r3, #4
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	6811      	ldr	r1, [r2, #0]
 80032e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	3318      	adds	r3, #24
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	440b      	add	r3, r1
 80032ee:	3304      	adds	r3, #4
 80032f0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	3307      	adds	r3, #7
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	061a      	lsls	r2, r3, #24
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3306      	adds	r3, #6
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	041b      	lsls	r3, r3, #16
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3305      	adds	r3, #5
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	021b      	lsls	r3, r3, #8
 800330c:	4313      	orrs	r3, r2
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	3204      	adds	r2, #4
 8003312:	7812      	ldrb	r2, [r2, #0]
 8003314:	4610      	mov	r0, r2
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	6811      	ldr	r1, [r2, #0]
 800331a:	ea43 0200 	orr.w	r2, r3, r0
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	440b      	add	r3, r1
 8003324:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003328:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3303      	adds	r3, #3
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	061a      	lsls	r2, r3, #24
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	3302      	adds	r3, #2
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	041b      	lsls	r3, r3, #16
 800333a:	431a      	orrs	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3301      	adds	r3, #1
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	021b      	lsls	r3, r3, #8
 8003344:	4313      	orrs	r3, r2
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	7812      	ldrb	r2, [r2, #0]
 800334a:	4610      	mov	r0, r2
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	6811      	ldr	r1, [r2, #0]
 8003350:	ea43 0200 	orr.w	r2, r3, r0
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	011b      	lsls	r3, r3, #4
 8003358:	440b      	add	r3, r1
 800335a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800335e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	3318      	adds	r3, #24
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	4413      	add	r3, r2
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	6811      	ldr	r1, [r2, #0]
 8003372:	f043 0201 	orr.w	r2, r3, #1
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	3318      	adds	r3, #24
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	440b      	add	r3, r1
 800337e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003380:	2300      	movs	r3, #0
 8003382:	e00e      	b.n	80033a2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e006      	b.n	80033a2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
  }
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3724      	adds	r7, #36	; 0x24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80033ae:	b480      	push	{r7}
 80033b0:	b087      	sub	sp, #28
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	60f8      	str	r0, [r7, #12]
 80033b6:	60b9      	str	r1, [r7, #8]
 80033b8:	607a      	str	r2, [r7, #4]
 80033ba:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033c2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80033c4:	7dfb      	ldrb	r3, [r7, #23]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d003      	beq.n	80033d2 <HAL_CAN_GetRxMessage+0x24>
 80033ca:	7dfb      	ldrb	r3, [r7, #23]
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	f040 80f3 	bne.w	80035b8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10e      	bne.n	80033f6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d116      	bne.n	8003414 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e0e7      	b.n	80035c6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	f003 0303 	and.w	r3, r3, #3
 8003400:	2b00      	cmp	r3, #0
 8003402:	d107      	bne.n	8003414 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e0d8      	b.n	80035c6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	331b      	adds	r3, #27
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	4413      	add	r3, r2
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0204 	and.w	r2, r3, #4
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10c      	bne.n	800344c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	331b      	adds	r3, #27
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	4413      	add	r3, r2
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	0d5b      	lsrs	r3, r3, #21
 8003442:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	e00b      	b.n	8003464 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	331b      	adds	r3, #27
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	4413      	add	r3, r2
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	08db      	lsrs	r3, r3, #3
 800345c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	331b      	adds	r3, #27
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	4413      	add	r3, r2
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0202 	and.w	r2, r3, #2
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	331b      	adds	r3, #27
 8003482:	011b      	lsls	r3, r3, #4
 8003484:	4413      	add	r3, r2
 8003486:	3304      	adds	r3, #4
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 020f 	and.w	r2, r3, #15
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	331b      	adds	r3, #27
 800349a:	011b      	lsls	r3, r3, #4
 800349c:	4413      	add	r3, r2
 800349e:	3304      	adds	r3, #4
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	0a1b      	lsrs	r3, r3, #8
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	331b      	adds	r3, #27
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	4413      	add	r3, r2
 80034b6:	3304      	adds	r3, #4
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	0c1b      	lsrs	r3, r3, #16
 80034bc:	b29a      	uxth	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	4413      	add	r3, r2
 80034cc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	4413      	add	r3, r2
 80034e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	0a1a      	lsrs	r2, r3, #8
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	3301      	adds	r3, #1
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	0c1a      	lsrs	r2, r3, #16
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	3302      	adds	r3, #2
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	4413      	add	r3, r2
 8003516:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	0e1a      	lsrs	r2, r3, #24
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	3303      	adds	r3, #3
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	4413      	add	r3, r2
 8003530:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	3304      	adds	r3, #4
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	011b      	lsls	r3, r3, #4
 8003546:	4413      	add	r3, r2
 8003548:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	0a1a      	lsrs	r2, r3, #8
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	3305      	adds	r3, #5
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	4413      	add	r3, r2
 8003562:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	0c1a      	lsrs	r2, r3, #16
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	3306      	adds	r3, #6
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	4413      	add	r3, r2
 800357c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	0e1a      	lsrs	r2, r3, #24
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	3307      	adds	r3, #7
 8003588:	b2d2      	uxtb	r2, r2
 800358a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d108      	bne.n	80035a4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68da      	ldr	r2, [r3, #12]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f042 0220 	orr.w	r2, r2, #32
 80035a0:	60da      	str	r2, [r3, #12]
 80035a2:	e007      	b.n	80035b4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	691a      	ldr	r2, [r3, #16]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0220 	orr.w	r2, r2, #32
 80035b2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80035b4:	2300      	movs	r3, #0
 80035b6:	e006      	b.n	80035c6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
  }
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	371c      	adds	r7, #28
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b085      	sub	sp, #20
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
 80035da:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035e2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d002      	beq.n	80035f0 <HAL_CAN_ActivateNotification+0x1e>
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d109      	bne.n	8003604 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6959      	ldr	r1, [r3, #20]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003600:	2300      	movs	r3, #0
 8003602:	e006      	b.n	8003612 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
  }
}
 8003612:	4618      	mov	r0, r3
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b08a      	sub	sp, #40	; 0x28
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003626:	2300      	movs	r3, #0
 8003628:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	d07c      	beq.n	800375e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	d023      	beq.n	80036b6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2201      	movs	r2, #1
 8003674:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f983 	bl	800398c <HAL_CAN_TxMailbox0CompleteCallback>
 8003686:	e016      	b.n	80036b6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	f003 0304 	and.w	r3, r3, #4
 800368e:	2b00      	cmp	r3, #0
 8003690:	d004      	beq.n	800369c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003698:	627b      	str	r3, [r7, #36]	; 0x24
 800369a:	e00c      	b.n	80036b6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	f003 0308 	and.w	r3, r3, #8
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d004      	beq.n	80036b0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
 80036ae:	e002      	b.n	80036b6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 f989 	bl	80039c8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d024      	beq.n	800370a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036c8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f963 	bl	80039a0 <HAL_CAN_TxMailbox1CompleteCallback>
 80036da:	e016      	b.n	800370a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d004      	beq.n	80036f0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
 80036ee:	e00c      	b.n	800370a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d004      	beq.n	8003704 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003700:	627b      	str	r3, [r7, #36]	; 0x24
 8003702:	e002      	b.n	800370a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f969 	bl	80039dc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d024      	beq.n	800375e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800371c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d003      	beq.n	8003730 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f943 	bl	80039b4 <HAL_CAN_TxMailbox2CompleteCallback>
 800372e:	e016      	b.n	800375e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d004      	beq.n	8003744 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003740:	627b      	str	r3, [r7, #36]	; 0x24
 8003742:	e00c      	b.n	800375e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d004      	beq.n	8003758 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003754:	627b      	str	r3, [r7, #36]	; 0x24
 8003756:	e002      	b.n	800375e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f949 	bl	80039f0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	f003 0308 	and.w	r3, r3, #8
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00c      	beq.n	8003782 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f003 0310 	and.w	r3, r3, #16
 800376e:	2b00      	cmp	r3, #0
 8003770:	d007      	beq.n	8003782 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003778:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2210      	movs	r2, #16
 8003780:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00b      	beq.n	80037a4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b00      	cmp	r3, #0
 8003794:	d006      	beq.n	80037a4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2208      	movs	r2, #8
 800379c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f930 	bl	8003a04 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d009      	beq.n	80037c2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f003 0303 	and.w	r3, r3, #3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d002      	beq.n	80037c2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7fd fdd3 	bl	8001368 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00c      	beq.n	80037e6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	f003 0310 	and.w	r3, r3, #16
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d007      	beq.n	80037e6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2210      	movs	r2, #16
 80037e4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	f003 0320 	and.w	r3, r3, #32
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00b      	beq.n	8003808 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f003 0308 	and.w	r3, r3, #8
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d006      	beq.n	8003808 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2208      	movs	r2, #8
 8003800:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f912 	bl	8003a2c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	f003 0310 	and.w	r3, r3, #16
 800380e:	2b00      	cmp	r3, #0
 8003810:	d009      	beq.n	8003826 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	f003 0303 	and.w	r3, r3, #3
 800381c:	2b00      	cmp	r3, #0
 800381e:	d002      	beq.n	8003826 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f8f9 	bl	8003a18 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003826:	6a3b      	ldr	r3, [r7, #32]
 8003828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00b      	beq.n	8003848 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	f003 0310 	and.w	r3, r3, #16
 8003836:	2b00      	cmp	r3, #0
 8003838:	d006      	beq.n	8003848 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2210      	movs	r2, #16
 8003840:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f8fc 	bl	8003a40 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00b      	beq.n	800386a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	f003 0308 	and.w	r3, r3, #8
 8003858:	2b00      	cmp	r3, #0
 800385a:	d006      	beq.n	800386a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2208      	movs	r2, #8
 8003862:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f8f5 	bl	8003a54 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d07b      	beq.n	800396c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f003 0304 	and.w	r3, r3, #4
 800387a:	2b00      	cmp	r3, #0
 800387c:	d072      	beq.n	8003964 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800387e:	6a3b      	ldr	r3, [r7, #32]
 8003880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003884:	2b00      	cmp	r3, #0
 8003886:	d008      	beq.n	800389a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	f043 0301 	orr.w	r3, r3, #1
 8003898:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d008      	beq.n	80038b6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	f043 0302 	orr.w	r3, r3, #2
 80038b4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d008      	beq.n	80038d2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	f043 0304 	orr.w	r3, r3, #4
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d043      	beq.n	8003964 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d03e      	beq.n	8003964 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038ec:	2b60      	cmp	r3, #96	; 0x60
 80038ee:	d02b      	beq.n	8003948 <HAL_CAN_IRQHandler+0x32a>
 80038f0:	2b60      	cmp	r3, #96	; 0x60
 80038f2:	d82e      	bhi.n	8003952 <HAL_CAN_IRQHandler+0x334>
 80038f4:	2b50      	cmp	r3, #80	; 0x50
 80038f6:	d022      	beq.n	800393e <HAL_CAN_IRQHandler+0x320>
 80038f8:	2b50      	cmp	r3, #80	; 0x50
 80038fa:	d82a      	bhi.n	8003952 <HAL_CAN_IRQHandler+0x334>
 80038fc:	2b40      	cmp	r3, #64	; 0x40
 80038fe:	d019      	beq.n	8003934 <HAL_CAN_IRQHandler+0x316>
 8003900:	2b40      	cmp	r3, #64	; 0x40
 8003902:	d826      	bhi.n	8003952 <HAL_CAN_IRQHandler+0x334>
 8003904:	2b30      	cmp	r3, #48	; 0x30
 8003906:	d010      	beq.n	800392a <HAL_CAN_IRQHandler+0x30c>
 8003908:	2b30      	cmp	r3, #48	; 0x30
 800390a:	d822      	bhi.n	8003952 <HAL_CAN_IRQHandler+0x334>
 800390c:	2b10      	cmp	r3, #16
 800390e:	d002      	beq.n	8003916 <HAL_CAN_IRQHandler+0x2f8>
 8003910:	2b20      	cmp	r3, #32
 8003912:	d005      	beq.n	8003920 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003914:	e01d      	b.n	8003952 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	f043 0308 	orr.w	r3, r3, #8
 800391c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800391e:	e019      	b.n	8003954 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	f043 0310 	orr.w	r3, r3, #16
 8003926:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003928:	e014      	b.n	8003954 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	f043 0320 	orr.w	r3, r3, #32
 8003930:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003932:	e00f      	b.n	8003954 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800393a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800393c:	e00a      	b.n	8003954 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003944:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003946:	e005      	b.n	8003954 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800394e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003950:	e000      	b.n	8003954 <HAL_CAN_IRQHandler+0x336>
            break;
 8003952:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	699a      	ldr	r2, [r3, #24]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003962:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2204      	movs	r2, #4
 800396a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	2b00      	cmp	r3, #0
 8003970:	d008      	beq.n	8003984 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	431a      	orrs	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f872 	bl	8003a68 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003984:	bf00      	nop
 8003986:	3728      	adds	r7, #40	; 0x28
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f003 0307 	and.w	r3, r3, #7
 8003a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a98:	4013      	ands	r3, r2
 8003a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003aa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003aae:	4a04      	ldr	r2, [pc, #16]	; (8003ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	60d3      	str	r3, [r2, #12]
}
 8003ab4:	bf00      	nop
 8003ab6:	3714      	adds	r7, #20
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	e000ed00 	.word	0xe000ed00

08003ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ac8:	4b04      	ldr	r3, [pc, #16]	; (8003adc <__NVIC_GetPriorityGrouping+0x18>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	0a1b      	lsrs	r3, r3, #8
 8003ace:	f003 0307 	and.w	r3, r3, #7
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	e000ed00 	.word	0xe000ed00

08003ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	db0b      	blt.n	8003b0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003af2:	79fb      	ldrb	r3, [r7, #7]
 8003af4:	f003 021f 	and.w	r2, r3, #31
 8003af8:	4907      	ldr	r1, [pc, #28]	; (8003b18 <__NVIC_EnableIRQ+0x38>)
 8003afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003afe:	095b      	lsrs	r3, r3, #5
 8003b00:	2001      	movs	r0, #1
 8003b02:	fa00 f202 	lsl.w	r2, r0, r2
 8003b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	e000e100 	.word	0xe000e100

08003b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	6039      	str	r1, [r7, #0]
 8003b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	db0a      	blt.n	8003b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	490c      	ldr	r1, [pc, #48]	; (8003b68 <__NVIC_SetPriority+0x4c>)
 8003b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3a:	0112      	lsls	r2, r2, #4
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	440b      	add	r3, r1
 8003b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b44:	e00a      	b.n	8003b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	4908      	ldr	r1, [pc, #32]	; (8003b6c <__NVIC_SetPriority+0x50>)
 8003b4c:	79fb      	ldrb	r3, [r7, #7]
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	3b04      	subs	r3, #4
 8003b54:	0112      	lsls	r2, r2, #4
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	440b      	add	r3, r1
 8003b5a:	761a      	strb	r2, [r3, #24]
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	e000e100 	.word	0xe000e100
 8003b6c:	e000ed00 	.word	0xe000ed00

08003b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b089      	sub	sp, #36	; 0x24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	f1c3 0307 	rsb	r3, r3, #7
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	bf28      	it	cs
 8003b8e:	2304      	movcs	r3, #4
 8003b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	3304      	adds	r3, #4
 8003b96:	2b06      	cmp	r3, #6
 8003b98:	d902      	bls.n	8003ba0 <NVIC_EncodePriority+0x30>
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	3b03      	subs	r3, #3
 8003b9e:	e000      	b.n	8003ba2 <NVIC_EncodePriority+0x32>
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	43da      	mvns	r2, r3
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	401a      	ands	r2, r3
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc2:	43d9      	mvns	r1, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bc8:	4313      	orrs	r3, r2
         );
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3724      	adds	r7, #36	; 0x24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
	...

08003bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3b01      	subs	r3, #1
 8003be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003be8:	d301      	bcc.n	8003bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bea:	2301      	movs	r3, #1
 8003bec:	e00f      	b.n	8003c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bee:	4a0a      	ldr	r2, [pc, #40]	; (8003c18 <SysTick_Config+0x40>)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bf6:	210f      	movs	r1, #15
 8003bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bfc:	f7ff ff8e 	bl	8003b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c00:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <SysTick_Config+0x40>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c06:	4b04      	ldr	r3, [pc, #16]	; (8003c18 <SysTick_Config+0x40>)
 8003c08:	2207      	movs	r2, #7
 8003c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	e000e010 	.word	0xe000e010

08003c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7ff ff29 	bl	8003a7c <__NVIC_SetPriorityGrouping>
}
 8003c2a:	bf00      	nop
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b086      	sub	sp, #24
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	4603      	mov	r3, r0
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	607a      	str	r2, [r7, #4]
 8003c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c44:	f7ff ff3e 	bl	8003ac4 <__NVIC_GetPriorityGrouping>
 8003c48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	68b9      	ldr	r1, [r7, #8]
 8003c4e:	6978      	ldr	r0, [r7, #20]
 8003c50:	f7ff ff8e 	bl	8003b70 <NVIC_EncodePriority>
 8003c54:	4602      	mov	r2, r0
 8003c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c5a:	4611      	mov	r1, r2
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff ff5d 	bl	8003b1c <__NVIC_SetPriority>
}
 8003c62:	bf00      	nop
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b082      	sub	sp, #8
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	4603      	mov	r3, r0
 8003c72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff ff31 	bl	8003ae0 <__NVIC_EnableIRQ>
}
 8003c7e:	bf00      	nop
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b082      	sub	sp, #8
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7ff ffa2 	bl	8003bd8 <SysTick_Config>
 8003c94:	4603      	mov	r3, r0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
	...

08003ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b089      	sub	sp, #36	; 0x24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	61fb      	str	r3, [r7, #28]
 8003cba:	e16b      	b.n	8003f94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	f040 815a 	bne.w	8003f8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d005      	beq.n	8003cf2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d130      	bne.n	8003d54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	2203      	movs	r2, #3
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	43db      	mvns	r3, r3
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	4013      	ands	r3, r2
 8003d08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	68da      	ldr	r2, [r3, #12]
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	fa02 f303 	lsl.w	r3, r2, r3
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d28:	2201      	movs	r2, #1
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	43db      	mvns	r3, r3
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	4013      	ands	r3, r2
 8003d36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	091b      	lsrs	r3, r3, #4
 8003d3e:	f003 0201 	and.w	r2, r3, #1
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f003 0303 	and.w	r3, r3, #3
 8003d5c:	2b03      	cmp	r3, #3
 8003d5e:	d017      	beq.n	8003d90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	2203      	movs	r2, #3
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	43db      	mvns	r3, r3
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4013      	ands	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	fa02 f303 	lsl.w	r3, r2, r3
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f003 0303 	and.w	r3, r3, #3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d123      	bne.n	8003de4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	08da      	lsrs	r2, r3, #3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3208      	adds	r2, #8
 8003da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	f003 0307 	and.w	r3, r3, #7
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	220f      	movs	r2, #15
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	43db      	mvns	r3, r3
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	691a      	ldr	r2, [r3, #16]
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	08da      	lsrs	r2, r3, #3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	3208      	adds	r2, #8
 8003dde:	69b9      	ldr	r1, [r7, #24]
 8003de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	2203      	movs	r2, #3
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	43db      	mvns	r3, r3
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f003 0203 	and.w	r2, r3, #3
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 80b4 	beq.w	8003f8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e26:	2300      	movs	r3, #0
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	4b60      	ldr	r3, [pc, #384]	; (8003fac <HAL_GPIO_Init+0x30c>)
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2e:	4a5f      	ldr	r2, [pc, #380]	; (8003fac <HAL_GPIO_Init+0x30c>)
 8003e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e34:	6453      	str	r3, [r2, #68]	; 0x44
 8003e36:	4b5d      	ldr	r3, [pc, #372]	; (8003fac <HAL_GPIO_Init+0x30c>)
 8003e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e3e:	60fb      	str	r3, [r7, #12]
 8003e40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e42:	4a5b      	ldr	r2, [pc, #364]	; (8003fb0 <HAL_GPIO_Init+0x310>)
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	089b      	lsrs	r3, r3, #2
 8003e48:	3302      	adds	r3, #2
 8003e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	220f      	movs	r2, #15
 8003e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5e:	43db      	mvns	r3, r3
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	4013      	ands	r3, r2
 8003e64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a52      	ldr	r2, [pc, #328]	; (8003fb4 <HAL_GPIO_Init+0x314>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d02b      	beq.n	8003ec6 <HAL_GPIO_Init+0x226>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a51      	ldr	r2, [pc, #324]	; (8003fb8 <HAL_GPIO_Init+0x318>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d025      	beq.n	8003ec2 <HAL_GPIO_Init+0x222>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a50      	ldr	r2, [pc, #320]	; (8003fbc <HAL_GPIO_Init+0x31c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d01f      	beq.n	8003ebe <HAL_GPIO_Init+0x21e>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a4f      	ldr	r2, [pc, #316]	; (8003fc0 <HAL_GPIO_Init+0x320>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d019      	beq.n	8003eba <HAL_GPIO_Init+0x21a>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a4e      	ldr	r2, [pc, #312]	; (8003fc4 <HAL_GPIO_Init+0x324>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d013      	beq.n	8003eb6 <HAL_GPIO_Init+0x216>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a4d      	ldr	r2, [pc, #308]	; (8003fc8 <HAL_GPIO_Init+0x328>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d00d      	beq.n	8003eb2 <HAL_GPIO_Init+0x212>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a4c      	ldr	r2, [pc, #304]	; (8003fcc <HAL_GPIO_Init+0x32c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d007      	beq.n	8003eae <HAL_GPIO_Init+0x20e>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a4b      	ldr	r2, [pc, #300]	; (8003fd0 <HAL_GPIO_Init+0x330>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d101      	bne.n	8003eaa <HAL_GPIO_Init+0x20a>
 8003ea6:	2307      	movs	r3, #7
 8003ea8:	e00e      	b.n	8003ec8 <HAL_GPIO_Init+0x228>
 8003eaa:	2308      	movs	r3, #8
 8003eac:	e00c      	b.n	8003ec8 <HAL_GPIO_Init+0x228>
 8003eae:	2306      	movs	r3, #6
 8003eb0:	e00a      	b.n	8003ec8 <HAL_GPIO_Init+0x228>
 8003eb2:	2305      	movs	r3, #5
 8003eb4:	e008      	b.n	8003ec8 <HAL_GPIO_Init+0x228>
 8003eb6:	2304      	movs	r3, #4
 8003eb8:	e006      	b.n	8003ec8 <HAL_GPIO_Init+0x228>
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e004      	b.n	8003ec8 <HAL_GPIO_Init+0x228>
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	e002      	b.n	8003ec8 <HAL_GPIO_Init+0x228>
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e000      	b.n	8003ec8 <HAL_GPIO_Init+0x228>
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	69fa      	ldr	r2, [r7, #28]
 8003eca:	f002 0203 	and.w	r2, r2, #3
 8003ece:	0092      	lsls	r2, r2, #2
 8003ed0:	4093      	lsls	r3, r2
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ed8:	4935      	ldr	r1, [pc, #212]	; (8003fb0 <HAL_GPIO_Init+0x310>)
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	089b      	lsrs	r3, r3, #2
 8003ede:	3302      	adds	r3, #2
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ee6:	4b3b      	ldr	r3, [pc, #236]	; (8003fd4 <HAL_GPIO_Init+0x334>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f0a:	4a32      	ldr	r2, [pc, #200]	; (8003fd4 <HAL_GPIO_Init+0x334>)
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f10:	4b30      	ldr	r3, [pc, #192]	; (8003fd4 <HAL_GPIO_Init+0x334>)
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d003      	beq.n	8003f34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f34:	4a27      	ldr	r2, [pc, #156]	; (8003fd4 <HAL_GPIO_Init+0x334>)
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f3a:	4b26      	ldr	r3, [pc, #152]	; (8003fd4 <HAL_GPIO_Init+0x334>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	43db      	mvns	r3, r3
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	4013      	ands	r3, r2
 8003f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f5e:	4a1d      	ldr	r2, [pc, #116]	; (8003fd4 <HAL_GPIO_Init+0x334>)
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f64:	4b1b      	ldr	r3, [pc, #108]	; (8003fd4 <HAL_GPIO_Init+0x334>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	43db      	mvns	r3, r3
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	4013      	ands	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d003      	beq.n	8003f88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f88:	4a12      	ldr	r2, [pc, #72]	; (8003fd4 <HAL_GPIO_Init+0x334>)
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	3301      	adds	r3, #1
 8003f92:	61fb      	str	r3, [r7, #28]
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	2b0f      	cmp	r3, #15
 8003f98:	f67f ae90 	bls.w	8003cbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f9c:	bf00      	nop
 8003f9e:	bf00      	nop
 8003fa0:	3724      	adds	r7, #36	; 0x24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	40013800 	.word	0x40013800
 8003fb4:	40020000 	.word	0x40020000
 8003fb8:	40020400 	.word	0x40020400
 8003fbc:	40020800 	.word	0x40020800
 8003fc0:	40020c00 	.word	0x40020c00
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	40021400 	.word	0x40021400
 8003fcc:	40021800 	.word	0x40021800
 8003fd0:	40021c00 	.word	0x40021c00
 8003fd4:	40013c00 	.word	0x40013c00

08003fd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691a      	ldr	r2, [r3, #16]
 8003fe8:	887b      	ldrh	r3, [r7, #2]
 8003fea:	4013      	ands	r3, r2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d002      	beq.n	8003ff6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	73fb      	strb	r3, [r7, #15]
 8003ff4:	e001      	b.n	8003ffa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	460b      	mov	r3, r1
 8004012:	807b      	strh	r3, [r7, #2]
 8004014:	4613      	mov	r3, r2
 8004016:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004018:	787b      	ldrb	r3, [r7, #1]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800401e:	887a      	ldrh	r2, [r7, #2]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004024:	e003      	b.n	800402e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004026:	887b      	ldrh	r3, [r7, #2]
 8004028:	041a      	lsls	r2, r3, #16
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	619a      	str	r2, [r3, #24]
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800403a:	b480      	push	{r7}
 800403c:	b085      	sub	sp, #20
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
 8004042:	460b      	mov	r3, r1
 8004044:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800404c:	887a      	ldrh	r2, [r7, #2]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	4013      	ands	r3, r2
 8004052:	041a      	lsls	r2, r3, #16
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	43d9      	mvns	r1, r3
 8004058:	887b      	ldrh	r3, [r7, #2]
 800405a:	400b      	ands	r3, r1
 800405c:	431a      	orrs	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	619a      	str	r2, [r3, #24]
}
 8004062:	bf00      	nop
 8004064:	3714      	adds	r7, #20
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
	...

08004070 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	4603      	mov	r3, r0
 8004078:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800407a:	4b08      	ldr	r3, [pc, #32]	; (800409c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800407c:	695a      	ldr	r2, [r3, #20]
 800407e:	88fb      	ldrh	r3, [r7, #6]
 8004080:	4013      	ands	r3, r2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d006      	beq.n	8004094 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004086:	4a05      	ldr	r2, [pc, #20]	; (800409c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004088:	88fb      	ldrh	r3, [r7, #6]
 800408a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800408c:	88fb      	ldrh	r3, [r7, #6]
 800408e:	4618      	mov	r0, r3
 8004090:	f7fd f938 	bl	8001304 <HAL_GPIO_EXTI_Callback>
  }
}
 8004094:	bf00      	nop
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40013c00 	.word	0x40013c00

080040a0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80040a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040a2:	b08f      	sub	sp, #60	; 0x3c
 80040a4:	af0a      	add	r7, sp, #40	; 0x28
 80040a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e054      	b.n	800415c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d106      	bne.n	80040d2 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f006 fe8f 	bl	800adf0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2203      	movs	r2, #3
 80040d6:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d102      	bne.n	80040ec <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f003 febd 	bl	8007e70 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	603b      	str	r3, [r7, #0]
 80040fc:	687e      	ldr	r6, [r7, #4]
 80040fe:	466d      	mov	r5, sp
 8004100:	f106 0410 	add.w	r4, r6, #16
 8004104:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004106:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004108:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800410a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800410c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004110:	e885 0003 	stmia.w	r5, {r0, r1}
 8004114:	1d33      	adds	r3, r6, #4
 8004116:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004118:	6838      	ldr	r0, [r7, #0]
 800411a:	f003 fe37 	bl	8007d8c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2101      	movs	r1, #1
 8004124:	4618      	mov	r0, r3
 8004126:	f003 feb4 	bl	8007e92 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	603b      	str	r3, [r7, #0]
 8004130:	687e      	ldr	r6, [r7, #4]
 8004132:	466d      	mov	r5, sp
 8004134:	f106 0410 	add.w	r4, r6, #16
 8004138:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800413a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800413c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800413e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004140:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004144:	e885 0003 	stmia.w	r5, {r0, r1}
 8004148:	1d33      	adds	r3, r6, #4
 800414a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800414c:	6838      	ldr	r0, [r7, #0]
 800414e:	f004 f83d 	bl	80081cc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004164 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004164:	b590      	push	{r4, r7, lr}
 8004166:	b089      	sub	sp, #36	; 0x24
 8004168:	af04      	add	r7, sp, #16
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	4608      	mov	r0, r1
 800416e:	4611      	mov	r1, r2
 8004170:	461a      	mov	r2, r3
 8004172:	4603      	mov	r3, r0
 8004174:	70fb      	strb	r3, [r7, #3]
 8004176:	460b      	mov	r3, r1
 8004178:	70bb      	strb	r3, [r7, #2]
 800417a:	4613      	mov	r3, r2
 800417c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004184:	2b01      	cmp	r3, #1
 8004186:	d101      	bne.n	800418c <HAL_HCD_HC_Init+0x28>
 8004188:	2302      	movs	r3, #2
 800418a:	e076      	b.n	800427a <HAL_HCD_HC_Init+0x116>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8004194:	78fb      	ldrb	r3, [r7, #3]
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	212c      	movs	r1, #44	; 0x2c
 800419a:	fb01 f303 	mul.w	r3, r1, r3
 800419e:	4413      	add	r3, r2
 80041a0:	333d      	adds	r3, #61	; 0x3d
 80041a2:	2200      	movs	r2, #0
 80041a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80041a6:	78fb      	ldrb	r3, [r7, #3]
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	212c      	movs	r1, #44	; 0x2c
 80041ac:	fb01 f303 	mul.w	r3, r1, r3
 80041b0:	4413      	add	r3, r2
 80041b2:	3338      	adds	r3, #56	; 0x38
 80041b4:	787a      	ldrb	r2, [r7, #1]
 80041b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80041b8:	78fb      	ldrb	r3, [r7, #3]
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	212c      	movs	r1, #44	; 0x2c
 80041be:	fb01 f303 	mul.w	r3, r1, r3
 80041c2:	4413      	add	r3, r2
 80041c4:	3340      	adds	r3, #64	; 0x40
 80041c6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80041c8:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80041ca:	78fb      	ldrb	r3, [r7, #3]
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	212c      	movs	r1, #44	; 0x2c
 80041d0:	fb01 f303 	mul.w	r3, r1, r3
 80041d4:	4413      	add	r3, r2
 80041d6:	3339      	adds	r3, #57	; 0x39
 80041d8:	78fa      	ldrb	r2, [r7, #3]
 80041da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80041dc:	78fb      	ldrb	r3, [r7, #3]
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	212c      	movs	r1, #44	; 0x2c
 80041e2:	fb01 f303 	mul.w	r3, r1, r3
 80041e6:	4413      	add	r3, r2
 80041e8:	333f      	adds	r3, #63	; 0x3f
 80041ea:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80041ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80041f0:	78fb      	ldrb	r3, [r7, #3]
 80041f2:	78ba      	ldrb	r2, [r7, #2]
 80041f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041f8:	b2d0      	uxtb	r0, r2
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	212c      	movs	r1, #44	; 0x2c
 80041fe:	fb01 f303 	mul.w	r3, r1, r3
 8004202:	4413      	add	r3, r2
 8004204:	333a      	adds	r3, #58	; 0x3a
 8004206:	4602      	mov	r2, r0
 8004208:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800420a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800420e:	2b00      	cmp	r3, #0
 8004210:	da09      	bge.n	8004226 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004212:	78fb      	ldrb	r3, [r7, #3]
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	212c      	movs	r1, #44	; 0x2c
 8004218:	fb01 f303 	mul.w	r3, r1, r3
 800421c:	4413      	add	r3, r2
 800421e:	333b      	adds	r3, #59	; 0x3b
 8004220:	2201      	movs	r2, #1
 8004222:	701a      	strb	r2, [r3, #0]
 8004224:	e008      	b.n	8004238 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004226:	78fb      	ldrb	r3, [r7, #3]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	212c      	movs	r1, #44	; 0x2c
 800422c:	fb01 f303 	mul.w	r3, r1, r3
 8004230:	4413      	add	r3, r2
 8004232:	333b      	adds	r3, #59	; 0x3b
 8004234:	2200      	movs	r2, #0
 8004236:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004238:	78fb      	ldrb	r3, [r7, #3]
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	212c      	movs	r1, #44	; 0x2c
 800423e:	fb01 f303 	mul.w	r3, r1, r3
 8004242:	4413      	add	r3, r2
 8004244:	333c      	adds	r3, #60	; 0x3c
 8004246:	f897 2020 	ldrb.w	r2, [r7, #32]
 800424a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6818      	ldr	r0, [r3, #0]
 8004250:	787c      	ldrb	r4, [r7, #1]
 8004252:	78ba      	ldrb	r2, [r7, #2]
 8004254:	78f9      	ldrb	r1, [r7, #3]
 8004256:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004258:	9302      	str	r3, [sp, #8]
 800425a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800425e:	9301      	str	r3, [sp, #4]
 8004260:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	4623      	mov	r3, r4
 8004268:	f004 f936 	bl	80084d8 <USB_HC_Init>
 800426c:	4603      	mov	r3, r0
 800426e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004278:	7bfb      	ldrb	r3, [r7, #15]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	bd90      	pop	{r4, r7, pc}

08004282 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b084      	sub	sp, #16
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
 800428a:	460b      	mov	r3, r1
 800428c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800428e:	2300      	movs	r3, #0
 8004290:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004298:	2b01      	cmp	r3, #1
 800429a:	d101      	bne.n	80042a0 <HAL_HCD_HC_Halt+0x1e>
 800429c:	2302      	movs	r3, #2
 800429e:	e00f      	b.n	80042c0 <HAL_HCD_HC_Halt+0x3e>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	78fa      	ldrb	r2, [r7, #3]
 80042ae:	4611      	mov	r1, r2
 80042b0:	4618      	mov	r0, r3
 80042b2:	f004 fb86 	bl	80089c2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80042be:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	4608      	mov	r0, r1
 80042d2:	4611      	mov	r1, r2
 80042d4:	461a      	mov	r2, r3
 80042d6:	4603      	mov	r3, r0
 80042d8:	70fb      	strb	r3, [r7, #3]
 80042da:	460b      	mov	r3, r1
 80042dc:	70bb      	strb	r3, [r7, #2]
 80042de:	4613      	mov	r3, r2
 80042e0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80042e2:	78fb      	ldrb	r3, [r7, #3]
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	212c      	movs	r1, #44	; 0x2c
 80042e8:	fb01 f303 	mul.w	r3, r1, r3
 80042ec:	4413      	add	r3, r2
 80042ee:	333b      	adds	r3, #59	; 0x3b
 80042f0:	78ba      	ldrb	r2, [r7, #2]
 80042f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80042f4:	78fb      	ldrb	r3, [r7, #3]
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	212c      	movs	r1, #44	; 0x2c
 80042fa:	fb01 f303 	mul.w	r3, r1, r3
 80042fe:	4413      	add	r3, r2
 8004300:	333f      	adds	r3, #63	; 0x3f
 8004302:	787a      	ldrb	r2, [r7, #1]
 8004304:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004306:	7c3b      	ldrb	r3, [r7, #16]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d112      	bne.n	8004332 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800430c:	78fb      	ldrb	r3, [r7, #3]
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	212c      	movs	r1, #44	; 0x2c
 8004312:	fb01 f303 	mul.w	r3, r1, r3
 8004316:	4413      	add	r3, r2
 8004318:	3342      	adds	r3, #66	; 0x42
 800431a:	2203      	movs	r2, #3
 800431c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800431e:	78fb      	ldrb	r3, [r7, #3]
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	212c      	movs	r1, #44	; 0x2c
 8004324:	fb01 f303 	mul.w	r3, r1, r3
 8004328:	4413      	add	r3, r2
 800432a:	333d      	adds	r3, #61	; 0x3d
 800432c:	7f3a      	ldrb	r2, [r7, #28]
 800432e:	701a      	strb	r2, [r3, #0]
 8004330:	e008      	b.n	8004344 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004332:	78fb      	ldrb	r3, [r7, #3]
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	212c      	movs	r1, #44	; 0x2c
 8004338:	fb01 f303 	mul.w	r3, r1, r3
 800433c:	4413      	add	r3, r2
 800433e:	3342      	adds	r3, #66	; 0x42
 8004340:	2202      	movs	r2, #2
 8004342:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004344:	787b      	ldrb	r3, [r7, #1]
 8004346:	2b03      	cmp	r3, #3
 8004348:	f200 80c6 	bhi.w	80044d8 <HAL_HCD_HC_SubmitRequest+0x210>
 800434c:	a201      	add	r2, pc, #4	; (adr r2, 8004354 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800434e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004352:	bf00      	nop
 8004354:	08004365 	.word	0x08004365
 8004358:	080044c5 	.word	0x080044c5
 800435c:	080043c9 	.word	0x080043c9
 8004360:	08004447 	.word	0x08004447
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004364:	7c3b      	ldrb	r3, [r7, #16]
 8004366:	2b01      	cmp	r3, #1
 8004368:	f040 80b8 	bne.w	80044dc <HAL_HCD_HC_SubmitRequest+0x214>
 800436c:	78bb      	ldrb	r3, [r7, #2]
 800436e:	2b00      	cmp	r3, #0
 8004370:	f040 80b4 	bne.w	80044dc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004374:	8b3b      	ldrh	r3, [r7, #24]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d108      	bne.n	800438c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800437a:	78fb      	ldrb	r3, [r7, #3]
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	212c      	movs	r1, #44	; 0x2c
 8004380:	fb01 f303 	mul.w	r3, r1, r3
 8004384:	4413      	add	r3, r2
 8004386:	3355      	adds	r3, #85	; 0x55
 8004388:	2201      	movs	r2, #1
 800438a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800438c:	78fb      	ldrb	r3, [r7, #3]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	212c      	movs	r1, #44	; 0x2c
 8004392:	fb01 f303 	mul.w	r3, r1, r3
 8004396:	4413      	add	r3, r2
 8004398:	3355      	adds	r3, #85	; 0x55
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d109      	bne.n	80043b4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80043a0:	78fb      	ldrb	r3, [r7, #3]
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	212c      	movs	r1, #44	; 0x2c
 80043a6:	fb01 f303 	mul.w	r3, r1, r3
 80043aa:	4413      	add	r3, r2
 80043ac:	3342      	adds	r3, #66	; 0x42
 80043ae:	2200      	movs	r2, #0
 80043b0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80043b2:	e093      	b.n	80044dc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	212c      	movs	r1, #44	; 0x2c
 80043ba:	fb01 f303 	mul.w	r3, r1, r3
 80043be:	4413      	add	r3, r2
 80043c0:	3342      	adds	r3, #66	; 0x42
 80043c2:	2202      	movs	r2, #2
 80043c4:	701a      	strb	r2, [r3, #0]
      break;
 80043c6:	e089      	b.n	80044dc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80043c8:	78bb      	ldrb	r3, [r7, #2]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d11d      	bne.n	800440a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80043ce:	78fb      	ldrb	r3, [r7, #3]
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	212c      	movs	r1, #44	; 0x2c
 80043d4:	fb01 f303 	mul.w	r3, r1, r3
 80043d8:	4413      	add	r3, r2
 80043da:	3355      	adds	r3, #85	; 0x55
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d109      	bne.n	80043f6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80043e2:	78fb      	ldrb	r3, [r7, #3]
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	212c      	movs	r1, #44	; 0x2c
 80043e8:	fb01 f303 	mul.w	r3, r1, r3
 80043ec:	4413      	add	r3, r2
 80043ee:	3342      	adds	r3, #66	; 0x42
 80043f0:	2200      	movs	r2, #0
 80043f2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80043f4:	e073      	b.n	80044de <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80043f6:	78fb      	ldrb	r3, [r7, #3]
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	212c      	movs	r1, #44	; 0x2c
 80043fc:	fb01 f303 	mul.w	r3, r1, r3
 8004400:	4413      	add	r3, r2
 8004402:	3342      	adds	r3, #66	; 0x42
 8004404:	2202      	movs	r2, #2
 8004406:	701a      	strb	r2, [r3, #0]
      break;
 8004408:	e069      	b.n	80044de <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800440a:	78fb      	ldrb	r3, [r7, #3]
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	212c      	movs	r1, #44	; 0x2c
 8004410:	fb01 f303 	mul.w	r3, r1, r3
 8004414:	4413      	add	r3, r2
 8004416:	3354      	adds	r3, #84	; 0x54
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d109      	bne.n	8004432 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800441e:	78fb      	ldrb	r3, [r7, #3]
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	212c      	movs	r1, #44	; 0x2c
 8004424:	fb01 f303 	mul.w	r3, r1, r3
 8004428:	4413      	add	r3, r2
 800442a:	3342      	adds	r3, #66	; 0x42
 800442c:	2200      	movs	r2, #0
 800442e:	701a      	strb	r2, [r3, #0]
      break;
 8004430:	e055      	b.n	80044de <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004432:	78fb      	ldrb	r3, [r7, #3]
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	212c      	movs	r1, #44	; 0x2c
 8004438:	fb01 f303 	mul.w	r3, r1, r3
 800443c:	4413      	add	r3, r2
 800443e:	3342      	adds	r3, #66	; 0x42
 8004440:	2202      	movs	r2, #2
 8004442:	701a      	strb	r2, [r3, #0]
      break;
 8004444:	e04b      	b.n	80044de <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004446:	78bb      	ldrb	r3, [r7, #2]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d11d      	bne.n	8004488 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800444c:	78fb      	ldrb	r3, [r7, #3]
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	212c      	movs	r1, #44	; 0x2c
 8004452:	fb01 f303 	mul.w	r3, r1, r3
 8004456:	4413      	add	r3, r2
 8004458:	3355      	adds	r3, #85	; 0x55
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d109      	bne.n	8004474 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004460:	78fb      	ldrb	r3, [r7, #3]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	212c      	movs	r1, #44	; 0x2c
 8004466:	fb01 f303 	mul.w	r3, r1, r3
 800446a:	4413      	add	r3, r2
 800446c:	3342      	adds	r3, #66	; 0x42
 800446e:	2200      	movs	r2, #0
 8004470:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004472:	e034      	b.n	80044de <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004474:	78fb      	ldrb	r3, [r7, #3]
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	212c      	movs	r1, #44	; 0x2c
 800447a:	fb01 f303 	mul.w	r3, r1, r3
 800447e:	4413      	add	r3, r2
 8004480:	3342      	adds	r3, #66	; 0x42
 8004482:	2202      	movs	r2, #2
 8004484:	701a      	strb	r2, [r3, #0]
      break;
 8004486:	e02a      	b.n	80044de <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004488:	78fb      	ldrb	r3, [r7, #3]
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	212c      	movs	r1, #44	; 0x2c
 800448e:	fb01 f303 	mul.w	r3, r1, r3
 8004492:	4413      	add	r3, r2
 8004494:	3354      	adds	r3, #84	; 0x54
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d109      	bne.n	80044b0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800449c:	78fb      	ldrb	r3, [r7, #3]
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	212c      	movs	r1, #44	; 0x2c
 80044a2:	fb01 f303 	mul.w	r3, r1, r3
 80044a6:	4413      	add	r3, r2
 80044a8:	3342      	adds	r3, #66	; 0x42
 80044aa:	2200      	movs	r2, #0
 80044ac:	701a      	strb	r2, [r3, #0]
      break;
 80044ae:	e016      	b.n	80044de <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80044b0:	78fb      	ldrb	r3, [r7, #3]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	212c      	movs	r1, #44	; 0x2c
 80044b6:	fb01 f303 	mul.w	r3, r1, r3
 80044ba:	4413      	add	r3, r2
 80044bc:	3342      	adds	r3, #66	; 0x42
 80044be:	2202      	movs	r2, #2
 80044c0:	701a      	strb	r2, [r3, #0]
      break;
 80044c2:	e00c      	b.n	80044de <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80044c4:	78fb      	ldrb	r3, [r7, #3]
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	212c      	movs	r1, #44	; 0x2c
 80044ca:	fb01 f303 	mul.w	r3, r1, r3
 80044ce:	4413      	add	r3, r2
 80044d0:	3342      	adds	r3, #66	; 0x42
 80044d2:	2200      	movs	r2, #0
 80044d4:	701a      	strb	r2, [r3, #0]
      break;
 80044d6:	e002      	b.n	80044de <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80044d8:	bf00      	nop
 80044da:	e000      	b.n	80044de <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80044dc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80044de:	78fb      	ldrb	r3, [r7, #3]
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	212c      	movs	r1, #44	; 0x2c
 80044e4:	fb01 f303 	mul.w	r3, r1, r3
 80044e8:	4413      	add	r3, r2
 80044ea:	3344      	adds	r3, #68	; 0x44
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80044f0:	78fb      	ldrb	r3, [r7, #3]
 80044f2:	8b3a      	ldrh	r2, [r7, #24]
 80044f4:	6879      	ldr	r1, [r7, #4]
 80044f6:	202c      	movs	r0, #44	; 0x2c
 80044f8:	fb00 f303 	mul.w	r3, r0, r3
 80044fc:	440b      	add	r3, r1
 80044fe:	334c      	adds	r3, #76	; 0x4c
 8004500:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004502:	78fb      	ldrb	r3, [r7, #3]
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	212c      	movs	r1, #44	; 0x2c
 8004508:	fb01 f303 	mul.w	r3, r1, r3
 800450c:	4413      	add	r3, r2
 800450e:	3360      	adds	r3, #96	; 0x60
 8004510:	2200      	movs	r2, #0
 8004512:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004514:	78fb      	ldrb	r3, [r7, #3]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	212c      	movs	r1, #44	; 0x2c
 800451a:	fb01 f303 	mul.w	r3, r1, r3
 800451e:	4413      	add	r3, r2
 8004520:	3350      	adds	r3, #80	; 0x50
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004526:	78fb      	ldrb	r3, [r7, #3]
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	212c      	movs	r1, #44	; 0x2c
 800452c:	fb01 f303 	mul.w	r3, r1, r3
 8004530:	4413      	add	r3, r2
 8004532:	3339      	adds	r3, #57	; 0x39
 8004534:	78fa      	ldrb	r2, [r7, #3]
 8004536:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004538:	78fb      	ldrb	r3, [r7, #3]
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	212c      	movs	r1, #44	; 0x2c
 800453e:	fb01 f303 	mul.w	r3, r1, r3
 8004542:	4413      	add	r3, r2
 8004544:	3361      	adds	r3, #97	; 0x61
 8004546:	2200      	movs	r2, #0
 8004548:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6818      	ldr	r0, [r3, #0]
 800454e:	78fb      	ldrb	r3, [r7, #3]
 8004550:	222c      	movs	r2, #44	; 0x2c
 8004552:	fb02 f303 	mul.w	r3, r2, r3
 8004556:	3338      	adds	r3, #56	; 0x38
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	18d1      	adds	r1, r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	b2db      	uxtb	r3, r3
 8004562:	461a      	mov	r2, r3
 8004564:	f004 f8da 	bl	800871c <USB_HC_StartXfer>
 8004568:	4603      	mov	r3, r0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop

08004574 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f003 fddb 	bl	8008146 <USB_GetMode>
 8004590:	4603      	mov	r3, r0
 8004592:	2b01      	cmp	r3, #1
 8004594:	f040 80f6 	bne.w	8004784 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4618      	mov	r0, r3
 800459e:	f003 fdbf 	bl	8008120 <USB_ReadInterrupts>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 80ec 	beq.w	8004782 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f003 fdb6 	bl	8008120 <USB_ReadInterrupts>
 80045b4:	4603      	mov	r3, r0
 80045b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045be:	d104      	bne.n	80045ca <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80045c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f003 fda6 	bl	8008120 <USB_ReadInterrupts>
 80045d4:	4603      	mov	r3, r0
 80045d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045de:	d104      	bne.n	80045ea <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80045e8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f003 fd96 	bl	8008120 <USB_ReadInterrupts>
 80045f4:	4603      	mov	r3, r0
 80045f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045fe:	d104      	bne.n	800460a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004608:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4618      	mov	r0, r3
 8004610:	f003 fd86 	bl	8008120 <USB_ReadInterrupts>
 8004614:	4603      	mov	r3, r0
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b02      	cmp	r3, #2
 800461c:	d103      	bne.n	8004626 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2202      	movs	r2, #2
 8004624:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4618      	mov	r0, r3
 800462c:	f003 fd78 	bl	8008120 <USB_ReadInterrupts>
 8004630:	4603      	mov	r3, r0
 8004632:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004636:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800463a:	d11c      	bne.n	8004676 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004644:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10f      	bne.n	8004676 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004656:	2110      	movs	r1, #16
 8004658:	6938      	ldr	r0, [r7, #16]
 800465a:	f003 fc67 	bl	8007f2c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800465e:	6938      	ldr	r0, [r7, #16]
 8004660:	f003 fc98 	bl	8007f94 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2101      	movs	r1, #1
 800466a:	4618      	mov	r0, r3
 800466c:	f003 fe6e 	bl	800834c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f006 fc3b 	bl	800aeec <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4618      	mov	r0, r3
 800467c:	f003 fd50 	bl	8008120 <USB_ReadInterrupts>
 8004680:	4603      	mov	r3, r0
 8004682:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004686:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800468a:	d102      	bne.n	8004692 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f001 f89e 	bl	80057ce <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4618      	mov	r0, r3
 8004698:	f003 fd42 	bl	8008120 <USB_ReadInterrupts>
 800469c:	4603      	mov	r3, r0
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b08      	cmp	r3, #8
 80046a4:	d106      	bne.n	80046b4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f006 fc04 	bl	800aeb4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2208      	movs	r2, #8
 80046b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f003 fd31 	bl	8008120 <USB_ReadInterrupts>
 80046be:	4603      	mov	r3, r0
 80046c0:	f003 0310 	and.w	r3, r3, #16
 80046c4:	2b10      	cmp	r3, #16
 80046c6:	d101      	bne.n	80046cc <HAL_HCD_IRQHandler+0x158>
 80046c8:	2301      	movs	r3, #1
 80046ca:	e000      	b.n	80046ce <HAL_HCD_IRQHandler+0x15a>
 80046cc:	2300      	movs	r3, #0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d012      	beq.n	80046f8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	699a      	ldr	r2, [r3, #24]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 0210 	bic.w	r2, r2, #16
 80046e0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 ffa1 	bl	800562a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	699a      	ldr	r2, [r3, #24]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0210 	orr.w	r2, r2, #16
 80046f6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f003 fd0f 	bl	8008120 <USB_ReadInterrupts>
 8004702:	4603      	mov	r3, r0
 8004704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004708:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800470c:	d13a      	bne.n	8004784 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4618      	mov	r0, r3
 8004714:	f004 f944 	bl	80089a0 <USB_HC_ReadInterrupt>
 8004718:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800471a:	2300      	movs	r3, #0
 800471c:	617b      	str	r3, [r7, #20]
 800471e:	e025      	b.n	800476c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f003 030f 	and.w	r3, r3, #15
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	fa22 f303 	lsr.w	r3, r2, r3
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b00      	cmp	r3, #0
 8004732:	d018      	beq.n	8004766 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4413      	add	r3, r2
 800473c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004746:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800474a:	d106      	bne.n	800475a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	b2db      	uxtb	r3, r3
 8004750:	4619      	mov	r1, r3
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f8ab 	bl	80048ae <HCD_HC_IN_IRQHandler>
 8004758:	e005      	b.n	8004766 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	b2db      	uxtb	r3, r3
 800475e:	4619      	mov	r1, r3
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 fbf9 	bl	8004f58 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	3301      	adds	r3, #1
 800476a:	617b      	str	r3, [r7, #20]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	429a      	cmp	r2, r3
 8004774:	d3d4      	bcc.n	8004720 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800477e:	615a      	str	r2, [r3, #20]
 8004780:	e000      	b.n	8004784 <HAL_HCD_IRQHandler+0x210>
      return;
 8004782:	bf00      	nop
    }
  }
}
 8004784:	3718      	adds	r7, #24
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b082      	sub	sp, #8
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004798:	2b01      	cmp	r3, #1
 800479a:	d101      	bne.n	80047a0 <HAL_HCD_Start+0x16>
 800479c:	2302      	movs	r3, #2
 800479e:	e013      	b.n	80047c8 <HAL_HCD_Start+0x3e>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2101      	movs	r1, #1
 80047ae:	4618      	mov	r0, r3
 80047b0:	f003 fe30 	bl	8008414 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f003 fb48 	bl	8007e4e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d101      	bne.n	80047e6 <HAL_HCD_Stop+0x16>
 80047e2:	2302      	movs	r3, #2
 80047e4:	e00d      	b.n	8004802 <HAL_HCD_Stop+0x32>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f004 fa1e 	bl	8008c34 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b082      	sub	sp, #8
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4618      	mov	r0, r3
 8004818:	f003 fdd2 	bl	80083c0 <USB_ResetPort>
 800481c:	4603      	mov	r3, r0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
 800482e:	460b      	mov	r3, r1
 8004830:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004832:	78fb      	ldrb	r3, [r7, #3]
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	212c      	movs	r1, #44	; 0x2c
 8004838:	fb01 f303 	mul.w	r3, r1, r3
 800483c:	4413      	add	r3, r2
 800483e:	3360      	adds	r3, #96	; 0x60
 8004840:	781b      	ldrb	r3, [r3, #0]
}
 8004842:	4618      	mov	r0, r3
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
 8004856:	460b      	mov	r3, r1
 8004858:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800485a:	78fb      	ldrb	r3, [r7, #3]
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	212c      	movs	r1, #44	; 0x2c
 8004860:	fb01 f303 	mul.w	r3, r1, r3
 8004864:	4413      	add	r3, r2
 8004866:	3350      	adds	r3, #80	; 0x50
 8004868:	681b      	ldr	r3, [r3, #0]
}
 800486a:	4618      	mov	r0, r3
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b082      	sub	sp, #8
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f003 fe16 	bl	80084b4 <USB_GetCurrentFrame>
 8004888:	4603      	mov	r3, r0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b082      	sub	sp, #8
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4618      	mov	r0, r3
 80048a0:	f003 fdf1 	bl	8008486 <USB_GetHostSpeed>
 80048a4:	4603      	mov	r3, r0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b086      	sub	sp, #24
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
 80048b6:	460b      	mov	r3, r1
 80048b8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80048c4:	78fb      	ldrb	r3, [r7, #3]
 80048c6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	015a      	lsls	r2, r3, #5
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	4413      	add	r3, r2
 80048d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 0304 	and.w	r3, r3, #4
 80048da:	2b04      	cmp	r3, #4
 80048dc:	d11a      	bne.n	8004914 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ea:	461a      	mov	r2, r3
 80048ec:	2304      	movs	r3, #4
 80048ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	212c      	movs	r1, #44	; 0x2c
 80048f6:	fb01 f303 	mul.w	r3, r1, r3
 80048fa:	4413      	add	r3, r2
 80048fc:	3361      	adds	r3, #97	; 0x61
 80048fe:	2206      	movs	r2, #6
 8004900:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	b2d2      	uxtb	r2, r2
 800490a:	4611      	mov	r1, r2
 800490c:	4618      	mov	r0, r3
 800490e:	f004 f858 	bl	80089c2 <USB_HC_Halt>
 8004912:	e0af      	b.n	8004a74 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	015a      	lsls	r2, r3, #5
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	4413      	add	r3, r2
 800491c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800492a:	d11b      	bne.n	8004964 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	4413      	add	r3, r2
 8004934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004938:	461a      	mov	r2, r3
 800493a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800493e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	212c      	movs	r1, #44	; 0x2c
 8004946:	fb01 f303 	mul.w	r3, r1, r3
 800494a:	4413      	add	r3, r2
 800494c:	3361      	adds	r3, #97	; 0x61
 800494e:	2207      	movs	r2, #7
 8004950:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	b2d2      	uxtb	r2, r2
 800495a:	4611      	mov	r1, r2
 800495c:	4618      	mov	r0, r3
 800495e:	f004 f830 	bl	80089c2 <USB_HC_Halt>
 8004962:	e087      	b.n	8004a74 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	015a      	lsls	r2, r3, #5
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	4413      	add	r3, r2
 800496c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f003 0320 	and.w	r3, r3, #32
 8004976:	2b20      	cmp	r3, #32
 8004978:	d109      	bne.n	800498e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	015a      	lsls	r2, r3, #5
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	4413      	add	r3, r2
 8004982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004986:	461a      	mov	r2, r3
 8004988:	2320      	movs	r3, #32
 800498a:	6093      	str	r3, [r2, #8]
 800498c:	e072      	b.n	8004a74 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	015a      	lsls	r2, r3, #5
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	4413      	add	r3, r2
 8004996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f003 0308 	and.w	r3, r3, #8
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	d11a      	bne.n	80049da <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	015a      	lsls	r2, r3, #5
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	4413      	add	r3, r2
 80049ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049b0:	461a      	mov	r2, r3
 80049b2:	2308      	movs	r3, #8
 80049b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	212c      	movs	r1, #44	; 0x2c
 80049bc:	fb01 f303 	mul.w	r3, r1, r3
 80049c0:	4413      	add	r3, r2
 80049c2:	3361      	adds	r3, #97	; 0x61
 80049c4:	2205      	movs	r2, #5
 80049c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	b2d2      	uxtb	r2, r2
 80049d0:	4611      	mov	r1, r2
 80049d2:	4618      	mov	r0, r3
 80049d4:	f003 fff5 	bl	80089c2 <USB_HC_Halt>
 80049d8:	e04c      	b.n	8004a74 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	015a      	lsls	r2, r3, #5
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049f0:	d11b      	bne.n	8004a2a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	015a      	lsls	r2, r3, #5
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	4413      	add	r3, r2
 80049fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049fe:	461a      	mov	r2, r3
 8004a00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a04:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	212c      	movs	r1, #44	; 0x2c
 8004a0c:	fb01 f303 	mul.w	r3, r1, r3
 8004a10:	4413      	add	r3, r2
 8004a12:	3361      	adds	r3, #97	; 0x61
 8004a14:	2208      	movs	r2, #8
 8004a16:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	b2d2      	uxtb	r2, r2
 8004a20:	4611      	mov	r1, r2
 8004a22:	4618      	mov	r0, r3
 8004a24:	f003 ffcd 	bl	80089c2 <USB_HC_Halt>
 8004a28:	e024      	b.n	8004a74 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a3c:	2b80      	cmp	r3, #128	; 0x80
 8004a3e:	d119      	bne.n	8004a74 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	015a      	lsls	r2, r3, #5
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	2380      	movs	r3, #128	; 0x80
 8004a50:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	212c      	movs	r1, #44	; 0x2c
 8004a58:	fb01 f303 	mul.w	r3, r1, r3
 8004a5c:	4413      	add	r3, r2
 8004a5e:	3361      	adds	r3, #97	; 0x61
 8004a60:	2206      	movs	r2, #6
 8004a62:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	b2d2      	uxtb	r2, r2
 8004a6c:	4611      	mov	r1, r2
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f003 ffa7 	bl	80089c2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a8a:	d112      	bne.n	8004ab2 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	b2d2      	uxtb	r2, r2
 8004a94:	4611      	mov	r1, r2
 8004a96:	4618      	mov	r0, r3
 8004a98:	f003 ff93 	bl	80089c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004aae:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004ab0:	e24e      	b.n	8004f50 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	015a      	lsls	r2, r3, #5
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	f040 80df 	bne.w	8004c88 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d019      	beq.n	8004b06 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	212c      	movs	r1, #44	; 0x2c
 8004ad8:	fb01 f303 	mul.w	r3, r1, r3
 8004adc:	4413      	add	r3, r2
 8004ade:	3348      	adds	r3, #72	; 0x48
 8004ae0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	0159      	lsls	r1, r3, #5
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	440b      	add	r3, r1
 8004aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004af4:	1ad2      	subs	r2, r2, r3
 8004af6:	6879      	ldr	r1, [r7, #4]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	202c      	movs	r0, #44	; 0x2c
 8004afc:	fb00 f303 	mul.w	r3, r0, r3
 8004b00:	440b      	add	r3, r1
 8004b02:	3350      	adds	r3, #80	; 0x50
 8004b04:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	212c      	movs	r1, #44	; 0x2c
 8004b0c:	fb01 f303 	mul.w	r3, r1, r3
 8004b10:	4413      	add	r3, r2
 8004b12:	3361      	adds	r3, #97	; 0x61
 8004b14:	2201      	movs	r2, #1
 8004b16:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	212c      	movs	r1, #44	; 0x2c
 8004b1e:	fb01 f303 	mul.w	r3, r1, r3
 8004b22:	4413      	add	r3, r2
 8004b24:	335c      	adds	r3, #92	; 0x5c
 8004b26:	2200      	movs	r2, #0
 8004b28:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	015a      	lsls	r2, r3, #5
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	4413      	add	r3, r2
 8004b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b36:	461a      	mov	r2, r3
 8004b38:	2301      	movs	r3, #1
 8004b3a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	212c      	movs	r1, #44	; 0x2c
 8004b42:	fb01 f303 	mul.w	r3, r1, r3
 8004b46:	4413      	add	r3, r2
 8004b48:	333f      	adds	r3, #63	; 0x3f
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d009      	beq.n	8004b64 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	212c      	movs	r1, #44	; 0x2c
 8004b56:	fb01 f303 	mul.w	r3, r1, r3
 8004b5a:	4413      	add	r3, r2
 8004b5c:	333f      	adds	r3, #63	; 0x3f
 8004b5e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d111      	bne.n	8004b88 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	b2d2      	uxtb	r2, r2
 8004b6c:	4611      	mov	r1, r2
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f003 ff27 	bl	80089c2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b80:	461a      	mov	r2, r3
 8004b82:	2310      	movs	r3, #16
 8004b84:	6093      	str	r3, [r2, #8]
 8004b86:	e03a      	b.n	8004bfe <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	212c      	movs	r1, #44	; 0x2c
 8004b8e:	fb01 f303 	mul.w	r3, r1, r3
 8004b92:	4413      	add	r3, r2
 8004b94:	333f      	adds	r3, #63	; 0x3f
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	2b03      	cmp	r3, #3
 8004b9a:	d009      	beq.n	8004bb0 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	212c      	movs	r1, #44	; 0x2c
 8004ba2:	fb01 f303 	mul.w	r3, r1, r3
 8004ba6:	4413      	add	r3, r2
 8004ba8:	333f      	adds	r3, #63	; 0x3f
 8004baa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d126      	bne.n	8004bfe <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	015a      	lsls	r2, r3, #5
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	0151      	lsls	r1, r2, #5
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	440a      	add	r2, r1
 8004bc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bce:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	212c      	movs	r1, #44	; 0x2c
 8004bd6:	fb01 f303 	mul.w	r3, r1, r3
 8004bda:	4413      	add	r3, r2
 8004bdc:	3360      	adds	r3, #96	; 0x60
 8004bde:	2201      	movs	r2, #1
 8004be0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	b2d9      	uxtb	r1, r3
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	202c      	movs	r0, #44	; 0x2c
 8004bec:	fb00 f303 	mul.w	r3, r0, r3
 8004bf0:	4413      	add	r3, r2
 8004bf2:	3360      	adds	r3, #96	; 0x60
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f006 f985 	bl	800af08 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d12b      	bne.n	8004c5e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	212c      	movs	r1, #44	; 0x2c
 8004c0c:	fb01 f303 	mul.w	r3, r1, r3
 8004c10:	4413      	add	r3, r2
 8004c12:	3348      	adds	r3, #72	; 0x48
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	202c      	movs	r0, #44	; 0x2c
 8004c1c:	fb00 f202 	mul.w	r2, r0, r2
 8004c20:	440a      	add	r2, r1
 8004c22:	3240      	adds	r2, #64	; 0x40
 8004c24:	8812      	ldrh	r2, [r2, #0]
 8004c26:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 818e 	beq.w	8004f50 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	212c      	movs	r1, #44	; 0x2c
 8004c3a:	fb01 f303 	mul.w	r3, r1, r3
 8004c3e:	4413      	add	r3, r2
 8004c40:	3354      	adds	r3, #84	; 0x54
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	f083 0301 	eor.w	r3, r3, #1
 8004c48:	b2d8      	uxtb	r0, r3
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	212c      	movs	r1, #44	; 0x2c
 8004c50:	fb01 f303 	mul.w	r3, r1, r3
 8004c54:	4413      	add	r3, r2
 8004c56:	3354      	adds	r3, #84	; 0x54
 8004c58:	4602      	mov	r2, r0
 8004c5a:	701a      	strb	r2, [r3, #0]
}
 8004c5c:	e178      	b.n	8004f50 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	212c      	movs	r1, #44	; 0x2c
 8004c64:	fb01 f303 	mul.w	r3, r1, r3
 8004c68:	4413      	add	r3, r2
 8004c6a:	3354      	adds	r3, #84	; 0x54
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	f083 0301 	eor.w	r3, r3, #1
 8004c72:	b2d8      	uxtb	r0, r3
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	212c      	movs	r1, #44	; 0x2c
 8004c7a:	fb01 f303 	mul.w	r3, r1, r3
 8004c7e:	4413      	add	r3, r2
 8004c80:	3354      	adds	r3, #84	; 0x54
 8004c82:	4602      	mov	r2, r0
 8004c84:	701a      	strb	r2, [r3, #0]
}
 8004c86:	e163      	b.n	8004f50 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	f040 80f6 	bne.w	8004e8c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	212c      	movs	r1, #44	; 0x2c
 8004ca6:	fb01 f303 	mul.w	r3, r1, r3
 8004caa:	4413      	add	r3, r2
 8004cac:	3361      	adds	r3, #97	; 0x61
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d109      	bne.n	8004cc8 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	212c      	movs	r1, #44	; 0x2c
 8004cba:	fb01 f303 	mul.w	r3, r1, r3
 8004cbe:	4413      	add	r3, r2
 8004cc0:	3360      	adds	r3, #96	; 0x60
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	701a      	strb	r2, [r3, #0]
 8004cc6:	e0c9      	b.n	8004e5c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	212c      	movs	r1, #44	; 0x2c
 8004cce:	fb01 f303 	mul.w	r3, r1, r3
 8004cd2:	4413      	add	r3, r2
 8004cd4:	3361      	adds	r3, #97	; 0x61
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	2b05      	cmp	r3, #5
 8004cda:	d109      	bne.n	8004cf0 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	212c      	movs	r1, #44	; 0x2c
 8004ce2:	fb01 f303 	mul.w	r3, r1, r3
 8004ce6:	4413      	add	r3, r2
 8004ce8:	3360      	adds	r3, #96	; 0x60
 8004cea:	2205      	movs	r2, #5
 8004cec:	701a      	strb	r2, [r3, #0]
 8004cee:	e0b5      	b.n	8004e5c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	212c      	movs	r1, #44	; 0x2c
 8004cf6:	fb01 f303 	mul.w	r3, r1, r3
 8004cfa:	4413      	add	r3, r2
 8004cfc:	3361      	adds	r3, #97	; 0x61
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	2b06      	cmp	r3, #6
 8004d02:	d009      	beq.n	8004d18 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	212c      	movs	r1, #44	; 0x2c
 8004d0a:	fb01 f303 	mul.w	r3, r1, r3
 8004d0e:	4413      	add	r3, r2
 8004d10:	3361      	adds	r3, #97	; 0x61
 8004d12:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004d14:	2b08      	cmp	r3, #8
 8004d16:	d150      	bne.n	8004dba <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	212c      	movs	r1, #44	; 0x2c
 8004d1e:	fb01 f303 	mul.w	r3, r1, r3
 8004d22:	4413      	add	r3, r2
 8004d24:	335c      	adds	r3, #92	; 0x5c
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	6879      	ldr	r1, [r7, #4]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	202c      	movs	r0, #44	; 0x2c
 8004d30:	fb00 f303 	mul.w	r3, r0, r3
 8004d34:	440b      	add	r3, r1
 8004d36:	335c      	adds	r3, #92	; 0x5c
 8004d38:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	212c      	movs	r1, #44	; 0x2c
 8004d40:	fb01 f303 	mul.w	r3, r1, r3
 8004d44:	4413      	add	r3, r2
 8004d46:	335c      	adds	r3, #92	; 0x5c
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d912      	bls.n	8004d74 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	212c      	movs	r1, #44	; 0x2c
 8004d54:	fb01 f303 	mul.w	r3, r1, r3
 8004d58:	4413      	add	r3, r2
 8004d5a:	335c      	adds	r3, #92	; 0x5c
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	212c      	movs	r1, #44	; 0x2c
 8004d66:	fb01 f303 	mul.w	r3, r1, r3
 8004d6a:	4413      	add	r3, r2
 8004d6c:	3360      	adds	r3, #96	; 0x60
 8004d6e:	2204      	movs	r2, #4
 8004d70:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004d72:	e073      	b.n	8004e5c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	212c      	movs	r1, #44	; 0x2c
 8004d7a:	fb01 f303 	mul.w	r3, r1, r3
 8004d7e:	4413      	add	r3, r2
 8004d80:	3360      	adds	r3, #96	; 0x60
 8004d82:	2202      	movs	r2, #2
 8004d84:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	015a      	lsls	r2, r3, #5
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d9c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004da4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	015a      	lsls	r2, r3, #5
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db2:	461a      	mov	r2, r3
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004db8:	e050      	b.n	8004e5c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	212c      	movs	r1, #44	; 0x2c
 8004dc0:	fb01 f303 	mul.w	r3, r1, r3
 8004dc4:	4413      	add	r3, r2
 8004dc6:	3361      	adds	r3, #97	; 0x61
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	2b03      	cmp	r3, #3
 8004dcc:	d122      	bne.n	8004e14 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	212c      	movs	r1, #44	; 0x2c
 8004dd4:	fb01 f303 	mul.w	r3, r1, r3
 8004dd8:	4413      	add	r3, r2
 8004dda:	3360      	adds	r3, #96	; 0x60
 8004ddc:	2202      	movs	r2, #2
 8004dde:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004df6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004dfe:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	015a      	lsls	r2, r3, #5
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	6013      	str	r3, [r2, #0]
 8004e12:	e023      	b.n	8004e5c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	212c      	movs	r1, #44	; 0x2c
 8004e1a:	fb01 f303 	mul.w	r3, r1, r3
 8004e1e:	4413      	add	r3, r2
 8004e20:	3361      	adds	r3, #97	; 0x61
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	2b07      	cmp	r3, #7
 8004e26:	d119      	bne.n	8004e5c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	212c      	movs	r1, #44	; 0x2c
 8004e2e:	fb01 f303 	mul.w	r3, r1, r3
 8004e32:	4413      	add	r3, r2
 8004e34:	335c      	adds	r3, #92	; 0x5c
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	1c5a      	adds	r2, r3, #1
 8004e3a:	6879      	ldr	r1, [r7, #4]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	202c      	movs	r0, #44	; 0x2c
 8004e40:	fb00 f303 	mul.w	r3, r0, r3
 8004e44:	440b      	add	r3, r1
 8004e46:	335c      	adds	r3, #92	; 0x5c
 8004e48:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	212c      	movs	r1, #44	; 0x2c
 8004e50:	fb01 f303 	mul.w	r3, r1, r3
 8004e54:	4413      	add	r3, r2
 8004e56:	3360      	adds	r3, #96	; 0x60
 8004e58:	2204      	movs	r2, #4
 8004e5a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	015a      	lsls	r2, r3, #5
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e68:	461a      	mov	r2, r3
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	b2d9      	uxtb	r1, r3
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	202c      	movs	r0, #44	; 0x2c
 8004e78:	fb00 f303 	mul.w	r3, r0, r3
 8004e7c:	4413      	add	r3, r2
 8004e7e:	3360      	adds	r3, #96	; 0x60
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	461a      	mov	r2, r3
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f006 f83f 	bl	800af08 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004e8a:	e061      	b.n	8004f50 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	015a      	lsls	r2, r3, #5
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	4413      	add	r3, r2
 8004e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f003 0310 	and.w	r3, r3, #16
 8004e9e:	2b10      	cmp	r3, #16
 8004ea0:	d156      	bne.n	8004f50 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	212c      	movs	r1, #44	; 0x2c
 8004ea8:	fb01 f303 	mul.w	r3, r1, r3
 8004eac:	4413      	add	r3, r2
 8004eae:	333f      	adds	r3, #63	; 0x3f
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	2b03      	cmp	r3, #3
 8004eb4:	d111      	bne.n	8004eda <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	212c      	movs	r1, #44	; 0x2c
 8004ebc:	fb01 f303 	mul.w	r3, r1, r3
 8004ec0:	4413      	add	r3, r2
 8004ec2:	335c      	adds	r3, #92	; 0x5c
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	b2d2      	uxtb	r2, r2
 8004ed0:	4611      	mov	r1, r2
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f003 fd75 	bl	80089c2 <USB_HC_Halt>
 8004ed8:	e031      	b.n	8004f3e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	212c      	movs	r1, #44	; 0x2c
 8004ee0:	fb01 f303 	mul.w	r3, r1, r3
 8004ee4:	4413      	add	r3, r2
 8004ee6:	333f      	adds	r3, #63	; 0x3f
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d009      	beq.n	8004f02 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	212c      	movs	r1, #44	; 0x2c
 8004ef4:	fb01 f303 	mul.w	r3, r1, r3
 8004ef8:	4413      	add	r3, r2
 8004efa:	333f      	adds	r3, #63	; 0x3f
 8004efc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d11d      	bne.n	8004f3e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	212c      	movs	r1, #44	; 0x2c
 8004f08:	fb01 f303 	mul.w	r3, r1, r3
 8004f0c:	4413      	add	r3, r2
 8004f0e:	335c      	adds	r3, #92	; 0x5c
 8004f10:	2200      	movs	r2, #0
 8004f12:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d110      	bne.n	8004f3e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	212c      	movs	r1, #44	; 0x2c
 8004f22:	fb01 f303 	mul.w	r3, r1, r3
 8004f26:	4413      	add	r3, r2
 8004f28:	3361      	adds	r3, #97	; 0x61
 8004f2a:	2203      	movs	r2, #3
 8004f2c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	b2d2      	uxtb	r2, r2
 8004f36:	4611      	mov	r1, r2
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f003 fd42 	bl	80089c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	015a      	lsls	r2, r3, #5
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	2310      	movs	r3, #16
 8004f4e:	6093      	str	r3, [r2, #8]
}
 8004f50:	bf00      	nop
 8004f52:	3718      	adds	r7, #24
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b088      	sub	sp, #32
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	460b      	mov	r3, r1
 8004f62:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004f6e:	78fb      	ldrb	r3, [r7, #3]
 8004f70:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f003 0304 	and.w	r3, r3, #4
 8004f84:	2b04      	cmp	r3, #4
 8004f86:	d11a      	bne.n	8004fbe <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f94:	461a      	mov	r2, r3
 8004f96:	2304      	movs	r3, #4
 8004f98:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	212c      	movs	r1, #44	; 0x2c
 8004fa0:	fb01 f303 	mul.w	r3, r1, r3
 8004fa4:	4413      	add	r3, r2
 8004fa6:	3361      	adds	r3, #97	; 0x61
 8004fa8:	2206      	movs	r2, #6
 8004faa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	4611      	mov	r1, r2
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f003 fd03 	bl	80089c2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004fbc:	e331      	b.n	8005622 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	015a      	lsls	r2, r3, #5
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f003 0320 	and.w	r3, r3, #32
 8004fd0:	2b20      	cmp	r3, #32
 8004fd2:	d12e      	bne.n	8005032 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	015a      	lsls	r2, r3, #5
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	2320      	movs	r3, #32
 8004fe4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	212c      	movs	r1, #44	; 0x2c
 8004fec:	fb01 f303 	mul.w	r3, r1, r3
 8004ff0:	4413      	add	r3, r2
 8004ff2:	333d      	adds	r3, #61	; 0x3d
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	f040 8313 	bne.w	8005622 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	212c      	movs	r1, #44	; 0x2c
 8005002:	fb01 f303 	mul.w	r3, r1, r3
 8005006:	4413      	add	r3, r2
 8005008:	333d      	adds	r3, #61	; 0x3d
 800500a:	2200      	movs	r2, #0
 800500c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	212c      	movs	r1, #44	; 0x2c
 8005014:	fb01 f303 	mul.w	r3, r1, r3
 8005018:	4413      	add	r3, r2
 800501a:	3360      	adds	r3, #96	; 0x60
 800501c:	2202      	movs	r2, #2
 800501e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	b2d2      	uxtb	r2, r2
 8005028:	4611      	mov	r1, r2
 800502a:	4618      	mov	r0, r3
 800502c:	f003 fcc9 	bl	80089c2 <USB_HC_Halt>
}
 8005030:	e2f7      	b.n	8005622 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	4413      	add	r3, r2
 800503a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005048:	d112      	bne.n	8005070 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	4413      	add	r3, r2
 8005052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005056:	461a      	mov	r2, r3
 8005058:	f44f 7300 	mov.w	r3, #512	; 0x200
 800505c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	b2d2      	uxtb	r2, r2
 8005066:	4611      	mov	r1, r2
 8005068:	4618      	mov	r0, r3
 800506a:	f003 fcaa 	bl	80089c2 <USB_HC_Halt>
}
 800506e:	e2d8      	b.n	8005622 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	015a      	lsls	r2, r3, #5
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	4413      	add	r3, r2
 8005078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b01      	cmp	r3, #1
 8005084:	d140      	bne.n	8005108 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	212c      	movs	r1, #44	; 0x2c
 800508c:	fb01 f303 	mul.w	r3, r1, r3
 8005090:	4413      	add	r3, r2
 8005092:	335c      	adds	r3, #92	; 0x5c
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	015a      	lsls	r2, r3, #5
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	4413      	add	r3, r2
 80050a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050aa:	2b40      	cmp	r3, #64	; 0x40
 80050ac:	d111      	bne.n	80050d2 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	212c      	movs	r1, #44	; 0x2c
 80050b4:	fb01 f303 	mul.w	r3, r1, r3
 80050b8:	4413      	add	r3, r2
 80050ba:	333d      	adds	r3, #61	; 0x3d
 80050bc:	2201      	movs	r2, #1
 80050be:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	015a      	lsls	r2, r3, #5
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	4413      	add	r3, r2
 80050c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050cc:	461a      	mov	r2, r3
 80050ce:	2340      	movs	r3, #64	; 0x40
 80050d0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050de:	461a      	mov	r2, r3
 80050e0:	2301      	movs	r3, #1
 80050e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	212c      	movs	r1, #44	; 0x2c
 80050ea:	fb01 f303 	mul.w	r3, r1, r3
 80050ee:	4413      	add	r3, r2
 80050f0:	3361      	adds	r3, #97	; 0x61
 80050f2:	2201      	movs	r2, #1
 80050f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	b2d2      	uxtb	r2, r2
 80050fe:	4611      	mov	r1, r2
 8005100:	4618      	mov	r0, r3
 8005102:	f003 fc5e 	bl	80089c2 <USB_HC_Halt>
}
 8005106:	e28c      	b.n	8005622 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	4413      	add	r3, r2
 8005110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800511a:	2b40      	cmp	r3, #64	; 0x40
 800511c:	d12c      	bne.n	8005178 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	212c      	movs	r1, #44	; 0x2c
 8005124:	fb01 f303 	mul.w	r3, r1, r3
 8005128:	4413      	add	r3, r2
 800512a:	3361      	adds	r3, #97	; 0x61
 800512c:	2204      	movs	r2, #4
 800512e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	212c      	movs	r1, #44	; 0x2c
 8005136:	fb01 f303 	mul.w	r3, r1, r3
 800513a:	4413      	add	r3, r2
 800513c:	333d      	adds	r3, #61	; 0x3d
 800513e:	2201      	movs	r2, #1
 8005140:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	212c      	movs	r1, #44	; 0x2c
 8005148:	fb01 f303 	mul.w	r3, r1, r3
 800514c:	4413      	add	r3, r2
 800514e:	335c      	adds	r3, #92	; 0x5c
 8005150:	2200      	movs	r2, #0
 8005152:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	b2d2      	uxtb	r2, r2
 800515c:	4611      	mov	r1, r2
 800515e:	4618      	mov	r0, r3
 8005160:	f003 fc2f 	bl	80089c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	015a      	lsls	r2, r3, #5
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	4413      	add	r3, r2
 800516c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005170:	461a      	mov	r2, r3
 8005172:	2340      	movs	r3, #64	; 0x40
 8005174:	6093      	str	r3, [r2, #8]
}
 8005176:	e254      	b.n	8005622 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	4413      	add	r3, r2
 8005180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f003 0308 	and.w	r3, r3, #8
 800518a:	2b08      	cmp	r3, #8
 800518c:	d11a      	bne.n	80051c4 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	4413      	add	r3, r2
 8005196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800519a:	461a      	mov	r2, r3
 800519c:	2308      	movs	r3, #8
 800519e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	212c      	movs	r1, #44	; 0x2c
 80051a6:	fb01 f303 	mul.w	r3, r1, r3
 80051aa:	4413      	add	r3, r2
 80051ac:	3361      	adds	r3, #97	; 0x61
 80051ae:	2205      	movs	r2, #5
 80051b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	b2d2      	uxtb	r2, r2
 80051ba:	4611      	mov	r1, r2
 80051bc:	4618      	mov	r0, r3
 80051be:	f003 fc00 	bl	80089c2 <USB_HC_Halt>
}
 80051c2:	e22e      	b.n	8005622 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	015a      	lsls	r2, r3, #5
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	4413      	add	r3, r2
 80051cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f003 0310 	and.w	r3, r3, #16
 80051d6:	2b10      	cmp	r3, #16
 80051d8:	d140      	bne.n	800525c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	212c      	movs	r1, #44	; 0x2c
 80051e0:	fb01 f303 	mul.w	r3, r1, r3
 80051e4:	4413      	add	r3, r2
 80051e6:	335c      	adds	r3, #92	; 0x5c
 80051e8:	2200      	movs	r2, #0
 80051ea:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	212c      	movs	r1, #44	; 0x2c
 80051f2:	fb01 f303 	mul.w	r3, r1, r3
 80051f6:	4413      	add	r3, r2
 80051f8:	3361      	adds	r3, #97	; 0x61
 80051fa:	2203      	movs	r2, #3
 80051fc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	212c      	movs	r1, #44	; 0x2c
 8005204:	fb01 f303 	mul.w	r3, r1, r3
 8005208:	4413      	add	r3, r2
 800520a:	333d      	adds	r3, #61	; 0x3d
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d112      	bne.n	8005238 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	212c      	movs	r1, #44	; 0x2c
 8005218:	fb01 f303 	mul.w	r3, r1, r3
 800521c:	4413      	add	r3, r2
 800521e:	333c      	adds	r3, #60	; 0x3c
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d108      	bne.n	8005238 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	212c      	movs	r1, #44	; 0x2c
 800522c:	fb01 f303 	mul.w	r3, r1, r3
 8005230:	4413      	add	r3, r2
 8005232:	333d      	adds	r3, #61	; 0x3d
 8005234:	2201      	movs	r2, #1
 8005236:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	b2d2      	uxtb	r2, r2
 8005240:	4611      	mov	r1, r2
 8005242:	4618      	mov	r0, r3
 8005244:	f003 fbbd 	bl	80089c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	4413      	add	r3, r2
 8005250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005254:	461a      	mov	r2, r3
 8005256:	2310      	movs	r3, #16
 8005258:	6093      	str	r3, [r2, #8]
}
 800525a:	e1e2      	b.n	8005622 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	4413      	add	r3, r2
 8005264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800526e:	2b80      	cmp	r3, #128	; 0x80
 8005270:	d164      	bne.n	800533c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d111      	bne.n	800529e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	212c      	movs	r1, #44	; 0x2c
 8005280:	fb01 f303 	mul.w	r3, r1, r3
 8005284:	4413      	add	r3, r2
 8005286:	3361      	adds	r3, #97	; 0x61
 8005288:	2206      	movs	r2, #6
 800528a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	b2d2      	uxtb	r2, r2
 8005294:	4611      	mov	r1, r2
 8005296:	4618      	mov	r0, r3
 8005298:	f003 fb93 	bl	80089c2 <USB_HC_Halt>
 800529c:	e044      	b.n	8005328 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	212c      	movs	r1, #44	; 0x2c
 80052a4:	fb01 f303 	mul.w	r3, r1, r3
 80052a8:	4413      	add	r3, r2
 80052aa:	335c      	adds	r3, #92	; 0x5c
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	1c5a      	adds	r2, r3, #1
 80052b0:	6879      	ldr	r1, [r7, #4]
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	202c      	movs	r0, #44	; 0x2c
 80052b6:	fb00 f303 	mul.w	r3, r0, r3
 80052ba:	440b      	add	r3, r1
 80052bc:	335c      	adds	r3, #92	; 0x5c
 80052be:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	212c      	movs	r1, #44	; 0x2c
 80052c6:	fb01 f303 	mul.w	r3, r1, r3
 80052ca:	4413      	add	r3, r2
 80052cc:	335c      	adds	r3, #92	; 0x5c
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d920      	bls.n	8005316 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	212c      	movs	r1, #44	; 0x2c
 80052da:	fb01 f303 	mul.w	r3, r1, r3
 80052de:	4413      	add	r3, r2
 80052e0:	335c      	adds	r3, #92	; 0x5c
 80052e2:	2200      	movs	r2, #0
 80052e4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	212c      	movs	r1, #44	; 0x2c
 80052ec:	fb01 f303 	mul.w	r3, r1, r3
 80052f0:	4413      	add	r3, r2
 80052f2:	3360      	adds	r3, #96	; 0x60
 80052f4:	2204      	movs	r2, #4
 80052f6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	b2d9      	uxtb	r1, r3
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	202c      	movs	r0, #44	; 0x2c
 8005302:	fb00 f303 	mul.w	r3, r0, r3
 8005306:	4413      	add	r3, r2
 8005308:	3360      	adds	r3, #96	; 0x60
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	461a      	mov	r2, r3
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f005 fdfa 	bl	800af08 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005314:	e008      	b.n	8005328 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	212c      	movs	r1, #44	; 0x2c
 800531c:	fb01 f303 	mul.w	r3, r1, r3
 8005320:	4413      	add	r3, r2
 8005322:	3360      	adds	r3, #96	; 0x60
 8005324:	2202      	movs	r2, #2
 8005326:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	4413      	add	r3, r2
 8005330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005334:	461a      	mov	r2, r3
 8005336:	2380      	movs	r3, #128	; 0x80
 8005338:	6093      	str	r3, [r2, #8]
}
 800533a:	e172      	b.n	8005622 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	4413      	add	r3, r2
 8005344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800534e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005352:	d11b      	bne.n	800538c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	212c      	movs	r1, #44	; 0x2c
 800535a:	fb01 f303 	mul.w	r3, r1, r3
 800535e:	4413      	add	r3, r2
 8005360:	3361      	adds	r3, #97	; 0x61
 8005362:	2208      	movs	r2, #8
 8005364:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	b2d2      	uxtb	r2, r2
 800536e:	4611      	mov	r1, r2
 8005370:	4618      	mov	r0, r3
 8005372:	f003 fb26 	bl	80089c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	4413      	add	r3, r2
 800537e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005382:	461a      	mov	r2, r3
 8005384:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005388:	6093      	str	r3, [r2, #8]
}
 800538a:	e14a      	b.n	8005622 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	4413      	add	r3, r2
 8005394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b02      	cmp	r3, #2
 80053a0:	f040 813f 	bne.w	8005622 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	212c      	movs	r1, #44	; 0x2c
 80053aa:	fb01 f303 	mul.w	r3, r1, r3
 80053ae:	4413      	add	r3, r2
 80053b0:	3361      	adds	r3, #97	; 0x61
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d17d      	bne.n	80054b4 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	212c      	movs	r1, #44	; 0x2c
 80053be:	fb01 f303 	mul.w	r3, r1, r3
 80053c2:	4413      	add	r3, r2
 80053c4:	3360      	adds	r3, #96	; 0x60
 80053c6:	2201      	movs	r2, #1
 80053c8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	212c      	movs	r1, #44	; 0x2c
 80053d0:	fb01 f303 	mul.w	r3, r1, r3
 80053d4:	4413      	add	r3, r2
 80053d6:	333f      	adds	r3, #63	; 0x3f
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d00a      	beq.n	80053f4 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	212c      	movs	r1, #44	; 0x2c
 80053e4:	fb01 f303 	mul.w	r3, r1, r3
 80053e8:	4413      	add	r3, r2
 80053ea:	333f      	adds	r3, #63	; 0x3f
 80053ec:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80053ee:	2b03      	cmp	r3, #3
 80053f0:	f040 8100 	bne.w	80055f4 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d113      	bne.n	8005424 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	212c      	movs	r1, #44	; 0x2c
 8005402:	fb01 f303 	mul.w	r3, r1, r3
 8005406:	4413      	add	r3, r2
 8005408:	3355      	adds	r3, #85	; 0x55
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	f083 0301 	eor.w	r3, r3, #1
 8005410:	b2d8      	uxtb	r0, r3
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	212c      	movs	r1, #44	; 0x2c
 8005418:	fb01 f303 	mul.w	r3, r1, r3
 800541c:	4413      	add	r3, r2
 800541e:	3355      	adds	r3, #85	; 0x55
 8005420:	4602      	mov	r2, r0
 8005422:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	2b01      	cmp	r3, #1
 800542a:	f040 80e3 	bne.w	80055f4 <HCD_HC_OUT_IRQHandler+0x69c>
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	212c      	movs	r1, #44	; 0x2c
 8005434:	fb01 f303 	mul.w	r3, r1, r3
 8005438:	4413      	add	r3, r2
 800543a:	334c      	adds	r3, #76	; 0x4c
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	f000 80d8 	beq.w	80055f4 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	212c      	movs	r1, #44	; 0x2c
 800544a:	fb01 f303 	mul.w	r3, r1, r3
 800544e:	4413      	add	r3, r2
 8005450:	334c      	adds	r3, #76	; 0x4c
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6879      	ldr	r1, [r7, #4]
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	202c      	movs	r0, #44	; 0x2c
 800545a:	fb00 f202 	mul.w	r2, r0, r2
 800545e:	440a      	add	r2, r1
 8005460:	3240      	adds	r2, #64	; 0x40
 8005462:	8812      	ldrh	r2, [r2, #0]
 8005464:	4413      	add	r3, r2
 8005466:	3b01      	subs	r3, #1
 8005468:	6879      	ldr	r1, [r7, #4]
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	202c      	movs	r0, #44	; 0x2c
 800546e:	fb00 f202 	mul.w	r2, r0, r2
 8005472:	440a      	add	r2, r1
 8005474:	3240      	adds	r2, #64	; 0x40
 8005476:	8812      	ldrh	r2, [r2, #0]
 8005478:	fbb3 f3f2 	udiv	r3, r3, r2
 800547c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 80b5 	beq.w	80055f4 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	212c      	movs	r1, #44	; 0x2c
 8005490:	fb01 f303 	mul.w	r3, r1, r3
 8005494:	4413      	add	r3, r2
 8005496:	3355      	adds	r3, #85	; 0x55
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	f083 0301 	eor.w	r3, r3, #1
 800549e:	b2d8      	uxtb	r0, r3
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	212c      	movs	r1, #44	; 0x2c
 80054a6:	fb01 f303 	mul.w	r3, r1, r3
 80054aa:	4413      	add	r3, r2
 80054ac:	3355      	adds	r3, #85	; 0x55
 80054ae:	4602      	mov	r2, r0
 80054b0:	701a      	strb	r2, [r3, #0]
 80054b2:	e09f      	b.n	80055f4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	212c      	movs	r1, #44	; 0x2c
 80054ba:	fb01 f303 	mul.w	r3, r1, r3
 80054be:	4413      	add	r3, r2
 80054c0:	3361      	adds	r3, #97	; 0x61
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	2b03      	cmp	r3, #3
 80054c6:	d109      	bne.n	80054dc <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	212c      	movs	r1, #44	; 0x2c
 80054ce:	fb01 f303 	mul.w	r3, r1, r3
 80054d2:	4413      	add	r3, r2
 80054d4:	3360      	adds	r3, #96	; 0x60
 80054d6:	2202      	movs	r2, #2
 80054d8:	701a      	strb	r2, [r3, #0]
 80054da:	e08b      	b.n	80055f4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	212c      	movs	r1, #44	; 0x2c
 80054e2:	fb01 f303 	mul.w	r3, r1, r3
 80054e6:	4413      	add	r3, r2
 80054e8:	3361      	adds	r3, #97	; 0x61
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	2b04      	cmp	r3, #4
 80054ee:	d109      	bne.n	8005504 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	212c      	movs	r1, #44	; 0x2c
 80054f6:	fb01 f303 	mul.w	r3, r1, r3
 80054fa:	4413      	add	r3, r2
 80054fc:	3360      	adds	r3, #96	; 0x60
 80054fe:	2202      	movs	r2, #2
 8005500:	701a      	strb	r2, [r3, #0]
 8005502:	e077      	b.n	80055f4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	212c      	movs	r1, #44	; 0x2c
 800550a:	fb01 f303 	mul.w	r3, r1, r3
 800550e:	4413      	add	r3, r2
 8005510:	3361      	adds	r3, #97	; 0x61
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	2b05      	cmp	r3, #5
 8005516:	d109      	bne.n	800552c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	212c      	movs	r1, #44	; 0x2c
 800551e:	fb01 f303 	mul.w	r3, r1, r3
 8005522:	4413      	add	r3, r2
 8005524:	3360      	adds	r3, #96	; 0x60
 8005526:	2205      	movs	r2, #5
 8005528:	701a      	strb	r2, [r3, #0]
 800552a:	e063      	b.n	80055f4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	212c      	movs	r1, #44	; 0x2c
 8005532:	fb01 f303 	mul.w	r3, r1, r3
 8005536:	4413      	add	r3, r2
 8005538:	3361      	adds	r3, #97	; 0x61
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	2b06      	cmp	r3, #6
 800553e:	d009      	beq.n	8005554 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	212c      	movs	r1, #44	; 0x2c
 8005546:	fb01 f303 	mul.w	r3, r1, r3
 800554a:	4413      	add	r3, r2
 800554c:	3361      	adds	r3, #97	; 0x61
 800554e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005550:	2b08      	cmp	r3, #8
 8005552:	d14f      	bne.n	80055f4 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	212c      	movs	r1, #44	; 0x2c
 800555a:	fb01 f303 	mul.w	r3, r1, r3
 800555e:	4413      	add	r3, r2
 8005560:	335c      	adds	r3, #92	; 0x5c
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	1c5a      	adds	r2, r3, #1
 8005566:	6879      	ldr	r1, [r7, #4]
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	202c      	movs	r0, #44	; 0x2c
 800556c:	fb00 f303 	mul.w	r3, r0, r3
 8005570:	440b      	add	r3, r1
 8005572:	335c      	adds	r3, #92	; 0x5c
 8005574:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	212c      	movs	r1, #44	; 0x2c
 800557c:	fb01 f303 	mul.w	r3, r1, r3
 8005580:	4413      	add	r3, r2
 8005582:	335c      	adds	r3, #92	; 0x5c
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2b02      	cmp	r3, #2
 8005588:	d912      	bls.n	80055b0 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	212c      	movs	r1, #44	; 0x2c
 8005590:	fb01 f303 	mul.w	r3, r1, r3
 8005594:	4413      	add	r3, r2
 8005596:	335c      	adds	r3, #92	; 0x5c
 8005598:	2200      	movs	r2, #0
 800559a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	212c      	movs	r1, #44	; 0x2c
 80055a2:	fb01 f303 	mul.w	r3, r1, r3
 80055a6:	4413      	add	r3, r2
 80055a8:	3360      	adds	r3, #96	; 0x60
 80055aa:	2204      	movs	r2, #4
 80055ac:	701a      	strb	r2, [r3, #0]
 80055ae:	e021      	b.n	80055f4 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	212c      	movs	r1, #44	; 0x2c
 80055b6:	fb01 f303 	mul.w	r3, r1, r3
 80055ba:	4413      	add	r3, r2
 80055bc:	3360      	adds	r3, #96	; 0x60
 80055be:	2202      	movs	r2, #2
 80055c0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	015a      	lsls	r2, r3, #5
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	4413      	add	r3, r2
 80055ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055d8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055e0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	015a      	lsls	r2, r3, #5
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ee:	461a      	mov	r2, r3
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005600:	461a      	mov	r2, r3
 8005602:	2302      	movs	r3, #2
 8005604:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	b2d9      	uxtb	r1, r3
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	202c      	movs	r0, #44	; 0x2c
 8005610:	fb00 f303 	mul.w	r3, r0, r3
 8005614:	4413      	add	r3, r2
 8005616:	3360      	adds	r3, #96	; 0x60
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	461a      	mov	r2, r3
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f005 fc73 	bl	800af08 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005622:	bf00      	nop
 8005624:	3720      	adds	r7, #32
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b08a      	sub	sp, #40	; 0x28
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	f003 030f 	and.w	r3, r3, #15
 800564a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	0c5b      	lsrs	r3, r3, #17
 8005650:	f003 030f 	and.w	r3, r3, #15
 8005654:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	091b      	lsrs	r3, r3, #4
 800565a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800565e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	2b02      	cmp	r3, #2
 8005664:	d004      	beq.n	8005670 <HCD_RXQLVL_IRQHandler+0x46>
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	2b05      	cmp	r3, #5
 800566a:	f000 80a9 	beq.w	80057c0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800566e:	e0aa      	b.n	80057c6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	2b00      	cmp	r3, #0
 8005674:	f000 80a6 	beq.w	80057c4 <HCD_RXQLVL_IRQHandler+0x19a>
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	212c      	movs	r1, #44	; 0x2c
 800567e:	fb01 f303 	mul.w	r3, r1, r3
 8005682:	4413      	add	r3, r2
 8005684:	3344      	adds	r3, #68	; 0x44
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	f000 809b 	beq.w	80057c4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	212c      	movs	r1, #44	; 0x2c
 8005694:	fb01 f303 	mul.w	r3, r1, r3
 8005698:	4413      	add	r3, r2
 800569a:	3350      	adds	r3, #80	; 0x50
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	441a      	add	r2, r3
 80056a2:	6879      	ldr	r1, [r7, #4]
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	202c      	movs	r0, #44	; 0x2c
 80056a8:	fb00 f303 	mul.w	r3, r0, r3
 80056ac:	440b      	add	r3, r1
 80056ae:	334c      	adds	r3, #76	; 0x4c
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d87a      	bhi.n	80057ac <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6818      	ldr	r0, [r3, #0]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	212c      	movs	r1, #44	; 0x2c
 80056c0:	fb01 f303 	mul.w	r3, r1, r3
 80056c4:	4413      	add	r3, r2
 80056c6:	3344      	adds	r3, #68	; 0x44
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	b292      	uxth	r2, r2
 80056ce:	4619      	mov	r1, r3
 80056d0:	f002 fcce 	bl	8008070 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	212c      	movs	r1, #44	; 0x2c
 80056da:	fb01 f303 	mul.w	r3, r1, r3
 80056de:	4413      	add	r3, r2
 80056e0:	3344      	adds	r3, #68	; 0x44
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	441a      	add	r2, r3
 80056e8:	6879      	ldr	r1, [r7, #4]
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	202c      	movs	r0, #44	; 0x2c
 80056ee:	fb00 f303 	mul.w	r3, r0, r3
 80056f2:	440b      	add	r3, r1
 80056f4:	3344      	adds	r3, #68	; 0x44
 80056f6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	212c      	movs	r1, #44	; 0x2c
 80056fe:	fb01 f303 	mul.w	r3, r1, r3
 8005702:	4413      	add	r3, r2
 8005704:	3350      	adds	r3, #80	; 0x50
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	441a      	add	r2, r3
 800570c:	6879      	ldr	r1, [r7, #4]
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	202c      	movs	r0, #44	; 0x2c
 8005712:	fb00 f303 	mul.w	r3, r0, r3
 8005716:	440b      	add	r3, r1
 8005718:	3350      	adds	r3, #80	; 0x50
 800571a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	015a      	lsls	r2, r3, #5
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	4413      	add	r3, r2
 8005724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	0cdb      	lsrs	r3, r3, #19
 800572c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005730:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	212c      	movs	r1, #44	; 0x2c
 8005738:	fb01 f303 	mul.w	r3, r1, r3
 800573c:	4413      	add	r3, r2
 800573e:	3340      	adds	r3, #64	; 0x40
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	461a      	mov	r2, r3
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	4293      	cmp	r3, r2
 8005748:	d13c      	bne.n	80057c4 <HCD_RXQLVL_IRQHandler+0x19a>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d039      	beq.n	80057c4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	015a      	lsls	r2, r3, #5
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	4413      	add	r3, r2
 8005758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005766:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800576e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	4413      	add	r3, r2
 8005778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800577c:	461a      	mov	r2, r3
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	212c      	movs	r1, #44	; 0x2c
 8005788:	fb01 f303 	mul.w	r3, r1, r3
 800578c:	4413      	add	r3, r2
 800578e:	3354      	adds	r3, #84	; 0x54
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	f083 0301 	eor.w	r3, r3, #1
 8005796:	b2d8      	uxtb	r0, r3
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	212c      	movs	r1, #44	; 0x2c
 800579e:	fb01 f303 	mul.w	r3, r1, r3
 80057a2:	4413      	add	r3, r2
 80057a4:	3354      	adds	r3, #84	; 0x54
 80057a6:	4602      	mov	r2, r0
 80057a8:	701a      	strb	r2, [r3, #0]
      break;
 80057aa:	e00b      	b.n	80057c4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	212c      	movs	r1, #44	; 0x2c
 80057b2:	fb01 f303 	mul.w	r3, r1, r3
 80057b6:	4413      	add	r3, r2
 80057b8:	3360      	adds	r3, #96	; 0x60
 80057ba:	2204      	movs	r2, #4
 80057bc:	701a      	strb	r2, [r3, #0]
      break;
 80057be:	e001      	b.n	80057c4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80057c0:	bf00      	nop
 80057c2:	e000      	b.n	80057c6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80057c4:	bf00      	nop
  }
}
 80057c6:	bf00      	nop
 80057c8:	3728      	adds	r7, #40	; 0x28
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b086      	sub	sp, #24
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80057fa:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b02      	cmp	r3, #2
 8005804:	d10b      	bne.n	800581e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	2b01      	cmp	r3, #1
 800580e:	d102      	bne.n	8005816 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f005 fb5d 	bl	800aed0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	f043 0302 	orr.w	r3, r3, #2
 800581c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f003 0308 	and.w	r3, r3, #8
 8005824:	2b08      	cmp	r3, #8
 8005826:	d132      	bne.n	800588e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	f043 0308 	orr.w	r3, r3, #8
 800582e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f003 0304 	and.w	r3, r3, #4
 8005836:	2b04      	cmp	r3, #4
 8005838:	d126      	bne.n	8005888 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	2b02      	cmp	r3, #2
 8005840:	d113      	bne.n	800586a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005848:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800584c:	d106      	bne.n	800585c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2102      	movs	r1, #2
 8005854:	4618      	mov	r0, r3
 8005856:	f002 fd79 	bl	800834c <USB_InitFSLSPClkSel>
 800585a:	e011      	b.n	8005880 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2101      	movs	r1, #1
 8005862:	4618      	mov	r0, r3
 8005864:	f002 fd72 	bl	800834c <USB_InitFSLSPClkSel>
 8005868:	e00a      	b.n	8005880 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d106      	bne.n	8005880 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005878:	461a      	mov	r2, r3
 800587a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800587e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f005 fb4f 	bl	800af24 <HAL_HCD_PortEnabled_Callback>
 8005886:	e002      	b.n	800588e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f005 fb59 	bl	800af40 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f003 0320 	and.w	r3, r3, #32
 8005894:	2b20      	cmp	r3, #32
 8005896:	d103      	bne.n	80058a0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	f043 0320 	orr.w	r3, r3, #32
 800589e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80058a6:	461a      	mov	r2, r3
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	6013      	str	r3, [r2, #0]
}
 80058ac:	bf00      	nop
 80058ae:	3718      	adds	r7, #24
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e12b      	b.n	8005b1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d106      	bne.n	80058e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f7fc fb04 	bl	8001ee8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2224      	movs	r2, #36	; 0x24
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f022 0201 	bic.w	r2, r2, #1
 80058f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005906:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005916:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005918:	f000 fd80 	bl	800641c <HAL_RCC_GetPCLK1Freq>
 800591c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	4a81      	ldr	r2, [pc, #516]	; (8005b28 <HAL_I2C_Init+0x274>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d807      	bhi.n	8005938 <HAL_I2C_Init+0x84>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4a80      	ldr	r2, [pc, #512]	; (8005b2c <HAL_I2C_Init+0x278>)
 800592c:	4293      	cmp	r3, r2
 800592e:	bf94      	ite	ls
 8005930:	2301      	movls	r3, #1
 8005932:	2300      	movhi	r3, #0
 8005934:	b2db      	uxtb	r3, r3
 8005936:	e006      	b.n	8005946 <HAL_I2C_Init+0x92>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4a7d      	ldr	r2, [pc, #500]	; (8005b30 <HAL_I2C_Init+0x27c>)
 800593c:	4293      	cmp	r3, r2
 800593e:	bf94      	ite	ls
 8005940:	2301      	movls	r3, #1
 8005942:	2300      	movhi	r3, #0
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e0e7      	b.n	8005b1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	4a78      	ldr	r2, [pc, #480]	; (8005b34 <HAL_I2C_Init+0x280>)
 8005952:	fba2 2303 	umull	r2, r3, r2, r3
 8005956:	0c9b      	lsrs	r3, r3, #18
 8005958:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	430a      	orrs	r2, r1
 800596c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6a1b      	ldr	r3, [r3, #32]
 8005974:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	4a6a      	ldr	r2, [pc, #424]	; (8005b28 <HAL_I2C_Init+0x274>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d802      	bhi.n	8005988 <HAL_I2C_Init+0xd4>
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	3301      	adds	r3, #1
 8005986:	e009      	b.n	800599c <HAL_I2C_Init+0xe8>
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800598e:	fb02 f303 	mul.w	r3, r2, r3
 8005992:	4a69      	ldr	r2, [pc, #420]	; (8005b38 <HAL_I2C_Init+0x284>)
 8005994:	fba2 2303 	umull	r2, r3, r2, r3
 8005998:	099b      	lsrs	r3, r3, #6
 800599a:	3301      	adds	r3, #1
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	6812      	ldr	r2, [r2, #0]
 80059a0:	430b      	orrs	r3, r1
 80059a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80059ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	495c      	ldr	r1, [pc, #368]	; (8005b28 <HAL_I2C_Init+0x274>)
 80059b8:	428b      	cmp	r3, r1
 80059ba:	d819      	bhi.n	80059f0 <HAL_I2C_Init+0x13c>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	1e59      	subs	r1, r3, #1
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	005b      	lsls	r3, r3, #1
 80059c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80059ca:	1c59      	adds	r1, r3, #1
 80059cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80059d0:	400b      	ands	r3, r1
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00a      	beq.n	80059ec <HAL_I2C_Init+0x138>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	1e59      	subs	r1, r3, #1
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80059e4:	3301      	adds	r3, #1
 80059e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059ea:	e051      	b.n	8005a90 <HAL_I2C_Init+0x1dc>
 80059ec:	2304      	movs	r3, #4
 80059ee:	e04f      	b.n	8005a90 <HAL_I2C_Init+0x1dc>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d111      	bne.n	8005a1c <HAL_I2C_Init+0x168>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	1e58      	subs	r0, r3, #1
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6859      	ldr	r1, [r3, #4]
 8005a00:	460b      	mov	r3, r1
 8005a02:	005b      	lsls	r3, r3, #1
 8005a04:	440b      	add	r3, r1
 8005a06:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	bf0c      	ite	eq
 8005a14:	2301      	moveq	r3, #1
 8005a16:	2300      	movne	r3, #0
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	e012      	b.n	8005a42 <HAL_I2C_Init+0x18e>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	1e58      	subs	r0, r3, #1
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6859      	ldr	r1, [r3, #4]
 8005a24:	460b      	mov	r3, r1
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	440b      	add	r3, r1
 8005a2a:	0099      	lsls	r1, r3, #2
 8005a2c:	440b      	add	r3, r1
 8005a2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a32:	3301      	adds	r3, #1
 8005a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	bf0c      	ite	eq
 8005a3c:	2301      	moveq	r3, #1
 8005a3e:	2300      	movne	r3, #0
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d001      	beq.n	8005a4a <HAL_I2C_Init+0x196>
 8005a46:	2301      	movs	r3, #1
 8005a48:	e022      	b.n	8005a90 <HAL_I2C_Init+0x1dc>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10e      	bne.n	8005a70 <HAL_I2C_Init+0x1bc>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	1e58      	subs	r0, r3, #1
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6859      	ldr	r1, [r3, #4]
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	005b      	lsls	r3, r3, #1
 8005a5e:	440b      	add	r3, r1
 8005a60:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a64:	3301      	adds	r3, #1
 8005a66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a6e:	e00f      	b.n	8005a90 <HAL_I2C_Init+0x1dc>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	1e58      	subs	r0, r3, #1
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6859      	ldr	r1, [r3, #4]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	440b      	add	r3, r1
 8005a7e:	0099      	lsls	r1, r3, #2
 8005a80:	440b      	add	r3, r1
 8005a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a86:	3301      	adds	r3, #1
 8005a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a90:	6879      	ldr	r1, [r7, #4]
 8005a92:	6809      	ldr	r1, [r1, #0]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	69da      	ldr	r2, [r3, #28]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005abe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	6911      	ldr	r1, [r2, #16]
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	68d2      	ldr	r2, [r2, #12]
 8005aca:	4311      	orrs	r1, r2
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	6812      	ldr	r2, [r2, #0]
 8005ad0:	430b      	orrs	r3, r1
 8005ad2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	695a      	ldr	r2, [r3, #20]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f042 0201 	orr.w	r2, r2, #1
 8005afe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2220      	movs	r2, #32
 8005b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	000186a0 	.word	0x000186a0
 8005b2c:	001e847f 	.word	0x001e847f
 8005b30:	003d08ff 	.word	0x003d08ff
 8005b34:	431bde83 	.word	0x431bde83
 8005b38:	10624dd3 	.word	0x10624dd3

08005b3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e267      	b.n	800601e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d075      	beq.n	8005c46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b5a:	4b88      	ldr	r3, [pc, #544]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f003 030c 	and.w	r3, r3, #12
 8005b62:	2b04      	cmp	r3, #4
 8005b64:	d00c      	beq.n	8005b80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b66:	4b85      	ldr	r3, [pc, #532]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b6e:	2b08      	cmp	r3, #8
 8005b70:	d112      	bne.n	8005b98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b72:	4b82      	ldr	r3, [pc, #520]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b7e:	d10b      	bne.n	8005b98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b80:	4b7e      	ldr	r3, [pc, #504]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d05b      	beq.n	8005c44 <HAL_RCC_OscConfig+0x108>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d157      	bne.n	8005c44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e242      	b.n	800601e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ba0:	d106      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x74>
 8005ba2:	4b76      	ldr	r3, [pc, #472]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a75      	ldr	r2, [pc, #468]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bac:	6013      	str	r3, [r2, #0]
 8005bae:	e01d      	b.n	8005bec <HAL_RCC_OscConfig+0xb0>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bb8:	d10c      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x98>
 8005bba:	4b70      	ldr	r3, [pc, #448]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a6f      	ldr	r2, [pc, #444]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bc4:	6013      	str	r3, [r2, #0]
 8005bc6:	4b6d      	ldr	r3, [pc, #436]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a6c      	ldr	r2, [pc, #432]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bd0:	6013      	str	r3, [r2, #0]
 8005bd2:	e00b      	b.n	8005bec <HAL_RCC_OscConfig+0xb0>
 8005bd4:	4b69      	ldr	r3, [pc, #420]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a68      	ldr	r2, [pc, #416]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bde:	6013      	str	r3, [r2, #0]
 8005be0:	4b66      	ldr	r3, [pc, #408]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a65      	ldr	r2, [pc, #404]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d013      	beq.n	8005c1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bf4:	f7fc fcb0 	bl	8002558 <HAL_GetTick>
 8005bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bfa:	e008      	b.n	8005c0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bfc:	f7fc fcac 	bl	8002558 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	2b64      	cmp	r3, #100	; 0x64
 8005c08:	d901      	bls.n	8005c0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e207      	b.n	800601e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c0e:	4b5b      	ldr	r3, [pc, #364]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d0f0      	beq.n	8005bfc <HAL_RCC_OscConfig+0xc0>
 8005c1a:	e014      	b.n	8005c46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c1c:	f7fc fc9c 	bl	8002558 <HAL_GetTick>
 8005c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c22:	e008      	b.n	8005c36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c24:	f7fc fc98 	bl	8002558 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	2b64      	cmp	r3, #100	; 0x64
 8005c30:	d901      	bls.n	8005c36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e1f3      	b.n	800601e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c36:	4b51      	ldr	r3, [pc, #324]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1f0      	bne.n	8005c24 <HAL_RCC_OscConfig+0xe8>
 8005c42:	e000      	b.n	8005c46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d063      	beq.n	8005d1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c52:	4b4a      	ldr	r3, [pc, #296]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f003 030c 	and.w	r3, r3, #12
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00b      	beq.n	8005c76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c5e:	4b47      	ldr	r3, [pc, #284]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c66:	2b08      	cmp	r3, #8
 8005c68:	d11c      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c6a:	4b44      	ldr	r3, [pc, #272]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d116      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c76:	4b41      	ldr	r3, [pc, #260]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d005      	beq.n	8005c8e <HAL_RCC_OscConfig+0x152>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d001      	beq.n	8005c8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e1c7      	b.n	800601e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c8e:	4b3b      	ldr	r3, [pc, #236]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	00db      	lsls	r3, r3, #3
 8005c9c:	4937      	ldr	r1, [pc, #220]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ca2:	e03a      	b.n	8005d1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d020      	beq.n	8005cee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cac:	4b34      	ldr	r3, [pc, #208]	; (8005d80 <HAL_RCC_OscConfig+0x244>)
 8005cae:	2201      	movs	r2, #1
 8005cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb2:	f7fc fc51 	bl	8002558 <HAL_GetTick>
 8005cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cb8:	e008      	b.n	8005ccc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cba:	f7fc fc4d 	bl	8002558 <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d901      	bls.n	8005ccc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e1a8      	b.n	800601e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ccc:	4b2b      	ldr	r3, [pc, #172]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d0f0      	beq.n	8005cba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cd8:	4b28      	ldr	r3, [pc, #160]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	00db      	lsls	r3, r3, #3
 8005ce6:	4925      	ldr	r1, [pc, #148]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	600b      	str	r3, [r1, #0]
 8005cec:	e015      	b.n	8005d1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cee:	4b24      	ldr	r3, [pc, #144]	; (8005d80 <HAL_RCC_OscConfig+0x244>)
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cf4:	f7fc fc30 	bl	8002558 <HAL_GetTick>
 8005cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cfa:	e008      	b.n	8005d0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cfc:	f7fc fc2c 	bl	8002558 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d901      	bls.n	8005d0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e187      	b.n	800601e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d0e:	4b1b      	ldr	r3, [pc, #108]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0302 	and.w	r3, r3, #2
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1f0      	bne.n	8005cfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0308 	and.w	r3, r3, #8
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d036      	beq.n	8005d94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d016      	beq.n	8005d5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d2e:	4b15      	ldr	r3, [pc, #84]	; (8005d84 <HAL_RCC_OscConfig+0x248>)
 8005d30:	2201      	movs	r2, #1
 8005d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d34:	f7fc fc10 	bl	8002558 <HAL_GetTick>
 8005d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d3a:	e008      	b.n	8005d4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d3c:	f7fc fc0c 	bl	8002558 <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d901      	bls.n	8005d4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e167      	b.n	800601e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d4e:	4b0b      	ldr	r3, [pc, #44]	; (8005d7c <HAL_RCC_OscConfig+0x240>)
 8005d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d0f0      	beq.n	8005d3c <HAL_RCC_OscConfig+0x200>
 8005d5a:	e01b      	b.n	8005d94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d5c:	4b09      	ldr	r3, [pc, #36]	; (8005d84 <HAL_RCC_OscConfig+0x248>)
 8005d5e:	2200      	movs	r2, #0
 8005d60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d62:	f7fc fbf9 	bl	8002558 <HAL_GetTick>
 8005d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d68:	e00e      	b.n	8005d88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d6a:	f7fc fbf5 	bl	8002558 <HAL_GetTick>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d907      	bls.n	8005d88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e150      	b.n	800601e <HAL_RCC_OscConfig+0x4e2>
 8005d7c:	40023800 	.word	0x40023800
 8005d80:	42470000 	.word	0x42470000
 8005d84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d88:	4b88      	ldr	r3, [pc, #544]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d8c:	f003 0302 	and.w	r3, r3, #2
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1ea      	bne.n	8005d6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0304 	and.w	r3, r3, #4
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 8097 	beq.w	8005ed0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005da2:	2300      	movs	r3, #0
 8005da4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005da6:	4b81      	ldr	r3, [pc, #516]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10f      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005db2:	2300      	movs	r3, #0
 8005db4:	60bb      	str	r3, [r7, #8]
 8005db6:	4b7d      	ldr	r3, [pc, #500]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dba:	4a7c      	ldr	r2, [pc, #496]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8005dc2:	4b7a      	ldr	r3, [pc, #488]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dca:	60bb      	str	r3, [r7, #8]
 8005dcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dd2:	4b77      	ldr	r3, [pc, #476]	; (8005fb0 <HAL_RCC_OscConfig+0x474>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d118      	bne.n	8005e10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005dde:	4b74      	ldr	r3, [pc, #464]	; (8005fb0 <HAL_RCC_OscConfig+0x474>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a73      	ldr	r2, [pc, #460]	; (8005fb0 <HAL_RCC_OscConfig+0x474>)
 8005de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005de8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dea:	f7fc fbb5 	bl	8002558 <HAL_GetTick>
 8005dee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005df0:	e008      	b.n	8005e04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005df2:	f7fc fbb1 	bl	8002558 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d901      	bls.n	8005e04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e10c      	b.n	800601e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e04:	4b6a      	ldr	r3, [pc, #424]	; (8005fb0 <HAL_RCC_OscConfig+0x474>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d0f0      	beq.n	8005df2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d106      	bne.n	8005e26 <HAL_RCC_OscConfig+0x2ea>
 8005e18:	4b64      	ldr	r3, [pc, #400]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1c:	4a63      	ldr	r2, [pc, #396]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005e1e:	f043 0301 	orr.w	r3, r3, #1
 8005e22:	6713      	str	r3, [r2, #112]	; 0x70
 8005e24:	e01c      	b.n	8005e60 <HAL_RCC_OscConfig+0x324>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	2b05      	cmp	r3, #5
 8005e2c:	d10c      	bne.n	8005e48 <HAL_RCC_OscConfig+0x30c>
 8005e2e:	4b5f      	ldr	r3, [pc, #380]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e32:	4a5e      	ldr	r2, [pc, #376]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005e34:	f043 0304 	orr.w	r3, r3, #4
 8005e38:	6713      	str	r3, [r2, #112]	; 0x70
 8005e3a:	4b5c      	ldr	r3, [pc, #368]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e3e:	4a5b      	ldr	r2, [pc, #364]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005e40:	f043 0301 	orr.w	r3, r3, #1
 8005e44:	6713      	str	r3, [r2, #112]	; 0x70
 8005e46:	e00b      	b.n	8005e60 <HAL_RCC_OscConfig+0x324>
 8005e48:	4b58      	ldr	r3, [pc, #352]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4c:	4a57      	ldr	r2, [pc, #348]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005e4e:	f023 0301 	bic.w	r3, r3, #1
 8005e52:	6713      	str	r3, [r2, #112]	; 0x70
 8005e54:	4b55      	ldr	r3, [pc, #340]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e58:	4a54      	ldr	r2, [pc, #336]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005e5a:	f023 0304 	bic.w	r3, r3, #4
 8005e5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d015      	beq.n	8005e94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e68:	f7fc fb76 	bl	8002558 <HAL_GetTick>
 8005e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e6e:	e00a      	b.n	8005e86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e70:	f7fc fb72 	bl	8002558 <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d901      	bls.n	8005e86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e0cb      	b.n	800601e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e86:	4b49      	ldr	r3, [pc, #292]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d0ee      	beq.n	8005e70 <HAL_RCC_OscConfig+0x334>
 8005e92:	e014      	b.n	8005ebe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e94:	f7fc fb60 	bl	8002558 <HAL_GetTick>
 8005e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e9a:	e00a      	b.n	8005eb2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e9c:	f7fc fb5c 	bl	8002558 <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e0b5      	b.n	800601e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005eb2:	4b3e      	ldr	r3, [pc, #248]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1ee      	bne.n	8005e9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ebe:	7dfb      	ldrb	r3, [r7, #23]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d105      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ec4:	4b39      	ldr	r3, [pc, #228]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec8:	4a38      	ldr	r2, [pc, #224]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005eca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ece:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f000 80a1 	beq.w	800601c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005eda:	4b34      	ldr	r3, [pc, #208]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f003 030c 	and.w	r3, r3, #12
 8005ee2:	2b08      	cmp	r3, #8
 8005ee4:	d05c      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d141      	bne.n	8005f72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eee:	4b31      	ldr	r3, [pc, #196]	; (8005fb4 <HAL_RCC_OscConfig+0x478>)
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ef4:	f7fc fb30 	bl	8002558 <HAL_GetTick>
 8005ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005efa:	e008      	b.n	8005f0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005efc:	f7fc fb2c 	bl	8002558 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d901      	bls.n	8005f0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e087      	b.n	800601e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f0e:	4b27      	ldr	r3, [pc, #156]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1f0      	bne.n	8005efc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	69da      	ldr	r2, [r3, #28]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	431a      	orrs	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f28:	019b      	lsls	r3, r3, #6
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f30:	085b      	lsrs	r3, r3, #1
 8005f32:	3b01      	subs	r3, #1
 8005f34:	041b      	lsls	r3, r3, #16
 8005f36:	431a      	orrs	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3c:	061b      	lsls	r3, r3, #24
 8005f3e:	491b      	ldr	r1, [pc, #108]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005f40:	4313      	orrs	r3, r2
 8005f42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f44:	4b1b      	ldr	r3, [pc, #108]	; (8005fb4 <HAL_RCC_OscConfig+0x478>)
 8005f46:	2201      	movs	r2, #1
 8005f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f4a:	f7fc fb05 	bl	8002558 <HAL_GetTick>
 8005f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f50:	e008      	b.n	8005f64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f52:	f7fc fb01 	bl	8002558 <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d901      	bls.n	8005f64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e05c      	b.n	800601e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f64:	4b11      	ldr	r3, [pc, #68]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d0f0      	beq.n	8005f52 <HAL_RCC_OscConfig+0x416>
 8005f70:	e054      	b.n	800601c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f72:	4b10      	ldr	r3, [pc, #64]	; (8005fb4 <HAL_RCC_OscConfig+0x478>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f78:	f7fc faee 	bl	8002558 <HAL_GetTick>
 8005f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f7e:	e008      	b.n	8005f92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f80:	f7fc faea 	bl	8002558 <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d901      	bls.n	8005f92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e045      	b.n	800601e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f92:	4b06      	ldr	r3, [pc, #24]	; (8005fac <HAL_RCC_OscConfig+0x470>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1f0      	bne.n	8005f80 <HAL_RCC_OscConfig+0x444>
 8005f9e:	e03d      	b.n	800601c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d107      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e038      	b.n	800601e <HAL_RCC_OscConfig+0x4e2>
 8005fac:	40023800 	.word	0x40023800
 8005fb0:	40007000 	.word	0x40007000
 8005fb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005fb8:	4b1b      	ldr	r3, [pc, #108]	; (8006028 <HAL_RCC_OscConfig+0x4ec>)
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d028      	beq.n	8006018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d121      	bne.n	8006018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d11a      	bne.n	8006018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005fe8:	4013      	ands	r3, r2
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005fee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d111      	bne.n	8006018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffe:	085b      	lsrs	r3, r3, #1
 8006000:	3b01      	subs	r3, #1
 8006002:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006004:	429a      	cmp	r2, r3
 8006006:	d107      	bne.n	8006018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006012:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006014:	429a      	cmp	r2, r3
 8006016:	d001      	beq.n	800601c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e000      	b.n	800601e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3718      	adds	r7, #24
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	40023800 	.word	0x40023800

0800602c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d101      	bne.n	8006040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e0cc      	b.n	80061da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006040:	4b68      	ldr	r3, [pc, #416]	; (80061e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0307 	and.w	r3, r3, #7
 8006048:	683a      	ldr	r2, [r7, #0]
 800604a:	429a      	cmp	r2, r3
 800604c:	d90c      	bls.n	8006068 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800604e:	4b65      	ldr	r3, [pc, #404]	; (80061e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006050:	683a      	ldr	r2, [r7, #0]
 8006052:	b2d2      	uxtb	r2, r2
 8006054:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006056:	4b63      	ldr	r3, [pc, #396]	; (80061e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0307 	and.w	r3, r3, #7
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	429a      	cmp	r2, r3
 8006062:	d001      	beq.n	8006068 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e0b8      	b.n	80061da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0302 	and.w	r3, r3, #2
 8006070:	2b00      	cmp	r3, #0
 8006072:	d020      	beq.n	80060b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0304 	and.w	r3, r3, #4
 800607c:	2b00      	cmp	r3, #0
 800607e:	d005      	beq.n	800608c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006080:	4b59      	ldr	r3, [pc, #356]	; (80061e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	4a58      	ldr	r2, [pc, #352]	; (80061e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006086:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800608a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0308 	and.w	r3, r3, #8
 8006094:	2b00      	cmp	r3, #0
 8006096:	d005      	beq.n	80060a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006098:	4b53      	ldr	r3, [pc, #332]	; (80061e8 <HAL_RCC_ClockConfig+0x1bc>)
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	4a52      	ldr	r2, [pc, #328]	; (80061e8 <HAL_RCC_ClockConfig+0x1bc>)
 800609e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80060a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060a4:	4b50      	ldr	r3, [pc, #320]	; (80061e8 <HAL_RCC_ClockConfig+0x1bc>)
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	494d      	ldr	r1, [pc, #308]	; (80061e8 <HAL_RCC_ClockConfig+0x1bc>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d044      	beq.n	800614c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d107      	bne.n	80060da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ca:	4b47      	ldr	r3, [pc, #284]	; (80061e8 <HAL_RCC_ClockConfig+0x1bc>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d119      	bne.n	800610a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e07f      	b.n	80061da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d003      	beq.n	80060ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060e6:	2b03      	cmp	r3, #3
 80060e8:	d107      	bne.n	80060fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060ea:	4b3f      	ldr	r3, [pc, #252]	; (80061e8 <HAL_RCC_ClockConfig+0x1bc>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d109      	bne.n	800610a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e06f      	b.n	80061da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060fa:	4b3b      	ldr	r3, [pc, #236]	; (80061e8 <HAL_RCC_ClockConfig+0x1bc>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0302 	and.w	r3, r3, #2
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e067      	b.n	80061da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800610a:	4b37      	ldr	r3, [pc, #220]	; (80061e8 <HAL_RCC_ClockConfig+0x1bc>)
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f023 0203 	bic.w	r2, r3, #3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	4934      	ldr	r1, [pc, #208]	; (80061e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006118:	4313      	orrs	r3, r2
 800611a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800611c:	f7fc fa1c 	bl	8002558 <HAL_GetTick>
 8006120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006122:	e00a      	b.n	800613a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006124:	f7fc fa18 	bl	8002558 <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006132:	4293      	cmp	r3, r2
 8006134:	d901      	bls.n	800613a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e04f      	b.n	80061da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800613a:	4b2b      	ldr	r3, [pc, #172]	; (80061e8 <HAL_RCC_ClockConfig+0x1bc>)
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f003 020c 	and.w	r2, r3, #12
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	429a      	cmp	r2, r3
 800614a:	d1eb      	bne.n	8006124 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800614c:	4b25      	ldr	r3, [pc, #148]	; (80061e4 <HAL_RCC_ClockConfig+0x1b8>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0307 	and.w	r3, r3, #7
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	429a      	cmp	r2, r3
 8006158:	d20c      	bcs.n	8006174 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800615a:	4b22      	ldr	r3, [pc, #136]	; (80061e4 <HAL_RCC_ClockConfig+0x1b8>)
 800615c:	683a      	ldr	r2, [r7, #0]
 800615e:	b2d2      	uxtb	r2, r2
 8006160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006162:	4b20      	ldr	r3, [pc, #128]	; (80061e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0307 	and.w	r3, r3, #7
 800616a:	683a      	ldr	r2, [r7, #0]
 800616c:	429a      	cmp	r2, r3
 800616e:	d001      	beq.n	8006174 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e032      	b.n	80061da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0304 	and.w	r3, r3, #4
 800617c:	2b00      	cmp	r3, #0
 800617e:	d008      	beq.n	8006192 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006180:	4b19      	ldr	r3, [pc, #100]	; (80061e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	4916      	ldr	r1, [pc, #88]	; (80061e8 <HAL_RCC_ClockConfig+0x1bc>)
 800618e:	4313      	orrs	r3, r2
 8006190:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0308 	and.w	r3, r3, #8
 800619a:	2b00      	cmp	r3, #0
 800619c:	d009      	beq.n	80061b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800619e:	4b12      	ldr	r3, [pc, #72]	; (80061e8 <HAL_RCC_ClockConfig+0x1bc>)
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	00db      	lsls	r3, r3, #3
 80061ac:	490e      	ldr	r1, [pc, #56]	; (80061e8 <HAL_RCC_ClockConfig+0x1bc>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80061b2:	f000 f821 	bl	80061f8 <HAL_RCC_GetSysClockFreq>
 80061b6:	4602      	mov	r2, r0
 80061b8:	4b0b      	ldr	r3, [pc, #44]	; (80061e8 <HAL_RCC_ClockConfig+0x1bc>)
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	091b      	lsrs	r3, r3, #4
 80061be:	f003 030f 	and.w	r3, r3, #15
 80061c2:	490a      	ldr	r1, [pc, #40]	; (80061ec <HAL_RCC_ClockConfig+0x1c0>)
 80061c4:	5ccb      	ldrb	r3, [r1, r3]
 80061c6:	fa22 f303 	lsr.w	r3, r2, r3
 80061ca:	4a09      	ldr	r2, [pc, #36]	; (80061f0 <HAL_RCC_ClockConfig+0x1c4>)
 80061cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80061ce:	4b09      	ldr	r3, [pc, #36]	; (80061f4 <HAL_RCC_ClockConfig+0x1c8>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7fc f97c 	bl	80024d0 <HAL_InitTick>

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	40023c00 	.word	0x40023c00
 80061e8:	40023800 	.word	0x40023800
 80061ec:	0800fd04 	.word	0x0800fd04
 80061f0:	20000000 	.word	0x20000000
 80061f4:	20000004 	.word	0x20000004

080061f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061fc:	b094      	sub	sp, #80	; 0x50
 80061fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006200:	2300      	movs	r3, #0
 8006202:	647b      	str	r3, [r7, #68]	; 0x44
 8006204:	2300      	movs	r3, #0
 8006206:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006208:	2300      	movs	r3, #0
 800620a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800620c:	2300      	movs	r3, #0
 800620e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006210:	4b79      	ldr	r3, [pc, #484]	; (80063f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f003 030c 	and.w	r3, r3, #12
 8006218:	2b08      	cmp	r3, #8
 800621a:	d00d      	beq.n	8006238 <HAL_RCC_GetSysClockFreq+0x40>
 800621c:	2b08      	cmp	r3, #8
 800621e:	f200 80e1 	bhi.w	80063e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006222:	2b00      	cmp	r3, #0
 8006224:	d002      	beq.n	800622c <HAL_RCC_GetSysClockFreq+0x34>
 8006226:	2b04      	cmp	r3, #4
 8006228:	d003      	beq.n	8006232 <HAL_RCC_GetSysClockFreq+0x3a>
 800622a:	e0db      	b.n	80063e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800622c:	4b73      	ldr	r3, [pc, #460]	; (80063fc <HAL_RCC_GetSysClockFreq+0x204>)
 800622e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006230:	e0db      	b.n	80063ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006232:	4b73      	ldr	r3, [pc, #460]	; (8006400 <HAL_RCC_GetSysClockFreq+0x208>)
 8006234:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006236:	e0d8      	b.n	80063ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006238:	4b6f      	ldr	r3, [pc, #444]	; (80063f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006240:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006242:	4b6d      	ldr	r3, [pc, #436]	; (80063f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d063      	beq.n	8006316 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800624e:	4b6a      	ldr	r3, [pc, #424]	; (80063f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	099b      	lsrs	r3, r3, #6
 8006254:	2200      	movs	r2, #0
 8006256:	63bb      	str	r3, [r7, #56]	; 0x38
 8006258:	63fa      	str	r2, [r7, #60]	; 0x3c
 800625a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006260:	633b      	str	r3, [r7, #48]	; 0x30
 8006262:	2300      	movs	r3, #0
 8006264:	637b      	str	r3, [r7, #52]	; 0x34
 8006266:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800626a:	4622      	mov	r2, r4
 800626c:	462b      	mov	r3, r5
 800626e:	f04f 0000 	mov.w	r0, #0
 8006272:	f04f 0100 	mov.w	r1, #0
 8006276:	0159      	lsls	r1, r3, #5
 8006278:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800627c:	0150      	lsls	r0, r2, #5
 800627e:	4602      	mov	r2, r0
 8006280:	460b      	mov	r3, r1
 8006282:	4621      	mov	r1, r4
 8006284:	1a51      	subs	r1, r2, r1
 8006286:	6139      	str	r1, [r7, #16]
 8006288:	4629      	mov	r1, r5
 800628a:	eb63 0301 	sbc.w	r3, r3, r1
 800628e:	617b      	str	r3, [r7, #20]
 8006290:	f04f 0200 	mov.w	r2, #0
 8006294:	f04f 0300 	mov.w	r3, #0
 8006298:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800629c:	4659      	mov	r1, fp
 800629e:	018b      	lsls	r3, r1, #6
 80062a0:	4651      	mov	r1, sl
 80062a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80062a6:	4651      	mov	r1, sl
 80062a8:	018a      	lsls	r2, r1, #6
 80062aa:	4651      	mov	r1, sl
 80062ac:	ebb2 0801 	subs.w	r8, r2, r1
 80062b0:	4659      	mov	r1, fp
 80062b2:	eb63 0901 	sbc.w	r9, r3, r1
 80062b6:	f04f 0200 	mov.w	r2, #0
 80062ba:	f04f 0300 	mov.w	r3, #0
 80062be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062ca:	4690      	mov	r8, r2
 80062cc:	4699      	mov	r9, r3
 80062ce:	4623      	mov	r3, r4
 80062d0:	eb18 0303 	adds.w	r3, r8, r3
 80062d4:	60bb      	str	r3, [r7, #8]
 80062d6:	462b      	mov	r3, r5
 80062d8:	eb49 0303 	adc.w	r3, r9, r3
 80062dc:	60fb      	str	r3, [r7, #12]
 80062de:	f04f 0200 	mov.w	r2, #0
 80062e2:	f04f 0300 	mov.w	r3, #0
 80062e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80062ea:	4629      	mov	r1, r5
 80062ec:	024b      	lsls	r3, r1, #9
 80062ee:	4621      	mov	r1, r4
 80062f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80062f4:	4621      	mov	r1, r4
 80062f6:	024a      	lsls	r2, r1, #9
 80062f8:	4610      	mov	r0, r2
 80062fa:	4619      	mov	r1, r3
 80062fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062fe:	2200      	movs	r2, #0
 8006300:	62bb      	str	r3, [r7, #40]	; 0x28
 8006302:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006304:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006308:	f7fa fcbe 	bl	8000c88 <__aeabi_uldivmod>
 800630c:	4602      	mov	r2, r0
 800630e:	460b      	mov	r3, r1
 8006310:	4613      	mov	r3, r2
 8006312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006314:	e058      	b.n	80063c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006316:	4b38      	ldr	r3, [pc, #224]	; (80063f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	099b      	lsrs	r3, r3, #6
 800631c:	2200      	movs	r2, #0
 800631e:	4618      	mov	r0, r3
 8006320:	4611      	mov	r1, r2
 8006322:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006326:	623b      	str	r3, [r7, #32]
 8006328:	2300      	movs	r3, #0
 800632a:	627b      	str	r3, [r7, #36]	; 0x24
 800632c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006330:	4642      	mov	r2, r8
 8006332:	464b      	mov	r3, r9
 8006334:	f04f 0000 	mov.w	r0, #0
 8006338:	f04f 0100 	mov.w	r1, #0
 800633c:	0159      	lsls	r1, r3, #5
 800633e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006342:	0150      	lsls	r0, r2, #5
 8006344:	4602      	mov	r2, r0
 8006346:	460b      	mov	r3, r1
 8006348:	4641      	mov	r1, r8
 800634a:	ebb2 0a01 	subs.w	sl, r2, r1
 800634e:	4649      	mov	r1, r9
 8006350:	eb63 0b01 	sbc.w	fp, r3, r1
 8006354:	f04f 0200 	mov.w	r2, #0
 8006358:	f04f 0300 	mov.w	r3, #0
 800635c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006360:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006364:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006368:	ebb2 040a 	subs.w	r4, r2, sl
 800636c:	eb63 050b 	sbc.w	r5, r3, fp
 8006370:	f04f 0200 	mov.w	r2, #0
 8006374:	f04f 0300 	mov.w	r3, #0
 8006378:	00eb      	lsls	r3, r5, #3
 800637a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800637e:	00e2      	lsls	r2, r4, #3
 8006380:	4614      	mov	r4, r2
 8006382:	461d      	mov	r5, r3
 8006384:	4643      	mov	r3, r8
 8006386:	18e3      	adds	r3, r4, r3
 8006388:	603b      	str	r3, [r7, #0]
 800638a:	464b      	mov	r3, r9
 800638c:	eb45 0303 	adc.w	r3, r5, r3
 8006390:	607b      	str	r3, [r7, #4]
 8006392:	f04f 0200 	mov.w	r2, #0
 8006396:	f04f 0300 	mov.w	r3, #0
 800639a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800639e:	4629      	mov	r1, r5
 80063a0:	028b      	lsls	r3, r1, #10
 80063a2:	4621      	mov	r1, r4
 80063a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80063a8:	4621      	mov	r1, r4
 80063aa:	028a      	lsls	r2, r1, #10
 80063ac:	4610      	mov	r0, r2
 80063ae:	4619      	mov	r1, r3
 80063b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063b2:	2200      	movs	r2, #0
 80063b4:	61bb      	str	r3, [r7, #24]
 80063b6:	61fa      	str	r2, [r7, #28]
 80063b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063bc:	f7fa fc64 	bl	8000c88 <__aeabi_uldivmod>
 80063c0:	4602      	mov	r2, r0
 80063c2:	460b      	mov	r3, r1
 80063c4:	4613      	mov	r3, r2
 80063c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80063c8:	4b0b      	ldr	r3, [pc, #44]	; (80063f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	0c1b      	lsrs	r3, r3, #16
 80063ce:	f003 0303 	and.w	r3, r3, #3
 80063d2:	3301      	adds	r3, #1
 80063d4:	005b      	lsls	r3, r3, #1
 80063d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80063d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80063e2:	e002      	b.n	80063ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80063e4:	4b05      	ldr	r3, [pc, #20]	; (80063fc <HAL_RCC_GetSysClockFreq+0x204>)
 80063e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80063e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3750      	adds	r7, #80	; 0x50
 80063f0:	46bd      	mov	sp, r7
 80063f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063f6:	bf00      	nop
 80063f8:	40023800 	.word	0x40023800
 80063fc:	00f42400 	.word	0x00f42400
 8006400:	007a1200 	.word	0x007a1200

08006404 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006404:	b480      	push	{r7}
 8006406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006408:	4b03      	ldr	r3, [pc, #12]	; (8006418 <HAL_RCC_GetHCLKFreq+0x14>)
 800640a:	681b      	ldr	r3, [r3, #0]
}
 800640c:	4618      	mov	r0, r3
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	20000000 	.word	0x20000000

0800641c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006420:	f7ff fff0 	bl	8006404 <HAL_RCC_GetHCLKFreq>
 8006424:	4602      	mov	r2, r0
 8006426:	4b05      	ldr	r3, [pc, #20]	; (800643c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	0a9b      	lsrs	r3, r3, #10
 800642c:	f003 0307 	and.w	r3, r3, #7
 8006430:	4903      	ldr	r1, [pc, #12]	; (8006440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006432:	5ccb      	ldrb	r3, [r1, r3]
 8006434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006438:	4618      	mov	r0, r3
 800643a:	bd80      	pop	{r7, pc}
 800643c:	40023800 	.word	0x40023800
 8006440:	0800fd14 	.word	0x0800fd14

08006444 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006448:	f7ff ffdc 	bl	8006404 <HAL_RCC_GetHCLKFreq>
 800644c:	4602      	mov	r2, r0
 800644e:	4b05      	ldr	r3, [pc, #20]	; (8006464 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	0b5b      	lsrs	r3, r3, #13
 8006454:	f003 0307 	and.w	r3, r3, #7
 8006458:	4903      	ldr	r1, [pc, #12]	; (8006468 <HAL_RCC_GetPCLK2Freq+0x24>)
 800645a:	5ccb      	ldrb	r3, [r1, r3]
 800645c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006460:	4618      	mov	r0, r3
 8006462:	bd80      	pop	{r7, pc}
 8006464:	40023800 	.word	0x40023800
 8006468:	0800fd14 	.word	0x0800fd14

0800646c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d101      	bne.n	800647e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e07b      	b.n	8006576 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006482:	2b00      	cmp	r3, #0
 8006484:	d108      	bne.n	8006498 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800648e:	d009      	beq.n	80064a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	61da      	str	r2, [r3, #28]
 8006496:	e005      	b.n	80064a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d106      	bne.n	80064c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f7fb fd5a 	bl	8001f78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2202      	movs	r2, #2
 80064c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80064ec:	431a      	orrs	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064f6:	431a      	orrs	r2, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	431a      	orrs	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	f003 0301 	and.w	r3, r3, #1
 800650a:	431a      	orrs	r2, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006514:	431a      	orrs	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	69db      	ldr	r3, [r3, #28]
 800651a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800651e:	431a      	orrs	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a1b      	ldr	r3, [r3, #32]
 8006524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006528:	ea42 0103 	orr.w	r1, r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006530:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	430a      	orrs	r2, r1
 800653a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	0c1b      	lsrs	r3, r3, #16
 8006542:	f003 0104 	and.w	r1, r3, #4
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654a:	f003 0210 	and.w	r2, r3, #16
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	430a      	orrs	r2, r1
 8006554:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	69da      	ldr	r2, [r3, #28]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006564:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3708      	adds	r7, #8
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800657e:	b580      	push	{r7, lr}
 8006580:	b082      	sub	sp, #8
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d101      	bne.n	8006590 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e041      	b.n	8006614 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006596:	b2db      	uxtb	r3, r3
 8006598:	2b00      	cmp	r3, #0
 800659a:	d106      	bne.n	80065aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f7fb fd2f 	bl	8002008 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2202      	movs	r2, #2
 80065ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	3304      	adds	r3, #4
 80065ba:	4619      	mov	r1, r3
 80065bc:	4610      	mov	r0, r2
 80065be:	f000 fc83 	bl	8006ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2201      	movs	r2, #1
 80065fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3708      	adds	r7, #8
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b01      	cmp	r3, #1
 800662e:	d001      	beq.n	8006634 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e04e      	b.n	80066d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2202      	movs	r2, #2
 8006638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68da      	ldr	r2, [r3, #12]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f042 0201 	orr.w	r2, r2, #1
 800664a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a23      	ldr	r2, [pc, #140]	; (80066e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d022      	beq.n	800669c <HAL_TIM_Base_Start_IT+0x80>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800665e:	d01d      	beq.n	800669c <HAL_TIM_Base_Start_IT+0x80>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a1f      	ldr	r2, [pc, #124]	; (80066e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d018      	beq.n	800669c <HAL_TIM_Base_Start_IT+0x80>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a1e      	ldr	r2, [pc, #120]	; (80066e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d013      	beq.n	800669c <HAL_TIM_Base_Start_IT+0x80>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a1c      	ldr	r2, [pc, #112]	; (80066ec <HAL_TIM_Base_Start_IT+0xd0>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d00e      	beq.n	800669c <HAL_TIM_Base_Start_IT+0x80>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a1b      	ldr	r2, [pc, #108]	; (80066f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d009      	beq.n	800669c <HAL_TIM_Base_Start_IT+0x80>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a19      	ldr	r2, [pc, #100]	; (80066f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d004      	beq.n	800669c <HAL_TIM_Base_Start_IT+0x80>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a18      	ldr	r2, [pc, #96]	; (80066f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d111      	bne.n	80066c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f003 0307 	and.w	r3, r3, #7
 80066a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2b06      	cmp	r3, #6
 80066ac:	d010      	beq.n	80066d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f042 0201 	orr.w	r2, r2, #1
 80066bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066be:	e007      	b.n	80066d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f042 0201 	orr.w	r2, r2, #1
 80066ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	40010000 	.word	0x40010000
 80066e4:	40000400 	.word	0x40000400
 80066e8:	40000800 	.word	0x40000800
 80066ec:	40000c00 	.word	0x40000c00
 80066f0:	40010400 	.word	0x40010400
 80066f4:	40014000 	.word	0x40014000
 80066f8:	40001800 	.word	0x40001800

080066fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d101      	bne.n	800670e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e041      	b.n	8006792 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006714:	b2db      	uxtb	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d106      	bne.n	8006728 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 f839 	bl	800679a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2202      	movs	r2, #2
 800672c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	3304      	adds	r3, #4
 8006738:	4619      	mov	r1, r3
 800673a:	4610      	mov	r0, r2
 800673c:	f000 fbc4 	bl	8006ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3708      	adds	r7, #8
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800679a:	b480      	push	{r7}
 800679c:	b083      	sub	sp, #12
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80067a2:	bf00      	nop
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
	...

080067b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d109      	bne.n	80067d4 <HAL_TIM_PWM_Start+0x24>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	bf14      	ite	ne
 80067cc:	2301      	movne	r3, #1
 80067ce:	2300      	moveq	r3, #0
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	e022      	b.n	800681a <HAL_TIM_PWM_Start+0x6a>
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	2b04      	cmp	r3, #4
 80067d8:	d109      	bne.n	80067ee <HAL_TIM_PWM_Start+0x3e>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	bf14      	ite	ne
 80067e6:	2301      	movne	r3, #1
 80067e8:	2300      	moveq	r3, #0
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	e015      	b.n	800681a <HAL_TIM_PWM_Start+0x6a>
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	2b08      	cmp	r3, #8
 80067f2:	d109      	bne.n	8006808 <HAL_TIM_PWM_Start+0x58>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	bf14      	ite	ne
 8006800:	2301      	movne	r3, #1
 8006802:	2300      	moveq	r3, #0
 8006804:	b2db      	uxtb	r3, r3
 8006806:	e008      	b.n	800681a <HAL_TIM_PWM_Start+0x6a>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b01      	cmp	r3, #1
 8006812:	bf14      	ite	ne
 8006814:	2301      	movne	r3, #1
 8006816:	2300      	moveq	r3, #0
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d001      	beq.n	8006822 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e07c      	b.n	800691c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d104      	bne.n	8006832 <HAL_TIM_PWM_Start+0x82>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2202      	movs	r2, #2
 800682c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006830:	e013      	b.n	800685a <HAL_TIM_PWM_Start+0xaa>
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	2b04      	cmp	r3, #4
 8006836:	d104      	bne.n	8006842 <HAL_TIM_PWM_Start+0x92>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2202      	movs	r2, #2
 800683c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006840:	e00b      	b.n	800685a <HAL_TIM_PWM_Start+0xaa>
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	2b08      	cmp	r3, #8
 8006846:	d104      	bne.n	8006852 <HAL_TIM_PWM_Start+0xa2>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2202      	movs	r2, #2
 800684c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006850:	e003      	b.n	800685a <HAL_TIM_PWM_Start+0xaa>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2202      	movs	r2, #2
 8006856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2201      	movs	r2, #1
 8006860:	6839      	ldr	r1, [r7, #0]
 8006862:	4618      	mov	r0, r3
 8006864:	f000 fe1a 	bl	800749c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a2d      	ldr	r2, [pc, #180]	; (8006924 <HAL_TIM_PWM_Start+0x174>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d004      	beq.n	800687c <HAL_TIM_PWM_Start+0xcc>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a2c      	ldr	r2, [pc, #176]	; (8006928 <HAL_TIM_PWM_Start+0x178>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d101      	bne.n	8006880 <HAL_TIM_PWM_Start+0xd0>
 800687c:	2301      	movs	r3, #1
 800687e:	e000      	b.n	8006882 <HAL_TIM_PWM_Start+0xd2>
 8006880:	2300      	movs	r3, #0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d007      	beq.n	8006896 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006894:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a22      	ldr	r2, [pc, #136]	; (8006924 <HAL_TIM_PWM_Start+0x174>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d022      	beq.n	80068e6 <HAL_TIM_PWM_Start+0x136>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068a8:	d01d      	beq.n	80068e6 <HAL_TIM_PWM_Start+0x136>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a1f      	ldr	r2, [pc, #124]	; (800692c <HAL_TIM_PWM_Start+0x17c>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d018      	beq.n	80068e6 <HAL_TIM_PWM_Start+0x136>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a1d      	ldr	r2, [pc, #116]	; (8006930 <HAL_TIM_PWM_Start+0x180>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d013      	beq.n	80068e6 <HAL_TIM_PWM_Start+0x136>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a1c      	ldr	r2, [pc, #112]	; (8006934 <HAL_TIM_PWM_Start+0x184>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d00e      	beq.n	80068e6 <HAL_TIM_PWM_Start+0x136>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a16      	ldr	r2, [pc, #88]	; (8006928 <HAL_TIM_PWM_Start+0x178>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d009      	beq.n	80068e6 <HAL_TIM_PWM_Start+0x136>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a18      	ldr	r2, [pc, #96]	; (8006938 <HAL_TIM_PWM_Start+0x188>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d004      	beq.n	80068e6 <HAL_TIM_PWM_Start+0x136>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a16      	ldr	r2, [pc, #88]	; (800693c <HAL_TIM_PWM_Start+0x18c>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d111      	bne.n	800690a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	f003 0307 	and.w	r3, r3, #7
 80068f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2b06      	cmp	r3, #6
 80068f6:	d010      	beq.n	800691a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f042 0201 	orr.w	r2, r2, #1
 8006906:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006908:	e007      	b.n	800691a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f042 0201 	orr.w	r2, r2, #1
 8006918:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	40010000 	.word	0x40010000
 8006928:	40010400 	.word	0x40010400
 800692c:	40000400 	.word	0x40000400
 8006930:	40000800 	.word	0x40000800
 8006934:	40000c00 	.word	0x40000c00
 8006938:	40014000 	.word	0x40014000
 800693c:	40001800 	.word	0x40001800

08006940 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	f003 0302 	and.w	r3, r3, #2
 8006952:	2b02      	cmp	r3, #2
 8006954:	d122      	bne.n	800699c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	f003 0302 	and.w	r3, r3, #2
 8006960:	2b02      	cmp	r3, #2
 8006962:	d11b      	bne.n	800699c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f06f 0202 	mvn.w	r2, #2
 800696c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2201      	movs	r2, #1
 8006972:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	f003 0303 	and.w	r3, r3, #3
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fa81 	bl	8006e8a <HAL_TIM_IC_CaptureCallback>
 8006988:	e005      	b.n	8006996 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 fa73 	bl	8006e76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 fa84 	bl	8006e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	f003 0304 	and.w	r3, r3, #4
 80069a6:	2b04      	cmp	r3, #4
 80069a8:	d122      	bne.n	80069f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	f003 0304 	and.w	r3, r3, #4
 80069b4:	2b04      	cmp	r3, #4
 80069b6:	d11b      	bne.n	80069f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f06f 0204 	mvn.w	r2, #4
 80069c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2202      	movs	r2, #2
 80069c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d003      	beq.n	80069de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fa57 	bl	8006e8a <HAL_TIM_IC_CaptureCallback>
 80069dc:	e005      	b.n	80069ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fa49 	bl	8006e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 fa5a 	bl	8006e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	f003 0308 	and.w	r3, r3, #8
 80069fa:	2b08      	cmp	r3, #8
 80069fc:	d122      	bne.n	8006a44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	f003 0308 	and.w	r3, r3, #8
 8006a08:	2b08      	cmp	r3, #8
 8006a0a:	d11b      	bne.n	8006a44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f06f 0208 	mvn.w	r2, #8
 8006a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2204      	movs	r2, #4
 8006a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	69db      	ldr	r3, [r3, #28]
 8006a22:	f003 0303 	and.w	r3, r3, #3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 fa2d 	bl	8006e8a <HAL_TIM_IC_CaptureCallback>
 8006a30:	e005      	b.n	8006a3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fa1f 	bl	8006e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 fa30 	bl	8006e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	f003 0310 	and.w	r3, r3, #16
 8006a4e:	2b10      	cmp	r3, #16
 8006a50:	d122      	bne.n	8006a98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	f003 0310 	and.w	r3, r3, #16
 8006a5c:	2b10      	cmp	r3, #16
 8006a5e:	d11b      	bne.n	8006a98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f06f 0210 	mvn.w	r2, #16
 8006a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2208      	movs	r2, #8
 8006a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	69db      	ldr	r3, [r3, #28]
 8006a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d003      	beq.n	8006a86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fa03 	bl	8006e8a <HAL_TIM_IC_CaptureCallback>
 8006a84:	e005      	b.n	8006a92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f9f5 	bl	8006e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fa06 	bl	8006e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	f003 0301 	and.w	r3, r3, #1
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d10e      	bne.n	8006ac4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	f003 0301 	and.w	r3, r3, #1
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d107      	bne.n	8006ac4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f06f 0201 	mvn.w	r2, #1
 8006abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f9cf 	bl	8006e62 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ace:	2b80      	cmp	r3, #128	; 0x80
 8006ad0:	d10e      	bne.n	8006af0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006adc:	2b80      	cmp	r3, #128	; 0x80
 8006ade:	d107      	bne.n	8006af0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 fd82 	bl	80075f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006afa:	2b40      	cmp	r3, #64	; 0x40
 8006afc:	d10e      	bne.n	8006b1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b08:	2b40      	cmp	r3, #64	; 0x40
 8006b0a:	d107      	bne.n	8006b1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 f9cb 	bl	8006eb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	f003 0320 	and.w	r3, r3, #32
 8006b26:	2b20      	cmp	r3, #32
 8006b28:	d10e      	bne.n	8006b48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	f003 0320 	and.w	r3, r3, #32
 8006b34:	2b20      	cmp	r3, #32
 8006b36:	d107      	bne.n	8006b48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f06f 0220 	mvn.w	r2, #32
 8006b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 fd4c 	bl	80075e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b48:	bf00      	nop
 8006b4a:	3708      	adds	r7, #8
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d101      	bne.n	8006b6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b6a:	2302      	movs	r3, #2
 8006b6c:	e0ae      	b.n	8006ccc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2b0c      	cmp	r3, #12
 8006b7a:	f200 809f 	bhi.w	8006cbc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006b7e:	a201      	add	r2, pc, #4	; (adr r2, 8006b84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b84:	08006bb9 	.word	0x08006bb9
 8006b88:	08006cbd 	.word	0x08006cbd
 8006b8c:	08006cbd 	.word	0x08006cbd
 8006b90:	08006cbd 	.word	0x08006cbd
 8006b94:	08006bf9 	.word	0x08006bf9
 8006b98:	08006cbd 	.word	0x08006cbd
 8006b9c:	08006cbd 	.word	0x08006cbd
 8006ba0:	08006cbd 	.word	0x08006cbd
 8006ba4:	08006c3b 	.word	0x08006c3b
 8006ba8:	08006cbd 	.word	0x08006cbd
 8006bac:	08006cbd 	.word	0x08006cbd
 8006bb0:	08006cbd 	.word	0x08006cbd
 8006bb4:	08006c7b 	.word	0x08006c7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68b9      	ldr	r1, [r7, #8]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f000 fa22 	bl	8007008 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	699a      	ldr	r2, [r3, #24]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f042 0208 	orr.w	r2, r2, #8
 8006bd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	699a      	ldr	r2, [r3, #24]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f022 0204 	bic.w	r2, r2, #4
 8006be2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6999      	ldr	r1, [r3, #24]
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	691a      	ldr	r2, [r3, #16]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	619a      	str	r2, [r3, #24]
      break;
 8006bf6:	e064      	b.n	8006cc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68b9      	ldr	r1, [r7, #8]
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f000 fa72 	bl	80070e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	699a      	ldr	r2, [r3, #24]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	699a      	ldr	r2, [r3, #24]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6999      	ldr	r1, [r3, #24]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	021a      	lsls	r2, r3, #8
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	430a      	orrs	r2, r1
 8006c36:	619a      	str	r2, [r3, #24]
      break;
 8006c38:	e043      	b.n	8006cc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68b9      	ldr	r1, [r7, #8]
 8006c40:	4618      	mov	r0, r3
 8006c42:	f000 fac7 	bl	80071d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	69da      	ldr	r2, [r3, #28]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f042 0208 	orr.w	r2, r2, #8
 8006c54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	69da      	ldr	r2, [r3, #28]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f022 0204 	bic.w	r2, r2, #4
 8006c64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	69d9      	ldr	r1, [r3, #28]
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	691a      	ldr	r2, [r3, #16]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	430a      	orrs	r2, r1
 8006c76:	61da      	str	r2, [r3, #28]
      break;
 8006c78:	e023      	b.n	8006cc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68b9      	ldr	r1, [r7, #8]
 8006c80:	4618      	mov	r0, r3
 8006c82:	f000 fb1b 	bl	80072bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	69da      	ldr	r2, [r3, #28]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	69da      	ldr	r2, [r3, #28]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ca4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	69d9      	ldr	r1, [r3, #28]
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	021a      	lsls	r2, r3, #8
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	430a      	orrs	r2, r1
 8006cb8:	61da      	str	r2, [r3, #28]
      break;
 8006cba:	e002      	b.n	8006cc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8006cc0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3718      	adds	r7, #24
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d101      	bne.n	8006cf0 <HAL_TIM_ConfigClockSource+0x1c>
 8006cec:	2302      	movs	r3, #2
 8006cee:	e0b4      	b.n	8006e5a <HAL_TIM_ConfigClockSource+0x186>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	68ba      	ldr	r2, [r7, #8]
 8006d1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d28:	d03e      	beq.n	8006da8 <HAL_TIM_ConfigClockSource+0xd4>
 8006d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d2e:	f200 8087 	bhi.w	8006e40 <HAL_TIM_ConfigClockSource+0x16c>
 8006d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d36:	f000 8086 	beq.w	8006e46 <HAL_TIM_ConfigClockSource+0x172>
 8006d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d3e:	d87f      	bhi.n	8006e40 <HAL_TIM_ConfigClockSource+0x16c>
 8006d40:	2b70      	cmp	r3, #112	; 0x70
 8006d42:	d01a      	beq.n	8006d7a <HAL_TIM_ConfigClockSource+0xa6>
 8006d44:	2b70      	cmp	r3, #112	; 0x70
 8006d46:	d87b      	bhi.n	8006e40 <HAL_TIM_ConfigClockSource+0x16c>
 8006d48:	2b60      	cmp	r3, #96	; 0x60
 8006d4a:	d050      	beq.n	8006dee <HAL_TIM_ConfigClockSource+0x11a>
 8006d4c:	2b60      	cmp	r3, #96	; 0x60
 8006d4e:	d877      	bhi.n	8006e40 <HAL_TIM_ConfigClockSource+0x16c>
 8006d50:	2b50      	cmp	r3, #80	; 0x50
 8006d52:	d03c      	beq.n	8006dce <HAL_TIM_ConfigClockSource+0xfa>
 8006d54:	2b50      	cmp	r3, #80	; 0x50
 8006d56:	d873      	bhi.n	8006e40 <HAL_TIM_ConfigClockSource+0x16c>
 8006d58:	2b40      	cmp	r3, #64	; 0x40
 8006d5a:	d058      	beq.n	8006e0e <HAL_TIM_ConfigClockSource+0x13a>
 8006d5c:	2b40      	cmp	r3, #64	; 0x40
 8006d5e:	d86f      	bhi.n	8006e40 <HAL_TIM_ConfigClockSource+0x16c>
 8006d60:	2b30      	cmp	r3, #48	; 0x30
 8006d62:	d064      	beq.n	8006e2e <HAL_TIM_ConfigClockSource+0x15a>
 8006d64:	2b30      	cmp	r3, #48	; 0x30
 8006d66:	d86b      	bhi.n	8006e40 <HAL_TIM_ConfigClockSource+0x16c>
 8006d68:	2b20      	cmp	r3, #32
 8006d6a:	d060      	beq.n	8006e2e <HAL_TIM_ConfigClockSource+0x15a>
 8006d6c:	2b20      	cmp	r3, #32
 8006d6e:	d867      	bhi.n	8006e40 <HAL_TIM_ConfigClockSource+0x16c>
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d05c      	beq.n	8006e2e <HAL_TIM_ConfigClockSource+0x15a>
 8006d74:	2b10      	cmp	r3, #16
 8006d76:	d05a      	beq.n	8006e2e <HAL_TIM_ConfigClockSource+0x15a>
 8006d78:	e062      	b.n	8006e40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6818      	ldr	r0, [r3, #0]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	6899      	ldr	r1, [r3, #8]
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	685a      	ldr	r2, [r3, #4]
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	f000 fb67 	bl	800745c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	609a      	str	r2, [r3, #8]
      break;
 8006da6:	e04f      	b.n	8006e48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6818      	ldr	r0, [r3, #0]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	6899      	ldr	r1, [r3, #8]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	685a      	ldr	r2, [r3, #4]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	f000 fb50 	bl	800745c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	689a      	ldr	r2, [r3, #8]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006dca:	609a      	str	r2, [r3, #8]
      break;
 8006dcc:	e03c      	b.n	8006e48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6818      	ldr	r0, [r3, #0]
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	6859      	ldr	r1, [r3, #4]
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	f000 fac4 	bl	8007368 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2150      	movs	r1, #80	; 0x50
 8006de6:	4618      	mov	r0, r3
 8006de8:	f000 fb1d 	bl	8007426 <TIM_ITRx_SetConfig>
      break;
 8006dec:	e02c      	b.n	8006e48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6818      	ldr	r0, [r3, #0]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	6859      	ldr	r1, [r3, #4]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	f000 fae3 	bl	80073c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2160      	movs	r1, #96	; 0x60
 8006e06:	4618      	mov	r0, r3
 8006e08:	f000 fb0d 	bl	8007426 <TIM_ITRx_SetConfig>
      break;
 8006e0c:	e01c      	b.n	8006e48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6818      	ldr	r0, [r3, #0]
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	6859      	ldr	r1, [r3, #4]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	f000 faa4 	bl	8007368 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2140      	movs	r1, #64	; 0x40
 8006e26:	4618      	mov	r0, r3
 8006e28:	f000 fafd 	bl	8007426 <TIM_ITRx_SetConfig>
      break;
 8006e2c:	e00c      	b.n	8006e48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4619      	mov	r1, r3
 8006e38:	4610      	mov	r0, r2
 8006e3a:	f000 faf4 	bl	8007426 <TIM_ITRx_SetConfig>
      break;
 8006e3e:	e003      	b.n	8006e48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	73fb      	strb	r3, [r7, #15]
      break;
 8006e44:	e000      	b.n	8006e48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006e46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e62:	b480      	push	{r7}
 8006e64:	b083      	sub	sp, #12
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006e6a:	bf00      	nop
 8006e6c:	370c      	adds	r7, #12
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b083      	sub	sp, #12
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e7e:	bf00      	nop
 8006e80:	370c      	adds	r7, #12
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr

08006e8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e8a:	b480      	push	{r7}
 8006e8c:	b083      	sub	sp, #12
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e92:	bf00      	nop
 8006e94:	370c      	adds	r7, #12
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr

08006e9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e9e:	b480      	push	{r7}
 8006ea0:	b083      	sub	sp, #12
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ea6:	bf00      	nop
 8006ea8:	370c      	adds	r7, #12
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr

08006eb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	b083      	sub	sp, #12
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006eba:	bf00      	nop
 8006ebc:	370c      	adds	r7, #12
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
	...

08006ec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a40      	ldr	r2, [pc, #256]	; (8006fdc <TIM_Base_SetConfig+0x114>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d013      	beq.n	8006f08 <TIM_Base_SetConfig+0x40>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ee6:	d00f      	beq.n	8006f08 <TIM_Base_SetConfig+0x40>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a3d      	ldr	r2, [pc, #244]	; (8006fe0 <TIM_Base_SetConfig+0x118>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d00b      	beq.n	8006f08 <TIM_Base_SetConfig+0x40>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a3c      	ldr	r2, [pc, #240]	; (8006fe4 <TIM_Base_SetConfig+0x11c>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d007      	beq.n	8006f08 <TIM_Base_SetConfig+0x40>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a3b      	ldr	r2, [pc, #236]	; (8006fe8 <TIM_Base_SetConfig+0x120>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d003      	beq.n	8006f08 <TIM_Base_SetConfig+0x40>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a3a      	ldr	r2, [pc, #232]	; (8006fec <TIM_Base_SetConfig+0x124>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d108      	bne.n	8006f1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a2f      	ldr	r2, [pc, #188]	; (8006fdc <TIM_Base_SetConfig+0x114>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d02b      	beq.n	8006f7a <TIM_Base_SetConfig+0xb2>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f28:	d027      	beq.n	8006f7a <TIM_Base_SetConfig+0xb2>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a2c      	ldr	r2, [pc, #176]	; (8006fe0 <TIM_Base_SetConfig+0x118>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d023      	beq.n	8006f7a <TIM_Base_SetConfig+0xb2>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a2b      	ldr	r2, [pc, #172]	; (8006fe4 <TIM_Base_SetConfig+0x11c>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d01f      	beq.n	8006f7a <TIM_Base_SetConfig+0xb2>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a2a      	ldr	r2, [pc, #168]	; (8006fe8 <TIM_Base_SetConfig+0x120>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d01b      	beq.n	8006f7a <TIM_Base_SetConfig+0xb2>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a29      	ldr	r2, [pc, #164]	; (8006fec <TIM_Base_SetConfig+0x124>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d017      	beq.n	8006f7a <TIM_Base_SetConfig+0xb2>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a28      	ldr	r2, [pc, #160]	; (8006ff0 <TIM_Base_SetConfig+0x128>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d013      	beq.n	8006f7a <TIM_Base_SetConfig+0xb2>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a27      	ldr	r2, [pc, #156]	; (8006ff4 <TIM_Base_SetConfig+0x12c>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d00f      	beq.n	8006f7a <TIM_Base_SetConfig+0xb2>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a26      	ldr	r2, [pc, #152]	; (8006ff8 <TIM_Base_SetConfig+0x130>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d00b      	beq.n	8006f7a <TIM_Base_SetConfig+0xb2>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a25      	ldr	r2, [pc, #148]	; (8006ffc <TIM_Base_SetConfig+0x134>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d007      	beq.n	8006f7a <TIM_Base_SetConfig+0xb2>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a24      	ldr	r2, [pc, #144]	; (8007000 <TIM_Base_SetConfig+0x138>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d003      	beq.n	8006f7a <TIM_Base_SetConfig+0xb2>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a23      	ldr	r2, [pc, #140]	; (8007004 <TIM_Base_SetConfig+0x13c>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d108      	bne.n	8006f8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	695b      	ldr	r3, [r3, #20]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	689a      	ldr	r2, [r3, #8]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a0a      	ldr	r2, [pc, #40]	; (8006fdc <TIM_Base_SetConfig+0x114>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d003      	beq.n	8006fc0 <TIM_Base_SetConfig+0xf8>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a0c      	ldr	r2, [pc, #48]	; (8006fec <TIM_Base_SetConfig+0x124>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d103      	bne.n	8006fc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	691a      	ldr	r2, [r3, #16]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	615a      	str	r2, [r3, #20]
}
 8006fce:	bf00      	nop
 8006fd0:	3714      	adds	r7, #20
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr
 8006fda:	bf00      	nop
 8006fdc:	40010000 	.word	0x40010000
 8006fe0:	40000400 	.word	0x40000400
 8006fe4:	40000800 	.word	0x40000800
 8006fe8:	40000c00 	.word	0x40000c00
 8006fec:	40010400 	.word	0x40010400
 8006ff0:	40014000 	.word	0x40014000
 8006ff4:	40014400 	.word	0x40014400
 8006ff8:	40014800 	.word	0x40014800
 8006ffc:	40001800 	.word	0x40001800
 8007000:	40001c00 	.word	0x40001c00
 8007004:	40002000 	.word	0x40002000

08007008 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007008:	b480      	push	{r7}
 800700a:	b087      	sub	sp, #28
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	f023 0201 	bic.w	r2, r3, #1
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	699b      	ldr	r3, [r3, #24]
 800702e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f023 0303 	bic.w	r3, r3, #3
 800703e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	4313      	orrs	r3, r2
 8007048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f023 0302 	bic.w	r3, r3, #2
 8007050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	4313      	orrs	r3, r2
 800705a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a20      	ldr	r2, [pc, #128]	; (80070e0 <TIM_OC1_SetConfig+0xd8>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d003      	beq.n	800706c <TIM_OC1_SetConfig+0x64>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a1f      	ldr	r2, [pc, #124]	; (80070e4 <TIM_OC1_SetConfig+0xdc>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d10c      	bne.n	8007086 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	f023 0308 	bic.w	r3, r3, #8
 8007072:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	697a      	ldr	r2, [r7, #20]
 800707a:	4313      	orrs	r3, r2
 800707c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	f023 0304 	bic.w	r3, r3, #4
 8007084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a15      	ldr	r2, [pc, #84]	; (80070e0 <TIM_OC1_SetConfig+0xd8>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d003      	beq.n	8007096 <TIM_OC1_SetConfig+0x8e>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a14      	ldr	r2, [pc, #80]	; (80070e4 <TIM_OC1_SetConfig+0xdc>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d111      	bne.n	80070ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800709c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	695b      	ldr	r3, [r3, #20]
 80070aa:	693a      	ldr	r2, [r7, #16]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	685a      	ldr	r2, [r3, #4]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	697a      	ldr	r2, [r7, #20]
 80070d2:	621a      	str	r2, [r3, #32]
}
 80070d4:	bf00      	nop
 80070d6:	371c      	adds	r7, #28
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr
 80070e0:	40010000 	.word	0x40010000
 80070e4:	40010400 	.word	0x40010400

080070e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b087      	sub	sp, #28
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a1b      	ldr	r3, [r3, #32]
 80070f6:	f023 0210 	bic.w	r2, r3, #16
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a1b      	ldr	r3, [r3, #32]
 8007102:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	699b      	ldr	r3, [r3, #24]
 800710e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800711e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	021b      	lsls	r3, r3, #8
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	4313      	orrs	r3, r2
 800712a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	f023 0320 	bic.w	r3, r3, #32
 8007132:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	011b      	lsls	r3, r3, #4
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	4313      	orrs	r3, r2
 800713e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a22      	ldr	r2, [pc, #136]	; (80071cc <TIM_OC2_SetConfig+0xe4>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d003      	beq.n	8007150 <TIM_OC2_SetConfig+0x68>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a21      	ldr	r2, [pc, #132]	; (80071d0 <TIM_OC2_SetConfig+0xe8>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d10d      	bne.n	800716c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007156:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	011b      	lsls	r3, r3, #4
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	4313      	orrs	r3, r2
 8007162:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800716a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a17      	ldr	r2, [pc, #92]	; (80071cc <TIM_OC2_SetConfig+0xe4>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d003      	beq.n	800717c <TIM_OC2_SetConfig+0x94>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a16      	ldr	r2, [pc, #88]	; (80071d0 <TIM_OC2_SetConfig+0xe8>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d113      	bne.n	80071a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007182:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800718a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	695b      	ldr	r3, [r3, #20]
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	693a      	ldr	r2, [r7, #16]
 8007194:	4313      	orrs	r3, r2
 8007196:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	699b      	ldr	r3, [r3, #24]
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	693a      	ldr	r2, [r7, #16]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	693a      	ldr	r2, [r7, #16]
 80071a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	621a      	str	r2, [r3, #32]
}
 80071be:	bf00      	nop
 80071c0:	371c      	adds	r7, #28
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	40010000 	.word	0x40010000
 80071d0:	40010400 	.word	0x40010400

080071d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b087      	sub	sp, #28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a1b      	ldr	r3, [r3, #32]
 80071e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a1b      	ldr	r3, [r3, #32]
 80071ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	69db      	ldr	r3, [r3, #28]
 80071fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f023 0303 	bic.w	r3, r3, #3
 800720a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	4313      	orrs	r3, r2
 8007214:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800721c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	021b      	lsls	r3, r3, #8
 8007224:	697a      	ldr	r2, [r7, #20]
 8007226:	4313      	orrs	r3, r2
 8007228:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a21      	ldr	r2, [pc, #132]	; (80072b4 <TIM_OC3_SetConfig+0xe0>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d003      	beq.n	800723a <TIM_OC3_SetConfig+0x66>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a20      	ldr	r2, [pc, #128]	; (80072b8 <TIM_OC3_SetConfig+0xe4>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d10d      	bne.n	8007256 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007240:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	021b      	lsls	r3, r3, #8
 8007248:	697a      	ldr	r2, [r7, #20]
 800724a:	4313      	orrs	r3, r2
 800724c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007254:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a16      	ldr	r2, [pc, #88]	; (80072b4 <TIM_OC3_SetConfig+0xe0>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d003      	beq.n	8007266 <TIM_OC3_SetConfig+0x92>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4a15      	ldr	r2, [pc, #84]	; (80072b8 <TIM_OC3_SetConfig+0xe4>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d113      	bne.n	800728e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800726c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007274:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	011b      	lsls	r3, r3, #4
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	4313      	orrs	r3, r2
 8007280:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	011b      	lsls	r3, r3, #4
 8007288:	693a      	ldr	r2, [r7, #16]
 800728a:	4313      	orrs	r3, r2
 800728c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	685a      	ldr	r2, [r3, #4]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	621a      	str	r2, [r3, #32]
}
 80072a8:	bf00      	nop
 80072aa:	371c      	adds	r7, #28
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr
 80072b4:	40010000 	.word	0x40010000
 80072b8:	40010400 	.word	0x40010400

080072bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072bc:	b480      	push	{r7}
 80072be:	b087      	sub	sp, #28
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a1b      	ldr	r3, [r3, #32]
 80072ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	69db      	ldr	r3, [r3, #28]
 80072e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	021b      	lsls	r3, r3, #8
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007306:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	031b      	lsls	r3, r3, #12
 800730e:	693a      	ldr	r2, [r7, #16]
 8007310:	4313      	orrs	r3, r2
 8007312:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a12      	ldr	r2, [pc, #72]	; (8007360 <TIM_OC4_SetConfig+0xa4>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d003      	beq.n	8007324 <TIM_OC4_SetConfig+0x68>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a11      	ldr	r2, [pc, #68]	; (8007364 <TIM_OC4_SetConfig+0xa8>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d109      	bne.n	8007338 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800732a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	695b      	ldr	r3, [r3, #20]
 8007330:	019b      	lsls	r3, r3, #6
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	4313      	orrs	r3, r2
 8007336:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	697a      	ldr	r2, [r7, #20]
 800733c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	685a      	ldr	r2, [r3, #4]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	693a      	ldr	r2, [r7, #16]
 8007350:	621a      	str	r2, [r3, #32]
}
 8007352:	bf00      	nop
 8007354:	371c      	adds	r7, #28
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	40010000 	.word	0x40010000
 8007364:	40010400 	.word	0x40010400

08007368 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007368:	b480      	push	{r7}
 800736a:	b087      	sub	sp, #28
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6a1b      	ldr	r3, [r3, #32]
 8007378:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	f023 0201 	bic.w	r2, r3, #1
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007392:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	011b      	lsls	r3, r3, #4
 8007398:	693a      	ldr	r2, [r7, #16]
 800739a:	4313      	orrs	r3, r2
 800739c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	f023 030a 	bic.w	r3, r3, #10
 80073a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	697a      	ldr	r2, [r7, #20]
 80073b8:	621a      	str	r2, [r3, #32]
}
 80073ba:	bf00      	nop
 80073bc:	371c      	adds	r7, #28
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b087      	sub	sp, #28
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	60f8      	str	r0, [r7, #12]
 80073ce:	60b9      	str	r1, [r7, #8]
 80073d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6a1b      	ldr	r3, [r3, #32]
 80073d6:	f023 0210 	bic.w	r2, r3, #16
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6a1b      	ldr	r3, [r3, #32]
 80073e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	031b      	lsls	r3, r3, #12
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007402:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	011b      	lsls	r3, r3, #4
 8007408:	693a      	ldr	r2, [r7, #16]
 800740a:	4313      	orrs	r3, r2
 800740c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	697a      	ldr	r2, [r7, #20]
 8007412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	693a      	ldr	r2, [r7, #16]
 8007418:	621a      	str	r2, [r3, #32]
}
 800741a:	bf00      	nop
 800741c:	371c      	adds	r7, #28
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007426:	b480      	push	{r7}
 8007428:	b085      	sub	sp, #20
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
 800742e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800743c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800743e:	683a      	ldr	r2, [r7, #0]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	4313      	orrs	r3, r2
 8007444:	f043 0307 	orr.w	r3, r3, #7
 8007448:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	609a      	str	r2, [r3, #8]
}
 8007450:	bf00      	nop
 8007452:	3714      	adds	r7, #20
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800745c:	b480      	push	{r7}
 800745e:	b087      	sub	sp, #28
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
 8007468:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007476:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	021a      	lsls	r2, r3, #8
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	431a      	orrs	r2, r3
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	4313      	orrs	r3, r2
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	4313      	orrs	r3, r2
 8007488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	697a      	ldr	r2, [r7, #20]
 800748e:	609a      	str	r2, [r3, #8]
}
 8007490:	bf00      	nop
 8007492:	371c      	adds	r7, #28
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800749c:	b480      	push	{r7}
 800749e:	b087      	sub	sp, #28
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	f003 031f 	and.w	r3, r3, #31
 80074ae:	2201      	movs	r2, #1
 80074b0:	fa02 f303 	lsl.w	r3, r2, r3
 80074b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6a1a      	ldr	r2, [r3, #32]
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	43db      	mvns	r3, r3
 80074be:	401a      	ands	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6a1a      	ldr	r2, [r3, #32]
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	f003 031f 	and.w	r3, r3, #31
 80074ce:	6879      	ldr	r1, [r7, #4]
 80074d0:	fa01 f303 	lsl.w	r3, r1, r3
 80074d4:	431a      	orrs	r2, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	621a      	str	r2, [r3, #32]
}
 80074da:	bf00      	nop
 80074dc:	371c      	adds	r7, #28
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
	...

080074e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d101      	bne.n	8007500 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074fc:	2302      	movs	r3, #2
 80074fe:	e05a      	b.n	80075b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2202      	movs	r2, #2
 800750c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007526:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	4313      	orrs	r3, r2
 8007530:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a21      	ldr	r2, [pc, #132]	; (80075c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d022      	beq.n	800758a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800754c:	d01d      	beq.n	800758a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a1d      	ldr	r2, [pc, #116]	; (80075c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d018      	beq.n	800758a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a1b      	ldr	r2, [pc, #108]	; (80075cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d013      	beq.n	800758a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a1a      	ldr	r2, [pc, #104]	; (80075d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d00e      	beq.n	800758a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a18      	ldr	r2, [pc, #96]	; (80075d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d009      	beq.n	800758a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a17      	ldr	r2, [pc, #92]	; (80075d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d004      	beq.n	800758a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a15      	ldr	r2, [pc, #84]	; (80075dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d10c      	bne.n	80075a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007590:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	68ba      	ldr	r2, [r7, #8]
 8007598:	4313      	orrs	r3, r2
 800759a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68ba      	ldr	r2, [r7, #8]
 80075a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3714      	adds	r7, #20
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	40010000 	.word	0x40010000
 80075c8:	40000400 	.word	0x40000400
 80075cc:	40000800 	.word	0x40000800
 80075d0:	40000c00 	.word	0x40000c00
 80075d4:	40010400 	.word	0x40010400
 80075d8:	40014000 	.word	0x40014000
 80075dc:	40001800 	.word	0x40001800

080075e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075fc:	bf00      	nop
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d101      	bne.n	800761a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e03f      	b.n	800769a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007620:	b2db      	uxtb	r3, r3
 8007622:	2b00      	cmp	r3, #0
 8007624:	d106      	bne.n	8007634 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7fa fd6a 	bl	8002108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2224      	movs	r2, #36	; 0x24
 8007638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68da      	ldr	r2, [r3, #12]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800764a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 f929 	bl	80078a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	691a      	ldr	r2, [r3, #16]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007660:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	695a      	ldr	r2, [r3, #20]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007670:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68da      	ldr	r2, [r3, #12]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007680:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2220      	movs	r2, #32
 800768c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2220      	movs	r2, #32
 8007694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3708      	adds	r7, #8
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b08a      	sub	sp, #40	; 0x28
 80076a6:	af02      	add	r7, sp, #8
 80076a8:	60f8      	str	r0, [r7, #12]
 80076aa:	60b9      	str	r1, [r7, #8]
 80076ac:	603b      	str	r3, [r7, #0]
 80076ae:	4613      	mov	r3, r2
 80076b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80076b2:	2300      	movs	r3, #0
 80076b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	2b20      	cmp	r3, #32
 80076c0:	d17c      	bne.n	80077bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d002      	beq.n	80076ce <HAL_UART_Transmit+0x2c>
 80076c8:	88fb      	ldrh	r3, [r7, #6]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d101      	bne.n	80076d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	e075      	b.n	80077be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d101      	bne.n	80076e0 <HAL_UART_Transmit+0x3e>
 80076dc:	2302      	movs	r3, #2
 80076de:	e06e      	b.n	80077be <HAL_UART_Transmit+0x11c>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2221      	movs	r2, #33	; 0x21
 80076f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076f6:	f7fa ff2f 	bl	8002558 <HAL_GetTick>
 80076fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	88fa      	ldrh	r2, [r7, #6]
 8007700:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	88fa      	ldrh	r2, [r7, #6]
 8007706:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007710:	d108      	bne.n	8007724 <HAL_UART_Transmit+0x82>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d104      	bne.n	8007724 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800771a:	2300      	movs	r3, #0
 800771c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	61bb      	str	r3, [r7, #24]
 8007722:	e003      	b.n	800772c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007728:	2300      	movs	r3, #0
 800772a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007734:	e02a      	b.n	800778c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	2200      	movs	r2, #0
 800773e:	2180      	movs	r1, #128	; 0x80
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f000 f840 	bl	80077c6 <UART_WaitOnFlagUntilTimeout>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800774c:	2303      	movs	r3, #3
 800774e:	e036      	b.n	80077be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10b      	bne.n	800776e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	881b      	ldrh	r3, [r3, #0]
 800775a:	461a      	mov	r2, r3
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007764:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	3302      	adds	r3, #2
 800776a:	61bb      	str	r3, [r7, #24]
 800776c:	e007      	b.n	800777e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	781a      	ldrb	r2, [r3, #0]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	3301      	adds	r3, #1
 800777c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007782:	b29b      	uxth	r3, r3
 8007784:	3b01      	subs	r3, #1
 8007786:	b29a      	uxth	r2, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007790:	b29b      	uxth	r3, r3
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1cf      	bne.n	8007736 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	9300      	str	r3, [sp, #0]
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	2200      	movs	r2, #0
 800779e:	2140      	movs	r1, #64	; 0x40
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f000 f810 	bl	80077c6 <UART_WaitOnFlagUntilTimeout>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d001      	beq.n	80077b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e006      	b.n	80077be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2220      	movs	r2, #32
 80077b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80077b8:	2300      	movs	r3, #0
 80077ba:	e000      	b.n	80077be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80077bc:	2302      	movs	r3, #2
  }
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3720      	adds	r7, #32
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b090      	sub	sp, #64	; 0x40
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	60f8      	str	r0, [r7, #12]
 80077ce:	60b9      	str	r1, [r7, #8]
 80077d0:	603b      	str	r3, [r7, #0]
 80077d2:	4613      	mov	r3, r2
 80077d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077d6:	e050      	b.n	800787a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077de:	d04c      	beq.n	800787a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80077e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d007      	beq.n	80077f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80077e6:	f7fa feb7 	bl	8002558 <HAL_GetTick>
 80077ea:	4602      	mov	r2, r0
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	1ad3      	subs	r3, r2, r3
 80077f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d241      	bcs.n	800787a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	330c      	adds	r3, #12
 80077fc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007800:	e853 3f00 	ldrex	r3, [r3]
 8007804:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007808:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800780c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	330c      	adds	r3, #12
 8007814:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007816:	637a      	str	r2, [r7, #52]	; 0x34
 8007818:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800781c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800781e:	e841 2300 	strex	r3, r2, [r1]
 8007822:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1e5      	bne.n	80077f6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	3314      	adds	r3, #20
 8007830:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	e853 3f00 	ldrex	r3, [r3]
 8007838:	613b      	str	r3, [r7, #16]
   return(result);
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	f023 0301 	bic.w	r3, r3, #1
 8007840:	63bb      	str	r3, [r7, #56]	; 0x38
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	3314      	adds	r3, #20
 8007848:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800784a:	623a      	str	r2, [r7, #32]
 800784c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784e:	69f9      	ldr	r1, [r7, #28]
 8007850:	6a3a      	ldr	r2, [r7, #32]
 8007852:	e841 2300 	strex	r3, r2, [r1]
 8007856:	61bb      	str	r3, [r7, #24]
   return(result);
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1e5      	bne.n	800782a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2220      	movs	r2, #32
 8007862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2220      	movs	r2, #32
 800786a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007876:	2303      	movs	r3, #3
 8007878:	e00f      	b.n	800789a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	4013      	ands	r3, r2
 8007884:	68ba      	ldr	r2, [r7, #8]
 8007886:	429a      	cmp	r2, r3
 8007888:	bf0c      	ite	eq
 800788a:	2301      	moveq	r3, #1
 800788c:	2300      	movne	r3, #0
 800788e:	b2db      	uxtb	r3, r3
 8007890:	461a      	mov	r2, r3
 8007892:	79fb      	ldrb	r3, [r7, #7]
 8007894:	429a      	cmp	r2, r3
 8007896:	d09f      	beq.n	80077d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	3740      	adds	r7, #64	; 0x40
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
	...

080078a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078a8:	b0c0      	sub	sp, #256	; 0x100
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	691b      	ldr	r3, [r3, #16]
 80078b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80078bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078c0:	68d9      	ldr	r1, [r3, #12]
 80078c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	ea40 0301 	orr.w	r3, r0, r1
 80078cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80078ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078d2:	689a      	ldr	r2, [r3, #8]
 80078d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	431a      	orrs	r2, r3
 80078dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	431a      	orrs	r2, r3
 80078e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078e8:	69db      	ldr	r3, [r3, #28]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80078f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80078fc:	f021 010c 	bic.w	r1, r1, #12
 8007900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800790a:	430b      	orrs	r3, r1
 800790c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800790e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	695b      	ldr	r3, [r3, #20]
 8007916:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800791a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800791e:	6999      	ldr	r1, [r3, #24]
 8007920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	ea40 0301 	orr.w	r3, r0, r1
 800792a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800792c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	4b8f      	ldr	r3, [pc, #572]	; (8007b70 <UART_SetConfig+0x2cc>)
 8007934:	429a      	cmp	r2, r3
 8007936:	d005      	beq.n	8007944 <UART_SetConfig+0xa0>
 8007938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	4b8d      	ldr	r3, [pc, #564]	; (8007b74 <UART_SetConfig+0x2d0>)
 8007940:	429a      	cmp	r2, r3
 8007942:	d104      	bne.n	800794e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007944:	f7fe fd7e 	bl	8006444 <HAL_RCC_GetPCLK2Freq>
 8007948:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800794c:	e003      	b.n	8007956 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800794e:	f7fe fd65 	bl	800641c <HAL_RCC_GetPCLK1Freq>
 8007952:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800795a:	69db      	ldr	r3, [r3, #28]
 800795c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007960:	f040 810c 	bne.w	8007b7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007964:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007968:	2200      	movs	r2, #0
 800796a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800796e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007972:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007976:	4622      	mov	r2, r4
 8007978:	462b      	mov	r3, r5
 800797a:	1891      	adds	r1, r2, r2
 800797c:	65b9      	str	r1, [r7, #88]	; 0x58
 800797e:	415b      	adcs	r3, r3
 8007980:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007982:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007986:	4621      	mov	r1, r4
 8007988:	eb12 0801 	adds.w	r8, r2, r1
 800798c:	4629      	mov	r1, r5
 800798e:	eb43 0901 	adc.w	r9, r3, r1
 8007992:	f04f 0200 	mov.w	r2, #0
 8007996:	f04f 0300 	mov.w	r3, #0
 800799a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800799e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80079a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80079a6:	4690      	mov	r8, r2
 80079a8:	4699      	mov	r9, r3
 80079aa:	4623      	mov	r3, r4
 80079ac:	eb18 0303 	adds.w	r3, r8, r3
 80079b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80079b4:	462b      	mov	r3, r5
 80079b6:	eb49 0303 	adc.w	r3, r9, r3
 80079ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80079be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80079ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80079ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80079d2:	460b      	mov	r3, r1
 80079d4:	18db      	adds	r3, r3, r3
 80079d6:	653b      	str	r3, [r7, #80]	; 0x50
 80079d8:	4613      	mov	r3, r2
 80079da:	eb42 0303 	adc.w	r3, r2, r3
 80079de:	657b      	str	r3, [r7, #84]	; 0x54
 80079e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80079e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80079e8:	f7f9 f94e 	bl	8000c88 <__aeabi_uldivmod>
 80079ec:	4602      	mov	r2, r0
 80079ee:	460b      	mov	r3, r1
 80079f0:	4b61      	ldr	r3, [pc, #388]	; (8007b78 <UART_SetConfig+0x2d4>)
 80079f2:	fba3 2302 	umull	r2, r3, r3, r2
 80079f6:	095b      	lsrs	r3, r3, #5
 80079f8:	011c      	lsls	r4, r3, #4
 80079fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079fe:	2200      	movs	r2, #0
 8007a00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a04:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007a08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007a0c:	4642      	mov	r2, r8
 8007a0e:	464b      	mov	r3, r9
 8007a10:	1891      	adds	r1, r2, r2
 8007a12:	64b9      	str	r1, [r7, #72]	; 0x48
 8007a14:	415b      	adcs	r3, r3
 8007a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007a1c:	4641      	mov	r1, r8
 8007a1e:	eb12 0a01 	adds.w	sl, r2, r1
 8007a22:	4649      	mov	r1, r9
 8007a24:	eb43 0b01 	adc.w	fp, r3, r1
 8007a28:	f04f 0200 	mov.w	r2, #0
 8007a2c:	f04f 0300 	mov.w	r3, #0
 8007a30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007a34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007a38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a3c:	4692      	mov	sl, r2
 8007a3e:	469b      	mov	fp, r3
 8007a40:	4643      	mov	r3, r8
 8007a42:	eb1a 0303 	adds.w	r3, sl, r3
 8007a46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a4a:	464b      	mov	r3, r9
 8007a4c:	eb4b 0303 	adc.w	r3, fp, r3
 8007a50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a60:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007a64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007a68:	460b      	mov	r3, r1
 8007a6a:	18db      	adds	r3, r3, r3
 8007a6c:	643b      	str	r3, [r7, #64]	; 0x40
 8007a6e:	4613      	mov	r3, r2
 8007a70:	eb42 0303 	adc.w	r3, r2, r3
 8007a74:	647b      	str	r3, [r7, #68]	; 0x44
 8007a76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007a7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007a7e:	f7f9 f903 	bl	8000c88 <__aeabi_uldivmod>
 8007a82:	4602      	mov	r2, r0
 8007a84:	460b      	mov	r3, r1
 8007a86:	4611      	mov	r1, r2
 8007a88:	4b3b      	ldr	r3, [pc, #236]	; (8007b78 <UART_SetConfig+0x2d4>)
 8007a8a:	fba3 2301 	umull	r2, r3, r3, r1
 8007a8e:	095b      	lsrs	r3, r3, #5
 8007a90:	2264      	movs	r2, #100	; 0x64
 8007a92:	fb02 f303 	mul.w	r3, r2, r3
 8007a96:	1acb      	subs	r3, r1, r3
 8007a98:	00db      	lsls	r3, r3, #3
 8007a9a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007a9e:	4b36      	ldr	r3, [pc, #216]	; (8007b78 <UART_SetConfig+0x2d4>)
 8007aa0:	fba3 2302 	umull	r2, r3, r3, r2
 8007aa4:	095b      	lsrs	r3, r3, #5
 8007aa6:	005b      	lsls	r3, r3, #1
 8007aa8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007aac:	441c      	add	r4, r3
 8007aae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ab8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007abc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007ac0:	4642      	mov	r2, r8
 8007ac2:	464b      	mov	r3, r9
 8007ac4:	1891      	adds	r1, r2, r2
 8007ac6:	63b9      	str	r1, [r7, #56]	; 0x38
 8007ac8:	415b      	adcs	r3, r3
 8007aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007acc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007ad0:	4641      	mov	r1, r8
 8007ad2:	1851      	adds	r1, r2, r1
 8007ad4:	6339      	str	r1, [r7, #48]	; 0x30
 8007ad6:	4649      	mov	r1, r9
 8007ad8:	414b      	adcs	r3, r1
 8007ada:	637b      	str	r3, [r7, #52]	; 0x34
 8007adc:	f04f 0200 	mov.w	r2, #0
 8007ae0:	f04f 0300 	mov.w	r3, #0
 8007ae4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007ae8:	4659      	mov	r1, fp
 8007aea:	00cb      	lsls	r3, r1, #3
 8007aec:	4651      	mov	r1, sl
 8007aee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007af2:	4651      	mov	r1, sl
 8007af4:	00ca      	lsls	r2, r1, #3
 8007af6:	4610      	mov	r0, r2
 8007af8:	4619      	mov	r1, r3
 8007afa:	4603      	mov	r3, r0
 8007afc:	4642      	mov	r2, r8
 8007afe:	189b      	adds	r3, r3, r2
 8007b00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b04:	464b      	mov	r3, r9
 8007b06:	460a      	mov	r2, r1
 8007b08:	eb42 0303 	adc.w	r3, r2, r3
 8007b0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007b1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007b20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007b24:	460b      	mov	r3, r1
 8007b26:	18db      	adds	r3, r3, r3
 8007b28:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	eb42 0303 	adc.w	r3, r2, r3
 8007b30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007b36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007b3a:	f7f9 f8a5 	bl	8000c88 <__aeabi_uldivmod>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	460b      	mov	r3, r1
 8007b42:	4b0d      	ldr	r3, [pc, #52]	; (8007b78 <UART_SetConfig+0x2d4>)
 8007b44:	fba3 1302 	umull	r1, r3, r3, r2
 8007b48:	095b      	lsrs	r3, r3, #5
 8007b4a:	2164      	movs	r1, #100	; 0x64
 8007b4c:	fb01 f303 	mul.w	r3, r1, r3
 8007b50:	1ad3      	subs	r3, r2, r3
 8007b52:	00db      	lsls	r3, r3, #3
 8007b54:	3332      	adds	r3, #50	; 0x32
 8007b56:	4a08      	ldr	r2, [pc, #32]	; (8007b78 <UART_SetConfig+0x2d4>)
 8007b58:	fba2 2303 	umull	r2, r3, r2, r3
 8007b5c:	095b      	lsrs	r3, r3, #5
 8007b5e:	f003 0207 	and.w	r2, r3, #7
 8007b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4422      	add	r2, r4
 8007b6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007b6c:	e105      	b.n	8007d7a <UART_SetConfig+0x4d6>
 8007b6e:	bf00      	nop
 8007b70:	40011000 	.word	0x40011000
 8007b74:	40011400 	.word	0x40011400
 8007b78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b80:	2200      	movs	r2, #0
 8007b82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007b86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007b8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007b8e:	4642      	mov	r2, r8
 8007b90:	464b      	mov	r3, r9
 8007b92:	1891      	adds	r1, r2, r2
 8007b94:	6239      	str	r1, [r7, #32]
 8007b96:	415b      	adcs	r3, r3
 8007b98:	627b      	str	r3, [r7, #36]	; 0x24
 8007b9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b9e:	4641      	mov	r1, r8
 8007ba0:	1854      	adds	r4, r2, r1
 8007ba2:	4649      	mov	r1, r9
 8007ba4:	eb43 0501 	adc.w	r5, r3, r1
 8007ba8:	f04f 0200 	mov.w	r2, #0
 8007bac:	f04f 0300 	mov.w	r3, #0
 8007bb0:	00eb      	lsls	r3, r5, #3
 8007bb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007bb6:	00e2      	lsls	r2, r4, #3
 8007bb8:	4614      	mov	r4, r2
 8007bba:	461d      	mov	r5, r3
 8007bbc:	4643      	mov	r3, r8
 8007bbe:	18e3      	adds	r3, r4, r3
 8007bc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007bc4:	464b      	mov	r3, r9
 8007bc6:	eb45 0303 	adc.w	r3, r5, r3
 8007bca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007bda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007bde:	f04f 0200 	mov.w	r2, #0
 8007be2:	f04f 0300 	mov.w	r3, #0
 8007be6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007bea:	4629      	mov	r1, r5
 8007bec:	008b      	lsls	r3, r1, #2
 8007bee:	4621      	mov	r1, r4
 8007bf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bf4:	4621      	mov	r1, r4
 8007bf6:	008a      	lsls	r2, r1, #2
 8007bf8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007bfc:	f7f9 f844 	bl	8000c88 <__aeabi_uldivmod>
 8007c00:	4602      	mov	r2, r0
 8007c02:	460b      	mov	r3, r1
 8007c04:	4b60      	ldr	r3, [pc, #384]	; (8007d88 <UART_SetConfig+0x4e4>)
 8007c06:	fba3 2302 	umull	r2, r3, r3, r2
 8007c0a:	095b      	lsrs	r3, r3, #5
 8007c0c:	011c      	lsls	r4, r3, #4
 8007c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c12:	2200      	movs	r2, #0
 8007c14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007c1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007c20:	4642      	mov	r2, r8
 8007c22:	464b      	mov	r3, r9
 8007c24:	1891      	adds	r1, r2, r2
 8007c26:	61b9      	str	r1, [r7, #24]
 8007c28:	415b      	adcs	r3, r3
 8007c2a:	61fb      	str	r3, [r7, #28]
 8007c2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c30:	4641      	mov	r1, r8
 8007c32:	1851      	adds	r1, r2, r1
 8007c34:	6139      	str	r1, [r7, #16]
 8007c36:	4649      	mov	r1, r9
 8007c38:	414b      	adcs	r3, r1
 8007c3a:	617b      	str	r3, [r7, #20]
 8007c3c:	f04f 0200 	mov.w	r2, #0
 8007c40:	f04f 0300 	mov.w	r3, #0
 8007c44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c48:	4659      	mov	r1, fp
 8007c4a:	00cb      	lsls	r3, r1, #3
 8007c4c:	4651      	mov	r1, sl
 8007c4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c52:	4651      	mov	r1, sl
 8007c54:	00ca      	lsls	r2, r1, #3
 8007c56:	4610      	mov	r0, r2
 8007c58:	4619      	mov	r1, r3
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	4642      	mov	r2, r8
 8007c5e:	189b      	adds	r3, r3, r2
 8007c60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c64:	464b      	mov	r3, r9
 8007c66:	460a      	mov	r2, r1
 8007c68:	eb42 0303 	adc.w	r3, r2, r3
 8007c6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007c7c:	f04f 0200 	mov.w	r2, #0
 8007c80:	f04f 0300 	mov.w	r3, #0
 8007c84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007c88:	4649      	mov	r1, r9
 8007c8a:	008b      	lsls	r3, r1, #2
 8007c8c:	4641      	mov	r1, r8
 8007c8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c92:	4641      	mov	r1, r8
 8007c94:	008a      	lsls	r2, r1, #2
 8007c96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007c9a:	f7f8 fff5 	bl	8000c88 <__aeabi_uldivmod>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	4b39      	ldr	r3, [pc, #228]	; (8007d88 <UART_SetConfig+0x4e4>)
 8007ca4:	fba3 1302 	umull	r1, r3, r3, r2
 8007ca8:	095b      	lsrs	r3, r3, #5
 8007caa:	2164      	movs	r1, #100	; 0x64
 8007cac:	fb01 f303 	mul.w	r3, r1, r3
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	011b      	lsls	r3, r3, #4
 8007cb4:	3332      	adds	r3, #50	; 0x32
 8007cb6:	4a34      	ldr	r2, [pc, #208]	; (8007d88 <UART_SetConfig+0x4e4>)
 8007cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8007cbc:	095b      	lsrs	r3, r3, #5
 8007cbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007cc2:	441c      	add	r4, r3
 8007cc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cc8:	2200      	movs	r2, #0
 8007cca:	673b      	str	r3, [r7, #112]	; 0x70
 8007ccc:	677a      	str	r2, [r7, #116]	; 0x74
 8007cce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007cd2:	4642      	mov	r2, r8
 8007cd4:	464b      	mov	r3, r9
 8007cd6:	1891      	adds	r1, r2, r2
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	415b      	adcs	r3, r3
 8007cdc:	60fb      	str	r3, [r7, #12]
 8007cde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ce2:	4641      	mov	r1, r8
 8007ce4:	1851      	adds	r1, r2, r1
 8007ce6:	6039      	str	r1, [r7, #0]
 8007ce8:	4649      	mov	r1, r9
 8007cea:	414b      	adcs	r3, r1
 8007cec:	607b      	str	r3, [r7, #4]
 8007cee:	f04f 0200 	mov.w	r2, #0
 8007cf2:	f04f 0300 	mov.w	r3, #0
 8007cf6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007cfa:	4659      	mov	r1, fp
 8007cfc:	00cb      	lsls	r3, r1, #3
 8007cfe:	4651      	mov	r1, sl
 8007d00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d04:	4651      	mov	r1, sl
 8007d06:	00ca      	lsls	r2, r1, #3
 8007d08:	4610      	mov	r0, r2
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	4642      	mov	r2, r8
 8007d10:	189b      	adds	r3, r3, r2
 8007d12:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d14:	464b      	mov	r3, r9
 8007d16:	460a      	mov	r2, r1
 8007d18:	eb42 0303 	adc.w	r3, r2, r3
 8007d1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	663b      	str	r3, [r7, #96]	; 0x60
 8007d28:	667a      	str	r2, [r7, #100]	; 0x64
 8007d2a:	f04f 0200 	mov.w	r2, #0
 8007d2e:	f04f 0300 	mov.w	r3, #0
 8007d32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007d36:	4649      	mov	r1, r9
 8007d38:	008b      	lsls	r3, r1, #2
 8007d3a:	4641      	mov	r1, r8
 8007d3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d40:	4641      	mov	r1, r8
 8007d42:	008a      	lsls	r2, r1, #2
 8007d44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007d48:	f7f8 ff9e 	bl	8000c88 <__aeabi_uldivmod>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	460b      	mov	r3, r1
 8007d50:	4b0d      	ldr	r3, [pc, #52]	; (8007d88 <UART_SetConfig+0x4e4>)
 8007d52:	fba3 1302 	umull	r1, r3, r3, r2
 8007d56:	095b      	lsrs	r3, r3, #5
 8007d58:	2164      	movs	r1, #100	; 0x64
 8007d5a:	fb01 f303 	mul.w	r3, r1, r3
 8007d5e:	1ad3      	subs	r3, r2, r3
 8007d60:	011b      	lsls	r3, r3, #4
 8007d62:	3332      	adds	r3, #50	; 0x32
 8007d64:	4a08      	ldr	r2, [pc, #32]	; (8007d88 <UART_SetConfig+0x4e4>)
 8007d66:	fba2 2303 	umull	r2, r3, r2, r3
 8007d6a:	095b      	lsrs	r3, r3, #5
 8007d6c:	f003 020f 	and.w	r2, r3, #15
 8007d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4422      	add	r2, r4
 8007d78:	609a      	str	r2, [r3, #8]
}
 8007d7a:	bf00      	nop
 8007d7c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007d80:	46bd      	mov	sp, r7
 8007d82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d86:	bf00      	nop
 8007d88:	51eb851f 	.word	0x51eb851f

08007d8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d8c:	b084      	sub	sp, #16
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b084      	sub	sp, #16
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
 8007d96:	f107 001c 	add.w	r0, r7, #28
 8007d9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d122      	bne.n	8007dea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007db8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d105      	bne.n	8007dde <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f9c0 	bl	8008164 <USB_CoreReset>
 8007de4:	4603      	mov	r3, r0
 8007de6:	73fb      	strb	r3, [r7, #15]
 8007de8:	e01a      	b.n	8007e20 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f9b4 	bl	8008164 <USB_CoreReset>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d106      	bne.n	8007e14 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	639a      	str	r2, [r3, #56]	; 0x38
 8007e12:	e005      	b.n	8007e20 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d10b      	bne.n	8007e3e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	f043 0206 	orr.w	r2, r3, #6
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	f043 0220 	orr.w	r2, r3, #32
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e4a:	b004      	add	sp, #16
 8007e4c:	4770      	bx	lr

08007e4e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e4e:	b480      	push	{r7}
 8007e50:	b083      	sub	sp, #12
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	f043 0201 	orr.w	r2, r3, #1
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	f023 0201 	bic.w	r2, r3, #1
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	370c      	adds	r7, #12
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr

08007e92 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b084      	sub	sp, #16
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007eae:	78fb      	ldrb	r3, [r7, #3]
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d115      	bne.n	8007ee0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007ec0:	2001      	movs	r0, #1
 8007ec2:	f7fa fb55 	bl	8002570 <HAL_Delay>
      ms++;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	3301      	adds	r3, #1
 8007eca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f93a 	bl	8008146 <USB_GetMode>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d01e      	beq.n	8007f16 <USB_SetCurrentMode+0x84>
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2b31      	cmp	r3, #49	; 0x31
 8007edc:	d9f0      	bls.n	8007ec0 <USB_SetCurrentMode+0x2e>
 8007ede:	e01a      	b.n	8007f16 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007ee0:	78fb      	ldrb	r3, [r7, #3]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d115      	bne.n	8007f12 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	68db      	ldr	r3, [r3, #12]
 8007eea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007ef2:	2001      	movs	r0, #1
 8007ef4:	f7fa fb3c 	bl	8002570 <HAL_Delay>
      ms++;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	3301      	adds	r3, #1
 8007efc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 f921 	bl	8008146 <USB_GetMode>
 8007f04:	4603      	mov	r3, r0
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d005      	beq.n	8007f16 <USB_SetCurrentMode+0x84>
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2b31      	cmp	r3, #49	; 0x31
 8007f0e:	d9f0      	bls.n	8007ef2 <USB_SetCurrentMode+0x60>
 8007f10:	e001      	b.n	8007f16 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e005      	b.n	8007f22 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2b32      	cmp	r3, #50	; 0x32
 8007f1a:	d101      	bne.n	8007f20 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e000      	b.n	8007f22 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3710      	adds	r7, #16
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
	...

08007f2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007f36:	2300      	movs	r3, #0
 8007f38:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	4a13      	ldr	r2, [pc, #76]	; (8007f90 <USB_FlushTxFifo+0x64>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d901      	bls.n	8007f4c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e01b      	b.n	8007f84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	691b      	ldr	r3, [r3, #16]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	daf2      	bge.n	8007f3a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007f54:	2300      	movs	r3, #0
 8007f56:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	019b      	lsls	r3, r3, #6
 8007f5c:	f043 0220 	orr.w	r2, r3, #32
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	3301      	adds	r3, #1
 8007f68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	4a08      	ldr	r2, [pc, #32]	; (8007f90 <USB_FlushTxFifo+0x64>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d901      	bls.n	8007f76 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007f72:	2303      	movs	r3, #3
 8007f74:	e006      	b.n	8007f84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	691b      	ldr	r3, [r3, #16]
 8007f7a:	f003 0320 	and.w	r3, r3, #32
 8007f7e:	2b20      	cmp	r3, #32
 8007f80:	d0f0      	beq.n	8007f64 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3714      	adds	r7, #20
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr
 8007f90:	00030d40 	.word	0x00030d40

08007f94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	4a11      	ldr	r2, [pc, #68]	; (8007ff0 <USB_FlushRxFifo+0x5c>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d901      	bls.n	8007fb2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	e018      	b.n	8007fe4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	daf2      	bge.n	8007fa0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2210      	movs	r2, #16
 8007fc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	4a08      	ldr	r2, [pc, #32]	; (8007ff0 <USB_FlushRxFifo+0x5c>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d901      	bls.n	8007fd6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e006      	b.n	8007fe4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	691b      	ldr	r3, [r3, #16]
 8007fda:	f003 0310 	and.w	r3, r3, #16
 8007fde:	2b10      	cmp	r3, #16
 8007fe0:	d0f0      	beq.n	8007fc4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3714      	adds	r7, #20
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr
 8007ff0:	00030d40 	.word	0x00030d40

08007ff4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b089      	sub	sp, #36	; 0x24
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	4611      	mov	r1, r2
 8008000:	461a      	mov	r2, r3
 8008002:	460b      	mov	r3, r1
 8008004:	71fb      	strb	r3, [r7, #7]
 8008006:	4613      	mov	r3, r2
 8008008:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008012:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008016:	2b00      	cmp	r3, #0
 8008018:	d123      	bne.n	8008062 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800801a:	88bb      	ldrh	r3, [r7, #4]
 800801c:	3303      	adds	r3, #3
 800801e:	089b      	lsrs	r3, r3, #2
 8008020:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008022:	2300      	movs	r3, #0
 8008024:	61bb      	str	r3, [r7, #24]
 8008026:	e018      	b.n	800805a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008028:	79fb      	ldrb	r3, [r7, #7]
 800802a:	031a      	lsls	r2, r3, #12
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	4413      	add	r3, r2
 8008030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008034:	461a      	mov	r2, r3
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	3301      	adds	r3, #1
 8008040:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	3301      	adds	r3, #1
 8008046:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008048:	69fb      	ldr	r3, [r7, #28]
 800804a:	3301      	adds	r3, #1
 800804c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	3301      	adds	r3, #1
 8008052:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	3301      	adds	r3, #1
 8008058:	61bb      	str	r3, [r7, #24]
 800805a:	69ba      	ldr	r2, [r7, #24]
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	429a      	cmp	r2, r3
 8008060:	d3e2      	bcc.n	8008028 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	3724      	adds	r7, #36	; 0x24
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008070:	b480      	push	{r7}
 8008072:	b08b      	sub	sp, #44	; 0x2c
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	4613      	mov	r3, r2
 800807c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008086:	88fb      	ldrh	r3, [r7, #6]
 8008088:	089b      	lsrs	r3, r3, #2
 800808a:	b29b      	uxth	r3, r3
 800808c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800808e:	88fb      	ldrh	r3, [r7, #6]
 8008090:	f003 0303 	and.w	r3, r3, #3
 8008094:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008096:	2300      	movs	r3, #0
 8008098:	623b      	str	r3, [r7, #32]
 800809a:	e014      	b.n	80080c6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a6:	601a      	str	r2, [r3, #0]
    pDest++;
 80080a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080aa:	3301      	adds	r3, #1
 80080ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80080ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b0:	3301      	adds	r3, #1
 80080b2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80080b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b6:	3301      	adds	r3, #1
 80080b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80080ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080bc:	3301      	adds	r3, #1
 80080be:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80080c0:	6a3b      	ldr	r3, [r7, #32]
 80080c2:	3301      	adds	r3, #1
 80080c4:	623b      	str	r3, [r7, #32]
 80080c6:	6a3a      	ldr	r2, [r7, #32]
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d3e6      	bcc.n	800809c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80080ce:	8bfb      	ldrh	r3, [r7, #30]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d01e      	beq.n	8008112 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80080d4:	2300      	movs	r3, #0
 80080d6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080de:	461a      	mov	r2, r3
 80080e0:	f107 0310 	add.w	r3, r7, #16
 80080e4:	6812      	ldr	r2, [r2, #0]
 80080e6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80080e8:	693a      	ldr	r2, [r7, #16]
 80080ea:	6a3b      	ldr	r3, [r7, #32]
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	00db      	lsls	r3, r3, #3
 80080f0:	fa22 f303 	lsr.w	r3, r2, r3
 80080f4:	b2da      	uxtb	r2, r3
 80080f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f8:	701a      	strb	r2, [r3, #0]
      i++;
 80080fa:	6a3b      	ldr	r3, [r7, #32]
 80080fc:	3301      	adds	r3, #1
 80080fe:	623b      	str	r3, [r7, #32]
      pDest++;
 8008100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008102:	3301      	adds	r3, #1
 8008104:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008106:	8bfb      	ldrh	r3, [r7, #30]
 8008108:	3b01      	subs	r3, #1
 800810a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800810c:	8bfb      	ldrh	r3, [r7, #30]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1ea      	bne.n	80080e8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008114:	4618      	mov	r0, r3
 8008116:	372c      	adds	r7, #44	; 0x2c
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	695b      	ldr	r3, [r3, #20]
 800812c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	699b      	ldr	r3, [r3, #24]
 8008132:	68fa      	ldr	r2, [r7, #12]
 8008134:	4013      	ands	r3, r2
 8008136:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008138:	68fb      	ldr	r3, [r7, #12]
}
 800813a:	4618      	mov	r0, r3
 800813c:	3714      	adds	r7, #20
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr

08008146 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008146:	b480      	push	{r7}
 8008148:	b083      	sub	sp, #12
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	695b      	ldr	r3, [r3, #20]
 8008152:	f003 0301 	and.w	r3, r3, #1
}
 8008156:	4618      	mov	r0, r3
 8008158:	370c      	adds	r7, #12
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
	...

08008164 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800816c:	2300      	movs	r3, #0
 800816e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	3301      	adds	r3, #1
 8008174:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	4a13      	ldr	r2, [pc, #76]	; (80081c8 <USB_CoreReset+0x64>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d901      	bls.n	8008182 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800817e:	2303      	movs	r3, #3
 8008180:	e01b      	b.n	80081ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	2b00      	cmp	r3, #0
 8008188:	daf2      	bge.n	8008170 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800818a:	2300      	movs	r3, #0
 800818c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	f043 0201 	orr.w	r2, r3, #1
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	3301      	adds	r3, #1
 800819e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4a09      	ldr	r2, [pc, #36]	; (80081c8 <USB_CoreReset+0x64>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d901      	bls.n	80081ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80081a8:	2303      	movs	r3, #3
 80081aa:	e006      	b.n	80081ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	f003 0301 	and.w	r3, r3, #1
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d0f0      	beq.n	800819a <USB_CoreReset+0x36>

  return HAL_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3714      	adds	r7, #20
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	00030d40 	.word	0x00030d40

080081cc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80081cc:	b084      	sub	sp, #16
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b086      	sub	sp, #24
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
 80081d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80081da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80081de:	2300      	movs	r3, #0
 80081e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80081ec:	461a      	mov	r2, r3
 80081ee:	2300      	movs	r3, #0
 80081f0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008202:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800821a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800821e:	2b00      	cmp	r3, #0
 8008220:	d018      	beq.n	8008254 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008224:	2b01      	cmp	r3, #1
 8008226:	d10a      	bne.n	800823e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	68fa      	ldr	r2, [r7, #12]
 8008232:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008236:	f043 0304 	orr.w	r3, r3, #4
 800823a:	6013      	str	r3, [r2, #0]
 800823c:	e014      	b.n	8008268 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800824c:	f023 0304 	bic.w	r3, r3, #4
 8008250:	6013      	str	r3, [r2, #0]
 8008252:	e009      	b.n	8008268 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008262:	f023 0304 	bic.w	r3, r3, #4
 8008266:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008268:	2110      	movs	r1, #16
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f7ff fe5e 	bl	8007f2c <USB_FlushTxFifo>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d001      	beq.n	800827a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f7ff fe8a 	bl	8007f94 <USB_FlushRxFifo>
 8008280:	4603      	mov	r3, r0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d001      	beq.n	800828a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800828a:	2300      	movs	r3, #0
 800828c:	613b      	str	r3, [r7, #16]
 800828e:	e015      	b.n	80082bc <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	015a      	lsls	r2, r3, #5
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	4413      	add	r3, r2
 8008298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800829c:	461a      	mov	r2, r3
 800829e:	f04f 33ff 	mov.w	r3, #4294967295
 80082a2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	015a      	lsls	r2, r3, #5
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	4413      	add	r3, r2
 80082ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082b0:	461a      	mov	r2, r3
 80082b2:	2300      	movs	r3, #0
 80082b4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	3301      	adds	r3, #1
 80082ba:	613b      	str	r3, [r7, #16]
 80082bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082be:	693a      	ldr	r2, [r7, #16]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d3e5      	bcc.n	8008290 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f04f 32ff 	mov.w	r2, #4294967295
 80082d0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00b      	beq.n	80082f6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082e4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a13      	ldr	r2, [pc, #76]	; (8008338 <USB_HostInit+0x16c>)
 80082ea:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4a13      	ldr	r2, [pc, #76]	; (800833c <USB_HostInit+0x170>)
 80082f0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80082f4:	e009      	b.n	800830a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2280      	movs	r2, #128	; 0x80
 80082fa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a10      	ldr	r2, [pc, #64]	; (8008340 <USB_HostInit+0x174>)
 8008300:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a0f      	ldr	r2, [pc, #60]	; (8008344 <USB_HostInit+0x178>)
 8008306:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800830a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830c:	2b00      	cmp	r3, #0
 800830e:	d105      	bne.n	800831c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	f043 0210 	orr.w	r2, r3, #16
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	699a      	ldr	r2, [r3, #24]
 8008320:	4b09      	ldr	r3, [pc, #36]	; (8008348 <USB_HostInit+0x17c>)
 8008322:	4313      	orrs	r3, r2
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008328:	7dfb      	ldrb	r3, [r7, #23]
}
 800832a:	4618      	mov	r0, r3
 800832c:	3718      	adds	r7, #24
 800832e:	46bd      	mov	sp, r7
 8008330:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008334:	b004      	add	sp, #16
 8008336:	4770      	bx	lr
 8008338:	01000200 	.word	0x01000200
 800833c:	00e00300 	.word	0x00e00300
 8008340:	00600080 	.word	0x00600080
 8008344:	004000e0 	.word	0x004000e0
 8008348:	a3200008 	.word	0xa3200008

0800834c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800834c:	b480      	push	{r7}
 800834e:	b085      	sub	sp, #20
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	460b      	mov	r3, r1
 8008356:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	68fa      	ldr	r2, [r7, #12]
 8008366:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800836a:	f023 0303 	bic.w	r3, r3, #3
 800836e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	78fb      	ldrb	r3, [r7, #3]
 800837a:	f003 0303 	and.w	r3, r3, #3
 800837e:	68f9      	ldr	r1, [r7, #12]
 8008380:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008384:	4313      	orrs	r3, r2
 8008386:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008388:	78fb      	ldrb	r3, [r7, #3]
 800838a:	2b01      	cmp	r3, #1
 800838c:	d107      	bne.n	800839e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008394:	461a      	mov	r2, r3
 8008396:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800839a:	6053      	str	r3, [r2, #4]
 800839c:	e009      	b.n	80083b2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800839e:	78fb      	ldrb	r3, [r7, #3]
 80083a0:	2b02      	cmp	r3, #2
 80083a2:	d106      	bne.n	80083b2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083aa:	461a      	mov	r2, r3
 80083ac:	f241 7370 	movw	r3, #6000	; 0x1770
 80083b0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3714      	adds	r7, #20
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr

080083c0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80083cc:	2300      	movs	r3, #0
 80083ce:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80083e0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80083ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083ee:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80083f0:	2064      	movs	r0, #100	; 0x64
 80083f2:	f7fa f8bd 	bl	8002570 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80083fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008402:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008404:	200a      	movs	r0, #10
 8008406:	f7fa f8b3 	bl	8002570 <HAL_Delay>

  return HAL_OK;
 800840a:	2300      	movs	r3, #0
}
 800840c:	4618      	mov	r0, r3
 800840e:	3710      	adds	r7, #16
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008414:	b480      	push	{r7}
 8008416:	b085      	sub	sp, #20
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	460b      	mov	r3, r1
 800841e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008424:	2300      	movs	r3, #0
 8008426:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008438:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008440:	2b00      	cmp	r3, #0
 8008442:	d109      	bne.n	8008458 <USB_DriveVbus+0x44>
 8008444:	78fb      	ldrb	r3, [r7, #3]
 8008446:	2b01      	cmp	r3, #1
 8008448:	d106      	bne.n	8008458 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008452:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008456:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800845e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008462:	d109      	bne.n	8008478 <USB_DriveVbus+0x64>
 8008464:	78fb      	ldrb	r3, [r7, #3]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d106      	bne.n	8008478 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008472:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008476:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	3714      	adds	r7, #20
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr

08008486 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008486:	b480      	push	{r7}
 8008488:	b085      	sub	sp, #20
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008492:	2300      	movs	r3, #0
 8008494:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	0c5b      	lsrs	r3, r3, #17
 80084a4:	f003 0303 	and.w	r3, r3, #3
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3714      	adds	r7, #20
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	b29b      	uxth	r3, r3
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3714      	adds	r7, #20
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr
	...

080084d8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b088      	sub	sp, #32
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	4608      	mov	r0, r1
 80084e2:	4611      	mov	r1, r2
 80084e4:	461a      	mov	r2, r3
 80084e6:	4603      	mov	r3, r0
 80084e8:	70fb      	strb	r3, [r7, #3]
 80084ea:	460b      	mov	r3, r1
 80084ec:	70bb      	strb	r3, [r7, #2]
 80084ee:	4613      	mov	r3, r2
 80084f0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80084f2:	2300      	movs	r3, #0
 80084f4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80084fa:	78fb      	ldrb	r3, [r7, #3]
 80084fc:	015a      	lsls	r2, r3, #5
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	4413      	add	r3, r2
 8008502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008506:	461a      	mov	r2, r3
 8008508:	f04f 33ff 	mov.w	r3, #4294967295
 800850c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800850e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008512:	2b03      	cmp	r3, #3
 8008514:	d87e      	bhi.n	8008614 <USB_HC_Init+0x13c>
 8008516:	a201      	add	r2, pc, #4	; (adr r2, 800851c <USB_HC_Init+0x44>)
 8008518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800851c:	0800852d 	.word	0x0800852d
 8008520:	080085d7 	.word	0x080085d7
 8008524:	0800852d 	.word	0x0800852d
 8008528:	08008599 	.word	0x08008599
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800852c:	78fb      	ldrb	r3, [r7, #3]
 800852e:	015a      	lsls	r2, r3, #5
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	4413      	add	r3, r2
 8008534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008538:	461a      	mov	r2, r3
 800853a:	f240 439d 	movw	r3, #1181	; 0x49d
 800853e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008540:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008544:	2b00      	cmp	r3, #0
 8008546:	da10      	bge.n	800856a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008548:	78fb      	ldrb	r3, [r7, #3]
 800854a:	015a      	lsls	r2, r3, #5
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	4413      	add	r3, r2
 8008550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	78fa      	ldrb	r2, [r7, #3]
 8008558:	0151      	lsls	r1, r2, #5
 800855a:	693a      	ldr	r2, [r7, #16]
 800855c:	440a      	add	r2, r1
 800855e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008566:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008568:	e057      	b.n	800861a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800856e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008572:	2b00      	cmp	r3, #0
 8008574:	d051      	beq.n	800861a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008576:	78fb      	ldrb	r3, [r7, #3]
 8008578:	015a      	lsls	r2, r3, #5
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	4413      	add	r3, r2
 800857e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	78fa      	ldrb	r2, [r7, #3]
 8008586:	0151      	lsls	r1, r2, #5
 8008588:	693a      	ldr	r2, [r7, #16]
 800858a:	440a      	add	r2, r1
 800858c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008590:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008594:	60d3      	str	r3, [r2, #12]
      break;
 8008596:	e040      	b.n	800861a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008598:	78fb      	ldrb	r3, [r7, #3]
 800859a:	015a      	lsls	r2, r3, #5
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	4413      	add	r3, r2
 80085a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085a4:	461a      	mov	r2, r3
 80085a6:	f240 639d 	movw	r3, #1693	; 0x69d
 80085aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80085ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	da34      	bge.n	800861e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80085b4:	78fb      	ldrb	r3, [r7, #3]
 80085b6:	015a      	lsls	r2, r3, #5
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	4413      	add	r3, r2
 80085bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	78fa      	ldrb	r2, [r7, #3]
 80085c4:	0151      	lsls	r1, r2, #5
 80085c6:	693a      	ldr	r2, [r7, #16]
 80085c8:	440a      	add	r2, r1
 80085ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085d2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80085d4:	e023      	b.n	800861e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80085d6:	78fb      	ldrb	r3, [r7, #3]
 80085d8:	015a      	lsls	r2, r3, #5
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	4413      	add	r3, r2
 80085de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085e2:	461a      	mov	r2, r3
 80085e4:	f240 2325 	movw	r3, #549	; 0x225
 80085e8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80085ea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	da17      	bge.n	8008622 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80085f2:	78fb      	ldrb	r3, [r7, #3]
 80085f4:	015a      	lsls	r2, r3, #5
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	4413      	add	r3, r2
 80085fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	78fa      	ldrb	r2, [r7, #3]
 8008602:	0151      	lsls	r1, r2, #5
 8008604:	693a      	ldr	r2, [r7, #16]
 8008606:	440a      	add	r2, r1
 8008608:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800860c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008610:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008612:	e006      	b.n	8008622 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	77fb      	strb	r3, [r7, #31]
      break;
 8008618:	e004      	b.n	8008624 <USB_HC_Init+0x14c>
      break;
 800861a:	bf00      	nop
 800861c:	e002      	b.n	8008624 <USB_HC_Init+0x14c>
      break;
 800861e:	bf00      	nop
 8008620:	e000      	b.n	8008624 <USB_HC_Init+0x14c>
      break;
 8008622:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008624:	78fb      	ldrb	r3, [r7, #3]
 8008626:	015a      	lsls	r2, r3, #5
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	4413      	add	r3, r2
 800862c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	78fa      	ldrb	r2, [r7, #3]
 8008634:	0151      	lsls	r1, r2, #5
 8008636:	693a      	ldr	r2, [r7, #16]
 8008638:	440a      	add	r2, r1
 800863a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800863e:	f043 0302 	orr.w	r3, r3, #2
 8008642:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800864a:	699a      	ldr	r2, [r3, #24]
 800864c:	78fb      	ldrb	r3, [r7, #3]
 800864e:	f003 030f 	and.w	r3, r3, #15
 8008652:	2101      	movs	r1, #1
 8008654:	fa01 f303 	lsl.w	r3, r1, r3
 8008658:	6939      	ldr	r1, [r7, #16]
 800865a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800865e:	4313      	orrs	r3, r2
 8008660:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	699b      	ldr	r3, [r3, #24]
 8008666:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800866e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008672:	2b00      	cmp	r3, #0
 8008674:	da03      	bge.n	800867e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800867a:	61bb      	str	r3, [r7, #24]
 800867c:	e001      	b.n	8008682 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800867e:	2300      	movs	r3, #0
 8008680:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f7ff feff 	bl	8008486 <USB_GetHostSpeed>
 8008688:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800868a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800868e:	2b02      	cmp	r3, #2
 8008690:	d106      	bne.n	80086a0 <USB_HC_Init+0x1c8>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2b02      	cmp	r3, #2
 8008696:	d003      	beq.n	80086a0 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008698:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800869c:	617b      	str	r3, [r7, #20]
 800869e:	e001      	b.n	80086a4 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80086a0:	2300      	movs	r3, #0
 80086a2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80086a4:	787b      	ldrb	r3, [r7, #1]
 80086a6:	059b      	lsls	r3, r3, #22
 80086a8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80086ac:	78bb      	ldrb	r3, [r7, #2]
 80086ae:	02db      	lsls	r3, r3, #11
 80086b0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80086b4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80086b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80086ba:	049b      	lsls	r3, r3, #18
 80086bc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80086c0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80086c2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80086c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80086c8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80086ca:	69bb      	ldr	r3, [r7, #24]
 80086cc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80086ce:	78fb      	ldrb	r3, [r7, #3]
 80086d0:	0159      	lsls	r1, r3, #5
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	440b      	add	r3, r1
 80086d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086da:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80086e0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80086e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80086e6:	2b03      	cmp	r3, #3
 80086e8:	d003      	beq.n	80086f2 <USB_HC_Init+0x21a>
 80086ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d10f      	bne.n	8008712 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80086f2:	78fb      	ldrb	r3, [r7, #3]
 80086f4:	015a      	lsls	r2, r3, #5
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	4413      	add	r3, r2
 80086fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	78fa      	ldrb	r2, [r7, #3]
 8008702:	0151      	lsls	r1, r2, #5
 8008704:	693a      	ldr	r2, [r7, #16]
 8008706:	440a      	add	r2, r1
 8008708:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800870c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008710:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008712:	7ffb      	ldrb	r3, [r7, #31]
}
 8008714:	4618      	mov	r0, r3
 8008716:	3720      	adds	r7, #32
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b08c      	sub	sp, #48	; 0x30
 8008720:	af02      	add	r7, sp, #8
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	4613      	mov	r3, r2
 8008728:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	785b      	ldrb	r3, [r3, #1]
 8008732:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008734:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008738:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800873e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008742:	2b00      	cmp	r3, #0
 8008744:	d02d      	beq.n	80087a2 <USB_HC_StartXfer+0x86>
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	791b      	ldrb	r3, [r3, #4]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d129      	bne.n	80087a2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800874e:	79fb      	ldrb	r3, [r7, #7]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d117      	bne.n	8008784 <USB_HC_StartXfer+0x68>
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	79db      	ldrb	r3, [r3, #7]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d003      	beq.n	8008764 <USB_HC_StartXfer+0x48>
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	79db      	ldrb	r3, [r3, #7]
 8008760:	2b02      	cmp	r3, #2
 8008762:	d10f      	bne.n	8008784 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	015a      	lsls	r2, r3, #5
 8008768:	6a3b      	ldr	r3, [r7, #32]
 800876a:	4413      	add	r3, r2
 800876c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	69fa      	ldr	r2, [r7, #28]
 8008774:	0151      	lsls	r1, r2, #5
 8008776:	6a3a      	ldr	r2, [r7, #32]
 8008778:	440a      	add	r2, r1
 800877a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800877e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008782:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008784:	79fb      	ldrb	r3, [r7, #7]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d10b      	bne.n	80087a2 <USB_HC_StartXfer+0x86>
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	795b      	ldrb	r3, [r3, #5]
 800878e:	2b01      	cmp	r3, #1
 8008790:	d107      	bne.n	80087a2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	785b      	ldrb	r3, [r3, #1]
 8008796:	4619      	mov	r1, r3
 8008798:	68f8      	ldr	r0, [r7, #12]
 800879a:	f000 fa0f 	bl	8008bbc <USB_DoPing>
      return HAL_OK;
 800879e:	2300      	movs	r3, #0
 80087a0:	e0f8      	b.n	8008994 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d018      	beq.n	80087dc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	695b      	ldr	r3, [r3, #20]
 80087ae:	68ba      	ldr	r2, [r7, #8]
 80087b0:	8912      	ldrh	r2, [r2, #8]
 80087b2:	4413      	add	r3, r2
 80087b4:	3b01      	subs	r3, #1
 80087b6:	68ba      	ldr	r2, [r7, #8]
 80087b8:	8912      	ldrh	r2, [r2, #8]
 80087ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80087be:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80087c0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80087c2:	8b7b      	ldrh	r3, [r7, #26]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d90b      	bls.n	80087e0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80087c8:	8b7b      	ldrh	r3, [r7, #26]
 80087ca:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80087cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80087ce:	68ba      	ldr	r2, [r7, #8]
 80087d0:	8912      	ldrh	r2, [r2, #8]
 80087d2:	fb03 f202 	mul.w	r2, r3, r2
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	611a      	str	r2, [r3, #16]
 80087da:	e001      	b.n	80087e0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80087dc:	2301      	movs	r3, #1
 80087de:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	78db      	ldrb	r3, [r3, #3]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d007      	beq.n	80087f8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80087e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80087ea:	68ba      	ldr	r2, [r7, #8]
 80087ec:	8912      	ldrh	r2, [r2, #8]
 80087ee:	fb03 f202 	mul.w	r2, r3, r2
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	611a      	str	r2, [r3, #16]
 80087f6:	e003      	b.n	8008800 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	695a      	ldr	r2, [r3, #20]
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008808:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800880a:	04d9      	lsls	r1, r3, #19
 800880c:	4b63      	ldr	r3, [pc, #396]	; (800899c <USB_HC_StartXfer+0x280>)
 800880e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008810:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	7a9b      	ldrb	r3, [r3, #10]
 8008816:	075b      	lsls	r3, r3, #29
 8008818:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800881c:	69f9      	ldr	r1, [r7, #28]
 800881e:	0148      	lsls	r0, r1, #5
 8008820:	6a39      	ldr	r1, [r7, #32]
 8008822:	4401      	add	r1, r0
 8008824:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008828:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800882a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800882c:	79fb      	ldrb	r3, [r7, #7]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d009      	beq.n	8008846 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	68d9      	ldr	r1, [r3, #12]
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	015a      	lsls	r2, r3, #5
 800883a:	6a3b      	ldr	r3, [r7, #32]
 800883c:	4413      	add	r3, r2
 800883e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008842:	460a      	mov	r2, r1
 8008844:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008846:	6a3b      	ldr	r3, [r7, #32]
 8008848:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	f003 0301 	and.w	r3, r3, #1
 8008852:	2b00      	cmp	r3, #0
 8008854:	bf0c      	ite	eq
 8008856:	2301      	moveq	r3, #1
 8008858:	2300      	movne	r3, #0
 800885a:	b2db      	uxtb	r3, r3
 800885c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800885e:	69fb      	ldr	r3, [r7, #28]
 8008860:	015a      	lsls	r2, r3, #5
 8008862:	6a3b      	ldr	r3, [r7, #32]
 8008864:	4413      	add	r3, r2
 8008866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	69fa      	ldr	r2, [r7, #28]
 800886e:	0151      	lsls	r1, r2, #5
 8008870:	6a3a      	ldr	r2, [r7, #32]
 8008872:	440a      	add	r2, r1
 8008874:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008878:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800887c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	015a      	lsls	r2, r3, #5
 8008882:	6a3b      	ldr	r3, [r7, #32]
 8008884:	4413      	add	r3, r2
 8008886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	7e7b      	ldrb	r3, [r7, #25]
 800888e:	075b      	lsls	r3, r3, #29
 8008890:	69f9      	ldr	r1, [r7, #28]
 8008892:	0148      	lsls	r0, r1, #5
 8008894:	6a39      	ldr	r1, [r7, #32]
 8008896:	4401      	add	r1, r0
 8008898:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800889c:	4313      	orrs	r3, r2
 800889e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	015a      	lsls	r2, r3, #5
 80088a4:	6a3b      	ldr	r3, [r7, #32]
 80088a6:	4413      	add	r3, r2
 80088a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80088b6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	78db      	ldrb	r3, [r3, #3]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d004      	beq.n	80088ca <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088c6:	613b      	str	r3, [r7, #16]
 80088c8:	e003      	b.n	80088d2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80088d0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088d8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	015a      	lsls	r2, r3, #5
 80088de:	6a3b      	ldr	r3, [r7, #32]
 80088e0:	4413      	add	r3, r2
 80088e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088e6:	461a      	mov	r2, r3
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80088ec:	79fb      	ldrb	r3, [r7, #7]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d001      	beq.n	80088f6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80088f2:	2300      	movs	r3, #0
 80088f4:	e04e      	b.n	8008994 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	78db      	ldrb	r3, [r3, #3]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d149      	bne.n	8008992 <USB_HC_StartXfer+0x276>
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	695b      	ldr	r3, [r3, #20]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d045      	beq.n	8008992 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	79db      	ldrb	r3, [r3, #7]
 800890a:	2b03      	cmp	r3, #3
 800890c:	d830      	bhi.n	8008970 <USB_HC_StartXfer+0x254>
 800890e:	a201      	add	r2, pc, #4	; (adr r2, 8008914 <USB_HC_StartXfer+0x1f8>)
 8008910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008914:	08008925 	.word	0x08008925
 8008918:	08008949 	.word	0x08008949
 800891c:	08008925 	.word	0x08008925
 8008920:	08008949 	.word	0x08008949
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	695b      	ldr	r3, [r3, #20]
 8008928:	3303      	adds	r3, #3
 800892a:	089b      	lsrs	r3, r3, #2
 800892c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800892e:	8afa      	ldrh	r2, [r7, #22]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008934:	b29b      	uxth	r3, r3
 8008936:	429a      	cmp	r2, r3
 8008938:	d91c      	bls.n	8008974 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	699b      	ldr	r3, [r3, #24]
 800893e:	f043 0220 	orr.w	r2, r3, #32
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	619a      	str	r2, [r3, #24]
        }
        break;
 8008946:	e015      	b.n	8008974 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	695b      	ldr	r3, [r3, #20]
 800894c:	3303      	adds	r3, #3
 800894e:	089b      	lsrs	r3, r3, #2
 8008950:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008952:	8afa      	ldrh	r2, [r7, #22]
 8008954:	6a3b      	ldr	r3, [r7, #32]
 8008956:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800895a:	691b      	ldr	r3, [r3, #16]
 800895c:	b29b      	uxth	r3, r3
 800895e:	429a      	cmp	r2, r3
 8008960:	d90a      	bls.n	8008978 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	699b      	ldr	r3, [r3, #24]
 8008966:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	619a      	str	r2, [r3, #24]
        }
        break;
 800896e:	e003      	b.n	8008978 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008970:	bf00      	nop
 8008972:	e002      	b.n	800897a <USB_HC_StartXfer+0x25e>
        break;
 8008974:	bf00      	nop
 8008976:	e000      	b.n	800897a <USB_HC_StartXfer+0x25e>
        break;
 8008978:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	68d9      	ldr	r1, [r3, #12]
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	785a      	ldrb	r2, [r3, #1]
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	695b      	ldr	r3, [r3, #20]
 8008986:	b29b      	uxth	r3, r3
 8008988:	2000      	movs	r0, #0
 800898a:	9000      	str	r0, [sp, #0]
 800898c:	68f8      	ldr	r0, [r7, #12]
 800898e:	f7ff fb31 	bl	8007ff4 <USB_WritePacket>
  }

  return HAL_OK;
 8008992:	2300      	movs	r3, #0
}
 8008994:	4618      	mov	r0, r3
 8008996:	3728      	adds	r7, #40	; 0x28
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}
 800899c:	1ff80000 	.word	0x1ff80000

080089a0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b085      	sub	sp, #20
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089b2:	695b      	ldr	r3, [r3, #20]
 80089b4:	b29b      	uxth	r3, r3
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3714      	adds	r7, #20
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr

080089c2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80089c2:	b480      	push	{r7}
 80089c4:	b089      	sub	sp, #36	; 0x24
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
 80089ca:	460b      	mov	r3, r1
 80089cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80089d2:	78fb      	ldrb	r3, [r7, #3]
 80089d4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80089d6:	2300      	movs	r3, #0
 80089d8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	015a      	lsls	r2, r3, #5
 80089de:	69fb      	ldr	r3, [r7, #28]
 80089e0:	4413      	add	r3, r2
 80089e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	0c9b      	lsrs	r3, r3, #18
 80089ea:	f003 0303 	and.w	r3, r3, #3
 80089ee:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80089f0:	69bb      	ldr	r3, [r7, #24]
 80089f2:	015a      	lsls	r2, r3, #5
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	4413      	add	r3, r2
 80089f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	0fdb      	lsrs	r3, r3, #31
 8008a00:	f003 0301 	and.w	r3, r3, #1
 8008a04:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	f003 0320 	and.w	r3, r3, #32
 8008a0e:	2b20      	cmp	r3, #32
 8008a10:	d104      	bne.n	8008a1c <USB_HC_Halt+0x5a>
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d101      	bne.n	8008a1c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	e0c8      	b.n	8008bae <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d002      	beq.n	8008a28 <USB_HC_Halt+0x66>
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	d163      	bne.n	8008af0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008a28:	69bb      	ldr	r3, [r7, #24]
 8008a2a:	015a      	lsls	r2, r3, #5
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	4413      	add	r3, r2
 8008a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	69ba      	ldr	r2, [r7, #24]
 8008a38:	0151      	lsls	r1, r2, #5
 8008a3a:	69fa      	ldr	r2, [r7, #28]
 8008a3c:	440a      	add	r2, r1
 8008a3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a46:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	f003 0320 	and.w	r3, r3, #32
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	f040 80ab 	bne.w	8008bac <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d133      	bne.n	8008aca <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008a62:	69bb      	ldr	r3, [r7, #24]
 8008a64:	015a      	lsls	r2, r3, #5
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	4413      	add	r3, r2
 8008a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	69ba      	ldr	r2, [r7, #24]
 8008a72:	0151      	lsls	r1, r2, #5
 8008a74:	69fa      	ldr	r2, [r7, #28]
 8008a76:	440a      	add	r2, r1
 8008a78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a80:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	015a      	lsls	r2, r3, #5
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	4413      	add	r3, r2
 8008a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	69ba      	ldr	r2, [r7, #24]
 8008a92:	0151      	lsls	r1, r2, #5
 8008a94:	69fa      	ldr	r2, [r7, #28]
 8008a96:	440a      	add	r2, r1
 8008a98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008aa0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008aae:	d81d      	bhi.n	8008aec <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	015a      	lsls	r2, r3, #5
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ac2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ac6:	d0ec      	beq.n	8008aa2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008ac8:	e070      	b.n	8008bac <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	015a      	lsls	r2, r3, #5
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	69ba      	ldr	r2, [r7, #24]
 8008ada:	0151      	lsls	r1, r2, #5
 8008adc:	69fa      	ldr	r2, [r7, #28]
 8008ade:	440a      	add	r2, r1
 8008ae0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ae4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ae8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008aea:	e05f      	b.n	8008bac <USB_HC_Halt+0x1ea>
            break;
 8008aec:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008aee:	e05d      	b.n	8008bac <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008af0:	69bb      	ldr	r3, [r7, #24]
 8008af2:	015a      	lsls	r2, r3, #5
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	4413      	add	r3, r2
 8008af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	69ba      	ldr	r2, [r7, #24]
 8008b00:	0151      	lsls	r1, r2, #5
 8008b02:	69fa      	ldr	r2, [r7, #28]
 8008b04:	440a      	add	r2, r1
 8008b06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b0e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b16:	691b      	ldr	r3, [r3, #16]
 8008b18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d133      	bne.n	8008b88 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	015a      	lsls	r2, r3, #5
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	4413      	add	r3, r2
 8008b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	69ba      	ldr	r2, [r7, #24]
 8008b30:	0151      	lsls	r1, r2, #5
 8008b32:	69fa      	ldr	r2, [r7, #28]
 8008b34:	440a      	add	r2, r1
 8008b36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b3e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008b40:	69bb      	ldr	r3, [r7, #24]
 8008b42:	015a      	lsls	r2, r3, #5
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	4413      	add	r3, r2
 8008b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	69ba      	ldr	r2, [r7, #24]
 8008b50:	0151      	lsls	r1, r2, #5
 8008b52:	69fa      	ldr	r2, [r7, #28]
 8008b54:	440a      	add	r2, r1
 8008b56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b5e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	3301      	adds	r3, #1
 8008b64:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b6c:	d81d      	bhi.n	8008baa <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008b6e:	69bb      	ldr	r3, [r7, #24]
 8008b70:	015a      	lsls	r2, r3, #5
 8008b72:	69fb      	ldr	r3, [r7, #28]
 8008b74:	4413      	add	r3, r2
 8008b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b84:	d0ec      	beq.n	8008b60 <USB_HC_Halt+0x19e>
 8008b86:	e011      	b.n	8008bac <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008b88:	69bb      	ldr	r3, [r7, #24]
 8008b8a:	015a      	lsls	r2, r3, #5
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	4413      	add	r3, r2
 8008b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	69ba      	ldr	r2, [r7, #24]
 8008b98:	0151      	lsls	r1, r2, #5
 8008b9a:	69fa      	ldr	r2, [r7, #28]
 8008b9c:	440a      	add	r2, r1
 8008b9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ba6:	6013      	str	r3, [r2, #0]
 8008ba8:	e000      	b.n	8008bac <USB_HC_Halt+0x1ea>
          break;
 8008baa:	bf00      	nop
    }
  }

  return HAL_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3724      	adds	r7, #36	; 0x24
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr
	...

08008bbc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b087      	sub	sp, #28
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008bcc:	78fb      	ldrb	r3, [r7, #3]
 8008bce:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	04da      	lsls	r2, r3, #19
 8008bd8:	4b15      	ldr	r3, [pc, #84]	; (8008c30 <USB_DoPing+0x74>)
 8008bda:	4013      	ands	r3, r2
 8008bdc:	693a      	ldr	r2, [r7, #16]
 8008bde:	0151      	lsls	r1, r2, #5
 8008be0:	697a      	ldr	r2, [r7, #20]
 8008be2:	440a      	add	r2, r1
 8008be4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008be8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008bec:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	015a      	lsls	r2, r3, #5
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008c04:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c0c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	015a      	lsls	r2, r3, #5
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	4413      	add	r3, r2
 8008c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	371c      	adds	r7, #28
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr
 8008c2e:	bf00      	nop
 8008c30:	1ff80000 	.word	0x1ff80000

08008c34 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b088      	sub	sp, #32
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008c44:	2300      	movs	r3, #0
 8008c46:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f7ff f911 	bl	8007e70 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008c4e:	2110      	movs	r1, #16
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f7ff f96b 	bl	8007f2c <USB_FlushTxFifo>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d001      	beq.n	8008c60 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f7ff f997 	bl	8007f94 <USB_FlushRxFifo>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d001      	beq.n	8008c70 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008c70:	2300      	movs	r3, #0
 8008c72:	61bb      	str	r3, [r7, #24]
 8008c74:	e01f      	b.n	8008cb6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	015a      	lsls	r2, r3, #5
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c8c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c94:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c9c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008c9e:	69bb      	ldr	r3, [r7, #24]
 8008ca0:	015a      	lsls	r2, r3, #5
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008caa:	461a      	mov	r2, r3
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	61bb      	str	r3, [r7, #24]
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	2b0f      	cmp	r3, #15
 8008cba:	d9dc      	bls.n	8008c76 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	61bb      	str	r3, [r7, #24]
 8008cc0:	e034      	b.n	8008d2c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	015a      	lsls	r2, r3, #5
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	4413      	add	r3, r2
 8008cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008cd8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ce0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008ce8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	015a      	lsls	r2, r3, #5
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d08:	d80c      	bhi.n	8008d24 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	015a      	lsls	r2, r3, #5
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	4413      	add	r3, r2
 8008d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d20:	d0ec      	beq.n	8008cfc <USB_StopHost+0xc8>
 8008d22:	e000      	b.n	8008d26 <USB_StopHost+0xf2>
        break;
 8008d24:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	3301      	adds	r3, #1
 8008d2a:	61bb      	str	r3, [r7, #24]
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	2b0f      	cmp	r3, #15
 8008d30:	d9c7      	bls.n	8008cc2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d38:	461a      	mov	r2, r3
 8008d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d3e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f04f 32ff 	mov.w	r2, #4294967295
 8008d46:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f7ff f880 	bl	8007e4e <USB_EnableGlobalInt>

  return ret;
 8008d4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3720      	adds	r7, #32
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008d58:	b590      	push	{r4, r7, lr}
 8008d5a:	b089      	sub	sp, #36	; 0x24
 8008d5c:	af04      	add	r7, sp, #16
 8008d5e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008d60:	2301      	movs	r3, #1
 8008d62:	2202      	movs	r2, #2
 8008d64:	2102      	movs	r1, #2
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 fc66 	bl	8009638 <USBH_FindInterface>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008d70:	7bfb      	ldrb	r3, [r7, #15]
 8008d72:	2bff      	cmp	r3, #255	; 0xff
 8008d74:	d002      	beq.n	8008d7c <USBH_CDC_InterfaceInit+0x24>
 8008d76:	7bfb      	ldrb	r3, [r7, #15]
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d901      	bls.n	8008d80 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008d7c:	2302      	movs	r3, #2
 8008d7e:	e13d      	b.n	8008ffc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008d80:	7bfb      	ldrb	r3, [r7, #15]
 8008d82:	4619      	mov	r1, r3
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 fc3b 	bl	8009600 <USBH_SelectInterface>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008d8e:	7bbb      	ldrb	r3, [r7, #14]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d001      	beq.n	8008d98 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008d94:	2302      	movs	r3, #2
 8008d96:	e131      	b.n	8008ffc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008d9e:	2050      	movs	r0, #80	; 0x50
 8008da0:	f002 fafa 	bl	800b398 <malloc>
 8008da4:	4603      	mov	r3, r0
 8008da6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dae:	69db      	ldr	r3, [r3, #28]
 8008db0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d101      	bne.n	8008dbc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008db8:	2302      	movs	r3, #2
 8008dba:	e11f      	b.n	8008ffc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008dbc:	2250      	movs	r2, #80	; 0x50
 8008dbe:	2100      	movs	r1, #0
 8008dc0:	68b8      	ldr	r0, [r7, #8]
 8008dc2:	f002 faf9 	bl	800b3b8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008dc6:	7bfb      	ldrb	r3, [r7, #15]
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	211a      	movs	r1, #26
 8008dcc:	fb01 f303 	mul.w	r3, r1, r3
 8008dd0:	4413      	add	r3, r2
 8008dd2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	b25b      	sxtb	r3, r3
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	da15      	bge.n	8008e0a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008dde:	7bfb      	ldrb	r3, [r7, #15]
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	211a      	movs	r1, #26
 8008de4:	fb01 f303 	mul.w	r3, r1, r3
 8008de8:	4413      	add	r3, r2
 8008dea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008dee:	781a      	ldrb	r2, [r3, #0]
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008df4:	7bfb      	ldrb	r3, [r7, #15]
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	211a      	movs	r1, #26
 8008dfa:	fb01 f303 	mul.w	r3, r1, r3
 8008dfe:	4413      	add	r3, r2
 8008e00:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008e04:	881a      	ldrh	r2, [r3, #0]
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	785b      	ldrb	r3, [r3, #1]
 8008e0e:	4619      	mov	r1, r3
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f001 ff2c 	bl	800ac6e <USBH_AllocPipe>
 8008e16:	4603      	mov	r3, r0
 8008e18:	461a      	mov	r2, r3
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	7819      	ldrb	r1, [r3, #0]
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	7858      	ldrb	r0, [r3, #1]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008e32:	68ba      	ldr	r2, [r7, #8]
 8008e34:	8952      	ldrh	r2, [r2, #10]
 8008e36:	9202      	str	r2, [sp, #8]
 8008e38:	2203      	movs	r2, #3
 8008e3a:	9201      	str	r2, [sp, #4]
 8008e3c:	9300      	str	r3, [sp, #0]
 8008e3e:	4623      	mov	r3, r4
 8008e40:	4602      	mov	r2, r0
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f001 fee4 	bl	800ac10 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	4619      	mov	r1, r3
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f002 f9f3 	bl	800b23c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008e56:	2300      	movs	r3, #0
 8008e58:	2200      	movs	r2, #0
 8008e5a:	210a      	movs	r1, #10
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 fbeb 	bl	8009638 <USBH_FindInterface>
 8008e62:	4603      	mov	r3, r0
 8008e64:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
 8008e68:	2bff      	cmp	r3, #255	; 0xff
 8008e6a:	d002      	beq.n	8008e72 <USBH_CDC_InterfaceInit+0x11a>
 8008e6c:	7bfb      	ldrb	r3, [r7, #15]
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d901      	bls.n	8008e76 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008e72:	2302      	movs	r3, #2
 8008e74:	e0c2      	b.n	8008ffc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008e76:	7bfb      	ldrb	r3, [r7, #15]
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	211a      	movs	r1, #26
 8008e7c:	fb01 f303 	mul.w	r3, r1, r3
 8008e80:	4413      	add	r3, r2
 8008e82:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	b25b      	sxtb	r3, r3
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	da16      	bge.n	8008ebc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008e8e:	7bfb      	ldrb	r3, [r7, #15]
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	211a      	movs	r1, #26
 8008e94:	fb01 f303 	mul.w	r3, r1, r3
 8008e98:	4413      	add	r3, r2
 8008e9a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008e9e:	781a      	ldrb	r2, [r3, #0]
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008ea4:	7bfb      	ldrb	r3, [r7, #15]
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	211a      	movs	r1, #26
 8008eaa:	fb01 f303 	mul.w	r3, r1, r3
 8008eae:	4413      	add	r3, r2
 8008eb0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008eb4:	881a      	ldrh	r2, [r3, #0]
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	835a      	strh	r2, [r3, #26]
 8008eba:	e015      	b.n	8008ee8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008ebc:	7bfb      	ldrb	r3, [r7, #15]
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	211a      	movs	r1, #26
 8008ec2:	fb01 f303 	mul.w	r3, r1, r3
 8008ec6:	4413      	add	r3, r2
 8008ec8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008ecc:	781a      	ldrb	r2, [r3, #0]
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008ed2:	7bfb      	ldrb	r3, [r7, #15]
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	211a      	movs	r1, #26
 8008ed8:	fb01 f303 	mul.w	r3, r1, r3
 8008edc:	4413      	add	r3, r2
 8008ede:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008ee2:	881a      	ldrh	r2, [r3, #0]
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008ee8:	7bfb      	ldrb	r3, [r7, #15]
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	211a      	movs	r1, #26
 8008eee:	fb01 f303 	mul.w	r3, r1, r3
 8008ef2:	4413      	add	r3, r2
 8008ef4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	b25b      	sxtb	r3, r3
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	da16      	bge.n	8008f2e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008f00:	7bfb      	ldrb	r3, [r7, #15]
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	211a      	movs	r1, #26
 8008f06:	fb01 f303 	mul.w	r3, r1, r3
 8008f0a:	4413      	add	r3, r2
 8008f0c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008f10:	781a      	ldrb	r2, [r3, #0]
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008f16:	7bfb      	ldrb	r3, [r7, #15]
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	211a      	movs	r1, #26
 8008f1c:	fb01 f303 	mul.w	r3, r1, r3
 8008f20:	4413      	add	r3, r2
 8008f22:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008f26:	881a      	ldrh	r2, [r3, #0]
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	835a      	strh	r2, [r3, #26]
 8008f2c:	e015      	b.n	8008f5a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008f2e:	7bfb      	ldrb	r3, [r7, #15]
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	211a      	movs	r1, #26
 8008f34:	fb01 f303 	mul.w	r3, r1, r3
 8008f38:	4413      	add	r3, r2
 8008f3a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008f3e:	781a      	ldrb	r2, [r3, #0]
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008f44:	7bfb      	ldrb	r3, [r7, #15]
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	211a      	movs	r1, #26
 8008f4a:	fb01 f303 	mul.w	r3, r1, r3
 8008f4e:	4413      	add	r3, r2
 8008f50:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008f54:	881a      	ldrh	r2, [r3, #0]
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	7b9b      	ldrb	r3, [r3, #14]
 8008f5e:	4619      	mov	r1, r3
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f001 fe84 	bl	800ac6e <USBH_AllocPipe>
 8008f66:	4603      	mov	r3, r0
 8008f68:	461a      	mov	r2, r3
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	7bdb      	ldrb	r3, [r3, #15]
 8008f72:	4619      	mov	r1, r3
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f001 fe7a 	bl	800ac6e <USBH_AllocPipe>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	7b59      	ldrb	r1, [r3, #13]
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	7b98      	ldrb	r0, [r3, #14]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008f96:	68ba      	ldr	r2, [r7, #8]
 8008f98:	8b12      	ldrh	r2, [r2, #24]
 8008f9a:	9202      	str	r2, [sp, #8]
 8008f9c:	2202      	movs	r2, #2
 8008f9e:	9201      	str	r2, [sp, #4]
 8008fa0:	9300      	str	r3, [sp, #0]
 8008fa2:	4623      	mov	r3, r4
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f001 fe32 	bl	800ac10 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	7b19      	ldrb	r1, [r3, #12]
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	7bd8      	ldrb	r0, [r3, #15]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008fc0:	68ba      	ldr	r2, [r7, #8]
 8008fc2:	8b52      	ldrh	r2, [r2, #26]
 8008fc4:	9202      	str	r2, [sp, #8]
 8008fc6:	2202      	movs	r2, #2
 8008fc8:	9201      	str	r2, [sp, #4]
 8008fca:	9300      	str	r3, [sp, #0]
 8008fcc:	4623      	mov	r3, r4
 8008fce:	4602      	mov	r2, r0
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f001 fe1d 	bl	800ac10 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	7b5b      	ldrb	r3, [r3, #13]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f002 f928 	bl	800b23c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	7b1b      	ldrb	r3, [r3, #12]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f002 f921 	bl	800b23c <USBH_LL_SetToggle>

  return USBH_OK;
 8008ffa:	2300      	movs	r3, #0
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3714      	adds	r7, #20
 8009000:	46bd      	mov	sp, r7
 8009002:	bd90      	pop	{r4, r7, pc}

08009004 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009012:	69db      	ldr	r3, [r3, #28]
 8009014:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00e      	beq.n	800903c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	4619      	mov	r1, r3
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f001 fe12 	bl	800ac4e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	4619      	mov	r1, r3
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f001 fe3d 	bl	800acb0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2200      	movs	r2, #0
 800903a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	7b1b      	ldrb	r3, [r3, #12]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d00e      	beq.n	8009062 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	7b1b      	ldrb	r3, [r3, #12]
 8009048:	4619      	mov	r1, r3
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f001 fdff 	bl	800ac4e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	7b1b      	ldrb	r3, [r3, #12]
 8009054:	4619      	mov	r1, r3
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f001 fe2a 	bl	800acb0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2200      	movs	r2, #0
 8009060:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	7b5b      	ldrb	r3, [r3, #13]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d00e      	beq.n	8009088 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	7b5b      	ldrb	r3, [r3, #13]
 800906e:	4619      	mov	r1, r3
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f001 fdec 	bl	800ac4e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	7b5b      	ldrb	r3, [r3, #13]
 800907a:	4619      	mov	r1, r3
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f001 fe17 	bl	800acb0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2200      	movs	r2, #0
 8009086:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800908e:	69db      	ldr	r3, [r3, #28]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d00b      	beq.n	80090ac <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800909a:	69db      	ldr	r3, [r3, #28]
 800909c:	4618      	mov	r0, r3
 800909e:	f002 f983 	bl	800b3a8 <free>
    phost->pActiveClass->pData = 0U;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090a8:	2200      	movs	r2, #0
 80090aa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3710      	adds	r7, #16
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b084      	sub	sp, #16
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090c4:	69db      	ldr	r3, [r3, #28]
 80090c6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	3340      	adds	r3, #64	; 0x40
 80090cc:	4619      	mov	r1, r3
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 f8b1 	bl	8009236 <GetLineCoding>
 80090d4:	4603      	mov	r3, r0
 80090d6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80090d8:	7afb      	ldrb	r3, [r7, #11]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d105      	bne.n	80090ea <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80090e4:	2102      	movs	r1, #2
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80090ea:	7afb      	ldrb	r3, [r7, #11]
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3710      	adds	r7, #16
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80090fc:	2301      	movs	r3, #1
 80090fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009100:	2300      	movs	r3, #0
 8009102:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800910a:	69db      	ldr	r3, [r3, #28]
 800910c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009114:	2b04      	cmp	r3, #4
 8009116:	d877      	bhi.n	8009208 <USBH_CDC_Process+0x114>
 8009118:	a201      	add	r2, pc, #4	; (adr r2, 8009120 <USBH_CDC_Process+0x2c>)
 800911a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911e:	bf00      	nop
 8009120:	08009135 	.word	0x08009135
 8009124:	0800913b 	.word	0x0800913b
 8009128:	0800916b 	.word	0x0800916b
 800912c:	080091df 	.word	0x080091df
 8009130:	080091ed 	.word	0x080091ed
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009134:	2300      	movs	r3, #0
 8009136:	73fb      	strb	r3, [r7, #15]
      break;
 8009138:	e06d      	b.n	8009216 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800913e:	4619      	mov	r1, r3
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 f897 	bl	8009274 <SetLineCoding>
 8009146:	4603      	mov	r3, r0
 8009148:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800914a:	7bbb      	ldrb	r3, [r7, #14]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d104      	bne.n	800915a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	2202      	movs	r2, #2
 8009154:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009158:	e058      	b.n	800920c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800915a:	7bbb      	ldrb	r3, [r7, #14]
 800915c:	2b01      	cmp	r3, #1
 800915e:	d055      	beq.n	800920c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	2204      	movs	r2, #4
 8009164:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009168:	e050      	b.n	800920c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	3340      	adds	r3, #64	; 0x40
 800916e:	4619      	mov	r1, r3
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 f860 	bl	8009236 <GetLineCoding>
 8009176:	4603      	mov	r3, r0
 8009178:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800917a:	7bbb      	ldrb	r3, [r7, #14]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d126      	bne.n	80091ce <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	2200      	movs	r2, #0
 8009184:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009192:	791b      	ldrb	r3, [r3, #4]
 8009194:	429a      	cmp	r2, r3
 8009196:	d13b      	bne.n	8009210 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091a2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d133      	bne.n	8009210 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091b2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d12b      	bne.n	8009210 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091c0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d124      	bne.n	8009210 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 f958 	bl	800947c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80091cc:	e020      	b.n	8009210 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80091ce:	7bbb      	ldrb	r3, [r7, #14]
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d01d      	beq.n	8009210 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	2204      	movs	r2, #4
 80091d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80091dc:	e018      	b.n	8009210 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 f867 	bl	80092b2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 f8da 	bl	800939e <CDC_ProcessReception>
      break;
 80091ea:	e014      	b.n	8009216 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80091ec:	2100      	movs	r1, #0
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 ffef 	bl	800a1d2 <USBH_ClrFeature>
 80091f4:	4603      	mov	r3, r0
 80091f6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80091f8:	7bbb      	ldrb	r3, [r7, #14]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d10a      	bne.n	8009214 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	2200      	movs	r2, #0
 8009202:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8009206:	e005      	b.n	8009214 <USBH_CDC_Process+0x120>

    default:
      break;
 8009208:	bf00      	nop
 800920a:	e004      	b.n	8009216 <USBH_CDC_Process+0x122>
      break;
 800920c:	bf00      	nop
 800920e:	e002      	b.n	8009216 <USBH_CDC_Process+0x122>
      break;
 8009210:	bf00      	nop
 8009212:	e000      	b.n	8009216 <USBH_CDC_Process+0x122>
      break;
 8009214:	bf00      	nop

  }

  return status;
 8009216:	7bfb      	ldrb	r3, [r7, #15]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	370c      	adds	r7, #12
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr

08009236 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009236:	b580      	push	{r7, lr}
 8009238:	b082      	sub	sp, #8
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
 800923e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	22a1      	movs	r2, #161	; 0xa1
 8009244:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2221      	movs	r2, #33	; 0x21
 800924a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2207      	movs	r2, #7
 800925c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	2207      	movs	r2, #7
 8009262:	4619      	mov	r1, r3
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f001 fa81 	bl	800a76c <USBH_CtlReq>
 800926a:	4603      	mov	r3, r0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3708      	adds	r7, #8
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2221      	movs	r2, #33	; 0x21
 8009282:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2220      	movs	r2, #32
 8009288:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2207      	movs	r2, #7
 800929a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	2207      	movs	r2, #7
 80092a0:	4619      	mov	r1, r3
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f001 fa62 	bl	800a76c <USBH_CtlReq>
 80092a8:	4603      	mov	r3, r0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3708      	adds	r7, #8
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b086      	sub	sp, #24
 80092b6:	af02      	add	r7, sp, #8
 80092b8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092c0:	69db      	ldr	r3, [r3, #28]
 80092c2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80092c4:	2300      	movs	r3, #0
 80092c6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d002      	beq.n	80092d8 <CDC_ProcessTransmission+0x26>
 80092d2:	2b02      	cmp	r3, #2
 80092d4:	d023      	beq.n	800931e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80092d6:	e05e      	b.n	8009396 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092dc:	68fa      	ldr	r2, [r7, #12]
 80092de:	8b12      	ldrh	r2, [r2, #24]
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d90b      	bls.n	80092fc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	69d9      	ldr	r1, [r3, #28]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	8b1a      	ldrh	r2, [r3, #24]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	7b5b      	ldrb	r3, [r3, #13]
 80092f0:	2001      	movs	r0, #1
 80092f2:	9000      	str	r0, [sp, #0]
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f001 fc48 	bl	800ab8a <USBH_BulkSendData>
 80092fa:	e00b      	b.n	8009314 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8009304:	b29a      	uxth	r2, r3
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	7b5b      	ldrb	r3, [r3, #13]
 800930a:	2001      	movs	r0, #1
 800930c:	9000      	str	r0, [sp, #0]
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f001 fc3b 	bl	800ab8a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2202      	movs	r2, #2
 8009318:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800931c:	e03b      	b.n	8009396 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	7b5b      	ldrb	r3, [r3, #13]
 8009322:	4619      	mov	r1, r3
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f001 ff5f 	bl	800b1e8 <USBH_LL_GetURBState>
 800932a:	4603      	mov	r3, r0
 800932c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800932e:	7afb      	ldrb	r3, [r7, #11]
 8009330:	2b01      	cmp	r3, #1
 8009332:	d128      	bne.n	8009386 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	8b12      	ldrh	r2, [r2, #24]
 800933c:	4293      	cmp	r3, r2
 800933e:	d90e      	bls.n	800935e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009344:	68fa      	ldr	r2, [r7, #12]
 8009346:	8b12      	ldrh	r2, [r2, #24]
 8009348:	1a9a      	subs	r2, r3, r2
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	69db      	ldr	r3, [r3, #28]
 8009352:	68fa      	ldr	r2, [r7, #12]
 8009354:	8b12      	ldrh	r2, [r2, #24]
 8009356:	441a      	add	r2, r3
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	61da      	str	r2, [r3, #28]
 800935c:	e002      	b.n	8009364 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2200      	movs	r2, #0
 8009362:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009368:	2b00      	cmp	r3, #0
 800936a:	d004      	beq.n	8009376 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2201      	movs	r2, #1
 8009370:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009374:	e00e      	b.n	8009394 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2200      	movs	r2, #0
 800937a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 f868 	bl	8009454 <USBH_CDC_TransmitCallback>
      break;
 8009384:	e006      	b.n	8009394 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8009386:	7afb      	ldrb	r3, [r7, #11]
 8009388:	2b02      	cmp	r3, #2
 800938a:	d103      	bne.n	8009394 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2201      	movs	r2, #1
 8009390:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009394:	bf00      	nop
  }
}
 8009396:	bf00      	nop
 8009398:	3710      	adds	r7, #16
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}

0800939e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800939e:	b580      	push	{r7, lr}
 80093a0:	b086      	sub	sp, #24
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093ac:	69db      	ldr	r3, [r3, #28]
 80093ae:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80093b0:	2300      	movs	r3, #0
 80093b2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80093ba:	2b03      	cmp	r3, #3
 80093bc:	d002      	beq.n	80093c4 <CDC_ProcessReception+0x26>
 80093be:	2b04      	cmp	r3, #4
 80093c0:	d00e      	beq.n	80093e0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80093c2:	e043      	b.n	800944c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	6a19      	ldr	r1, [r3, #32]
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	8b5a      	ldrh	r2, [r3, #26]
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	7b1b      	ldrb	r3, [r3, #12]
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f001 fbff 	bl	800abd4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	2204      	movs	r2, #4
 80093da:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80093de:	e035      	b.n	800944c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	7b1b      	ldrb	r3, [r3, #12]
 80093e4:	4619      	mov	r1, r3
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f001 fefe 	bl	800b1e8 <USBH_LL_GetURBState>
 80093ec:	4603      	mov	r3, r0
 80093ee:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80093f0:	7cfb      	ldrb	r3, [r7, #19]
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d129      	bne.n	800944a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	7b1b      	ldrb	r3, [r3, #12]
 80093fa:	4619      	mov	r1, r3
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f001 fe61 	bl	800b0c4 <USBH_LL_GetLastXferSize>
 8009402:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	429a      	cmp	r2, r3
 800940c:	d016      	beq.n	800943c <CDC_ProcessReception+0x9e>
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	8b5b      	ldrh	r3, [r3, #26]
 8009412:	461a      	mov	r2, r3
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	4293      	cmp	r3, r2
 8009418:	d910      	bls.n	800943c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	1ad2      	subs	r2, r2, r3
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	6a1a      	ldr	r2, [r3, #32]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	441a      	add	r2, r3
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	2203      	movs	r2, #3
 8009436:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800943a:	e006      	b.n	800944a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	2200      	movs	r2, #0
 8009440:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 f80f 	bl	8009468 <USBH_CDC_ReceiveCallback>
      break;
 800944a:	bf00      	nop
  }
}
 800944c:	bf00      	nop
 800944e:	3718      	adds	r7, #24
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800945c:	bf00      	nop
 800945e:	370c      	adds	r7, #12
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009470:	bf00      	nop
 8009472:	370c      	adds	r7, #12
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr

0800947c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009484:	bf00      	nop
 8009486:	370c      	adds	r7, #12
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	4613      	mov	r3, r2
 800949c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d101      	bne.n	80094a8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80094a4:	2302      	movs	r3, #2
 80094a6:	e029      	b.n	80094fc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	79fa      	ldrb	r2, [r7, #7]
 80094ac:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2200      	movs	r2, #0
 80094b4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80094c0:	68f8      	ldr	r0, [r7, #12]
 80094c2:	f000 f81f 	bl	8009504 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2200      	movs	r2, #0
 80094ca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2200      	movs	r2, #0
 80094d2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2200      	movs	r2, #0
 80094da:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d003      	beq.n	80094f4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	68ba      	ldr	r2, [r7, #8]
 80094f0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80094f4:	68f8      	ldr	r0, [r7, #12]
 80094f6:	f001 fd31 	bl	800af5c <USBH_LL_Init>

  return USBH_OK;
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3710      	adds	r7, #16
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009504:	b480      	push	{r7}
 8009506:	b085      	sub	sp, #20
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800950c:	2300      	movs	r3, #0
 800950e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009510:	2300      	movs	r3, #0
 8009512:	60fb      	str	r3, [r7, #12]
 8009514:	e009      	b.n	800952a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	33e0      	adds	r3, #224	; 0xe0
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	4413      	add	r3, r2
 8009520:	2200      	movs	r2, #0
 8009522:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	3301      	adds	r3, #1
 8009528:	60fb      	str	r3, [r7, #12]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2b0f      	cmp	r3, #15
 800952e:	d9f2      	bls.n	8009516 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009530:	2300      	movs	r3, #0
 8009532:	60fb      	str	r3, [r7, #12]
 8009534:	e009      	b.n	800954a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	4413      	add	r3, r2
 800953c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009540:	2200      	movs	r2, #0
 8009542:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	3301      	adds	r3, #1
 8009548:	60fb      	str	r3, [r7, #12]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009550:	d3f1      	bcc.n	8009536 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2201      	movs	r2, #1
 8009562:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2240      	movs	r2, #64	; 0x40
 8009576:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2201      	movs	r2, #1
 800958a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2200      	movs	r2, #0
 8009592:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2200      	movs	r2, #0
 800959a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800959e:	2300      	movs	r3, #0
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3714      	adds	r7, #20
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80095b6:	2300      	movs	r3, #0
 80095b8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d016      	beq.n	80095ee <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d10e      	bne.n	80095e8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80095d0:	1c59      	adds	r1, r3, #1
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	33de      	adds	r3, #222	; 0xde
 80095dc:	6839      	ldr	r1, [r7, #0]
 80095de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80095e2:	2300      	movs	r3, #0
 80095e4:	73fb      	strb	r3, [r7, #15]
 80095e6:	e004      	b.n	80095f2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80095e8:	2302      	movs	r3, #2
 80095ea:	73fb      	strb	r3, [r7, #15]
 80095ec:	e001      	b.n	80095f2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80095ee:	2302      	movs	r3, #2
 80095f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80095f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3714      	adds	r7, #20
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009600:	b480      	push	{r7}
 8009602:	b085      	sub	sp, #20
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	460b      	mov	r3, r1
 800960a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800960c:	2300      	movs	r3, #0
 800960e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009616:	78fa      	ldrb	r2, [r7, #3]
 8009618:	429a      	cmp	r2, r3
 800961a:	d204      	bcs.n	8009626 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	78fa      	ldrb	r2, [r7, #3]
 8009620:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009624:	e001      	b.n	800962a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009626:	2302      	movs	r3, #2
 8009628:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800962a:	7bfb      	ldrb	r3, [r7, #15]
}
 800962c:	4618      	mov	r0, r3
 800962e:	3714      	adds	r7, #20
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr

08009638 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009638:	b480      	push	{r7}
 800963a:	b087      	sub	sp, #28
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	4608      	mov	r0, r1
 8009642:	4611      	mov	r1, r2
 8009644:	461a      	mov	r2, r3
 8009646:	4603      	mov	r3, r0
 8009648:	70fb      	strb	r3, [r7, #3]
 800964a:	460b      	mov	r3, r1
 800964c:	70bb      	strb	r3, [r7, #2]
 800964e:	4613      	mov	r3, r2
 8009650:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009652:	2300      	movs	r3, #0
 8009654:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009656:	2300      	movs	r3, #0
 8009658:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009660:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009662:	e025      	b.n	80096b0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009664:	7dfb      	ldrb	r3, [r7, #23]
 8009666:	221a      	movs	r2, #26
 8009668:	fb02 f303 	mul.w	r3, r2, r3
 800966c:	3308      	adds	r3, #8
 800966e:	68fa      	ldr	r2, [r7, #12]
 8009670:	4413      	add	r3, r2
 8009672:	3302      	adds	r3, #2
 8009674:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	795b      	ldrb	r3, [r3, #5]
 800967a:	78fa      	ldrb	r2, [r7, #3]
 800967c:	429a      	cmp	r2, r3
 800967e:	d002      	beq.n	8009686 <USBH_FindInterface+0x4e>
 8009680:	78fb      	ldrb	r3, [r7, #3]
 8009682:	2bff      	cmp	r3, #255	; 0xff
 8009684:	d111      	bne.n	80096aa <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800968a:	78ba      	ldrb	r2, [r7, #2]
 800968c:	429a      	cmp	r2, r3
 800968e:	d002      	beq.n	8009696 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009690:	78bb      	ldrb	r3, [r7, #2]
 8009692:	2bff      	cmp	r3, #255	; 0xff
 8009694:	d109      	bne.n	80096aa <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800969a:	787a      	ldrb	r2, [r7, #1]
 800969c:	429a      	cmp	r2, r3
 800969e:	d002      	beq.n	80096a6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80096a0:	787b      	ldrb	r3, [r7, #1]
 80096a2:	2bff      	cmp	r3, #255	; 0xff
 80096a4:	d101      	bne.n	80096aa <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80096a6:	7dfb      	ldrb	r3, [r7, #23]
 80096a8:	e006      	b.n	80096b8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80096aa:	7dfb      	ldrb	r3, [r7, #23]
 80096ac:	3301      	adds	r3, #1
 80096ae:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80096b0:	7dfb      	ldrb	r3, [r7, #23]
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d9d6      	bls.n	8009664 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80096b6:	23ff      	movs	r3, #255	; 0xff
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	371c      	adds	r7, #28
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f001 fc81 	bl	800afd4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80096d2:	2101      	movs	r1, #1
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f001 fd9a 	bl	800b20e <USBH_LL_DriverVBUS>

  return USBH_OK;
 80096da:	2300      	movs	r3, #0
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3708      	adds	r7, #8
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b088      	sub	sp, #32
 80096e8:	af04      	add	r7, sp, #16
 80096ea:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80096ec:	2302      	movs	r3, #2
 80096ee:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80096f0:	2300      	movs	r3, #0
 80096f2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d102      	bne.n	8009706 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2203      	movs	r2, #3
 8009704:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	b2db      	uxtb	r3, r3
 800970c:	2b0b      	cmp	r3, #11
 800970e:	f200 81be 	bhi.w	8009a8e <USBH_Process+0x3aa>
 8009712:	a201      	add	r2, pc, #4	; (adr r2, 8009718 <USBH_Process+0x34>)
 8009714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009718:	08009749 	.word	0x08009749
 800971c:	0800977b 	.word	0x0800977b
 8009720:	080097e3 	.word	0x080097e3
 8009724:	08009a29 	.word	0x08009a29
 8009728:	08009a8f 	.word	0x08009a8f
 800972c:	08009887 	.word	0x08009887
 8009730:	080099cf 	.word	0x080099cf
 8009734:	080098bd 	.word	0x080098bd
 8009738:	080098dd 	.word	0x080098dd
 800973c:	080098fd 	.word	0x080098fd
 8009740:	08009941 	.word	0x08009941
 8009744:	08009a11 	.word	0x08009a11
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800974e:	b2db      	uxtb	r3, r3
 8009750:	2b00      	cmp	r3, #0
 8009752:	f000 819e 	beq.w	8009a92 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2201      	movs	r2, #1
 800975a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800975c:	20c8      	movs	r0, #200	; 0xc8
 800975e:	f001 fd9d 	bl	800b29c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f001 fc93 	bl	800b08e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009778:	e18b      	b.n	8009a92 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009780:	2b01      	cmp	r3, #1
 8009782:	d107      	bne.n	8009794 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2202      	movs	r2, #2
 8009790:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009792:	e18d      	b.n	8009ab0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800979a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800979e:	d914      	bls.n	80097ca <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80097a6:	3301      	adds	r3, #1
 80097a8:	b2da      	uxtb	r2, r3
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80097b6:	2b03      	cmp	r3, #3
 80097b8:	d903      	bls.n	80097c2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	220d      	movs	r2, #13
 80097be:	701a      	strb	r2, [r3, #0]
      break;
 80097c0:	e176      	b.n	8009ab0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2200      	movs	r2, #0
 80097c6:	701a      	strb	r2, [r3, #0]
      break;
 80097c8:	e172      	b.n	8009ab0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80097d0:	f103 020a 	add.w	r2, r3, #10
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80097da:	200a      	movs	r0, #10
 80097dc:	f001 fd5e 	bl	800b29c <USBH_Delay>
      break;
 80097e0:	e166      	b.n	8009ab0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d005      	beq.n	80097f8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80097f2:	2104      	movs	r1, #4
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80097f8:	2064      	movs	r0, #100	; 0x64
 80097fa:	f001 fd4f 	bl	800b29c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f001 fc1e 	bl	800b040 <USBH_LL_GetSpeed>
 8009804:	4603      	mov	r3, r0
 8009806:	461a      	mov	r2, r3
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2205      	movs	r2, #5
 8009812:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009814:	2100      	movs	r1, #0
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f001 fa29 	bl	800ac6e <USBH_AllocPipe>
 800981c:	4603      	mov	r3, r0
 800981e:	461a      	mov	r2, r3
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009824:	2180      	movs	r1, #128	; 0x80
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f001 fa21 	bl	800ac6e <USBH_AllocPipe>
 800982c:	4603      	mov	r3, r0
 800982e:	461a      	mov	r2, r3
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	7919      	ldrb	r1, [r3, #4]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009848:	b292      	uxth	r2, r2
 800984a:	9202      	str	r2, [sp, #8]
 800984c:	2200      	movs	r2, #0
 800984e:	9201      	str	r2, [sp, #4]
 8009850:	9300      	str	r3, [sp, #0]
 8009852:	4603      	mov	r3, r0
 8009854:	2280      	movs	r2, #128	; 0x80
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f001 f9da 	bl	800ac10 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	7959      	ldrb	r1, [r3, #5]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009870:	b292      	uxth	r2, r2
 8009872:	9202      	str	r2, [sp, #8]
 8009874:	2200      	movs	r2, #0
 8009876:	9201      	str	r2, [sp, #4]
 8009878:	9300      	str	r3, [sp, #0]
 800987a:	4603      	mov	r3, r0
 800987c:	2200      	movs	r2, #0
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f001 f9c6 	bl	800ac10 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009884:	e114      	b.n	8009ab0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 f918 	bl	8009abc <USBH_HandleEnum>
 800988c:	4603      	mov	r3, r0
 800988e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009890:	7bbb      	ldrb	r3, [r7, #14]
 8009892:	b2db      	uxtb	r3, r3
 8009894:	2b00      	cmp	r3, #0
 8009896:	f040 80fe 	bne.w	8009a96 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d103      	bne.n	80098b4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2208      	movs	r2, #8
 80098b0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80098b2:	e0f0      	b.n	8009a96 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2207      	movs	r2, #7
 80098b8:	701a      	strb	r2, [r3, #0]
      break;
 80098ba:	e0ec      	b.n	8009a96 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	f000 80e9 	beq.w	8009a9a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80098ce:	2101      	movs	r1, #1
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2208      	movs	r2, #8
 80098d8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80098da:	e0de      	b.n	8009a9a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	4619      	mov	r1, r3
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 fc2c 	bl	800a144 <USBH_SetCfg>
 80098ec:	4603      	mov	r3, r0
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	f040 80d5 	bne.w	8009a9e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2209      	movs	r2, #9
 80098f8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80098fa:	e0d0      	b.n	8009a9e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009902:	f003 0320 	and.w	r3, r3, #32
 8009906:	2b00      	cmp	r3, #0
 8009908:	d016      	beq.n	8009938 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800990a:	2101      	movs	r1, #1
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 fc3c 	bl	800a18a <USBH_SetFeature>
 8009912:	4603      	mov	r3, r0
 8009914:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009916:	7bbb      	ldrb	r3, [r7, #14]
 8009918:	b2db      	uxtb	r3, r3
 800991a:	2b00      	cmp	r3, #0
 800991c:	d103      	bne.n	8009926 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	220a      	movs	r2, #10
 8009922:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009924:	e0bd      	b.n	8009aa2 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8009926:	7bbb      	ldrb	r3, [r7, #14]
 8009928:	b2db      	uxtb	r3, r3
 800992a:	2b03      	cmp	r3, #3
 800992c:	f040 80b9 	bne.w	8009aa2 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	220a      	movs	r2, #10
 8009934:	701a      	strb	r2, [r3, #0]
      break;
 8009936:	e0b4      	b.n	8009aa2 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	220a      	movs	r2, #10
 800993c:	701a      	strb	r2, [r3, #0]
      break;
 800993e:	e0b0      	b.n	8009aa2 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009946:	2b00      	cmp	r3, #0
 8009948:	f000 80ad 	beq.w	8009aa6 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2200      	movs	r2, #0
 8009950:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009954:	2300      	movs	r3, #0
 8009956:	73fb      	strb	r3, [r7, #15]
 8009958:	e016      	b.n	8009988 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800995a:	7bfa      	ldrb	r2, [r7, #15]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	32de      	adds	r2, #222	; 0xde
 8009960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009964:	791a      	ldrb	r2, [r3, #4]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800996c:	429a      	cmp	r2, r3
 800996e:	d108      	bne.n	8009982 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009970:	7bfa      	ldrb	r2, [r7, #15]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	32de      	adds	r2, #222	; 0xde
 8009976:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009980:	e005      	b.n	800998e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009982:	7bfb      	ldrb	r3, [r7, #15]
 8009984:	3301      	adds	r3, #1
 8009986:	73fb      	strb	r3, [r7, #15]
 8009988:	7bfb      	ldrb	r3, [r7, #15]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d0e5      	beq.n	800995a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009994:	2b00      	cmp	r3, #0
 8009996:	d016      	beq.n	80099c6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	4798      	blx	r3
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d109      	bne.n	80099be <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2206      	movs	r2, #6
 80099ae:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80099b6:	2103      	movs	r1, #3
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80099bc:	e073      	b.n	8009aa6 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	220d      	movs	r2, #13
 80099c2:	701a      	strb	r2, [r3, #0]
      break;
 80099c4:	e06f      	b.n	8009aa6 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	220d      	movs	r2, #13
 80099ca:	701a      	strb	r2, [r3, #0]
      break;
 80099cc:	e06b      	b.n	8009aa6 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d017      	beq.n	8009a08 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099de:	691b      	ldr	r3, [r3, #16]
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	4798      	blx	r3
 80099e4:	4603      	mov	r3, r0
 80099e6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80099e8:	7bbb      	ldrb	r3, [r7, #14]
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d103      	bne.n	80099f8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	220b      	movs	r2, #11
 80099f4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80099f6:	e058      	b.n	8009aaa <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80099f8:	7bbb      	ldrb	r3, [r7, #14]
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	2b02      	cmp	r3, #2
 80099fe:	d154      	bne.n	8009aaa <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	220d      	movs	r2, #13
 8009a04:	701a      	strb	r2, [r3, #0]
      break;
 8009a06:	e050      	b.n	8009aaa <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	220d      	movs	r2, #13
 8009a0c:	701a      	strb	r2, [r3, #0]
      break;
 8009a0e:	e04c      	b.n	8009aaa <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d049      	beq.n	8009aae <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a20:	695b      	ldr	r3, [r3, #20]
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	4798      	blx	r3
      }
      break;
 8009a26:	e042      	b.n	8009aae <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f7ff fd67 	bl	8009504 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d009      	beq.n	8009a54 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d005      	beq.n	8009a6a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009a64:	2105      	movs	r1, #5
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d107      	bne.n	8009a86 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f7ff fe20 	bl	80096c4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009a84:	e014      	b.n	8009ab0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f001 faa4 	bl	800afd4 <USBH_LL_Start>
      break;
 8009a8c:	e010      	b.n	8009ab0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8009a8e:	bf00      	nop
 8009a90:	e00e      	b.n	8009ab0 <USBH_Process+0x3cc>
      break;
 8009a92:	bf00      	nop
 8009a94:	e00c      	b.n	8009ab0 <USBH_Process+0x3cc>
      break;
 8009a96:	bf00      	nop
 8009a98:	e00a      	b.n	8009ab0 <USBH_Process+0x3cc>
    break;
 8009a9a:	bf00      	nop
 8009a9c:	e008      	b.n	8009ab0 <USBH_Process+0x3cc>
      break;
 8009a9e:	bf00      	nop
 8009aa0:	e006      	b.n	8009ab0 <USBH_Process+0x3cc>
      break;
 8009aa2:	bf00      	nop
 8009aa4:	e004      	b.n	8009ab0 <USBH_Process+0x3cc>
      break;
 8009aa6:	bf00      	nop
 8009aa8:	e002      	b.n	8009ab0 <USBH_Process+0x3cc>
      break;
 8009aaa:	bf00      	nop
 8009aac:	e000      	b.n	8009ab0 <USBH_Process+0x3cc>
      break;
 8009aae:	bf00      	nop
  }
  return USBH_OK;
 8009ab0:	2300      	movs	r3, #0
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop

08009abc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b088      	sub	sp, #32
 8009ac0:	af04      	add	r7, sp, #16
 8009ac2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	785b      	ldrb	r3, [r3, #1]
 8009ad0:	2b07      	cmp	r3, #7
 8009ad2:	f200 81c1 	bhi.w	8009e58 <USBH_HandleEnum+0x39c>
 8009ad6:	a201      	add	r2, pc, #4	; (adr r2, 8009adc <USBH_HandleEnum+0x20>)
 8009ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009adc:	08009afd 	.word	0x08009afd
 8009ae0:	08009bbb 	.word	0x08009bbb
 8009ae4:	08009c25 	.word	0x08009c25
 8009ae8:	08009cb3 	.word	0x08009cb3
 8009aec:	08009d1d 	.word	0x08009d1d
 8009af0:	08009d8d 	.word	0x08009d8d
 8009af4:	08009dd3 	.word	0x08009dd3
 8009af8:	08009e19 	.word	0x08009e19
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009afc:	2108      	movs	r1, #8
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 fa50 	bl	8009fa4 <USBH_Get_DevDesc>
 8009b04:	4603      	mov	r3, r0
 8009b06:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009b08:	7bbb      	ldrb	r3, [r7, #14]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d130      	bne.n	8009b70 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	7919      	ldrb	r1, [r3, #4]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009b32:	b292      	uxth	r2, r2
 8009b34:	9202      	str	r2, [sp, #8]
 8009b36:	2200      	movs	r2, #0
 8009b38:	9201      	str	r2, [sp, #4]
 8009b3a:	9300      	str	r3, [sp, #0]
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2280      	movs	r2, #128	; 0x80
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f001 f865 	bl	800ac10 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	7959      	ldrb	r1, [r3, #5]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009b5a:	b292      	uxth	r2, r2
 8009b5c:	9202      	str	r2, [sp, #8]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	9201      	str	r2, [sp, #4]
 8009b62:	9300      	str	r3, [sp, #0]
 8009b64:	4603      	mov	r3, r0
 8009b66:	2200      	movs	r2, #0
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f001 f851 	bl	800ac10 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009b6e:	e175      	b.n	8009e5c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b70:	7bbb      	ldrb	r3, [r7, #14]
 8009b72:	2b03      	cmp	r3, #3
 8009b74:	f040 8172 	bne.w	8009e5c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b7e:	3301      	adds	r3, #1
 8009b80:	b2da      	uxtb	r2, r3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b8e:	2b03      	cmp	r3, #3
 8009b90:	d903      	bls.n	8009b9a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	220d      	movs	r2, #13
 8009b96:	701a      	strb	r2, [r3, #0]
      break;
 8009b98:	e160      	b.n	8009e5c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	795b      	ldrb	r3, [r3, #5]
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f001 f885 	bl	800acb0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	791b      	ldrb	r3, [r3, #4]
 8009baa:	4619      	mov	r1, r3
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f001 f87f 	bl	800acb0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	701a      	strb	r2, [r3, #0]
      break;
 8009bb8:	e150      	b.n	8009e5c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009bba:	2112      	movs	r1, #18
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 f9f1 	bl	8009fa4 <USBH_Get_DevDesc>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009bc6:	7bbb      	ldrb	r3, [r7, #14]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d103      	bne.n	8009bd4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2202      	movs	r2, #2
 8009bd0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009bd2:	e145      	b.n	8009e60 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009bd4:	7bbb      	ldrb	r3, [r7, #14]
 8009bd6:	2b03      	cmp	r3, #3
 8009bd8:	f040 8142 	bne.w	8009e60 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009be2:	3301      	adds	r3, #1
 8009be4:	b2da      	uxtb	r2, r3
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009bf2:	2b03      	cmp	r3, #3
 8009bf4:	d903      	bls.n	8009bfe <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	220d      	movs	r2, #13
 8009bfa:	701a      	strb	r2, [r3, #0]
      break;
 8009bfc:	e130      	b.n	8009e60 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	795b      	ldrb	r3, [r3, #5]
 8009c02:	4619      	mov	r1, r3
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f001 f853 	bl	800acb0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	791b      	ldrb	r3, [r3, #4]
 8009c0e:	4619      	mov	r1, r3
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f001 f84d 	bl	800acb0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	701a      	strb	r2, [r3, #0]
      break;
 8009c22:	e11d      	b.n	8009e60 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009c24:	2101      	movs	r1, #1
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 fa68 	bl	800a0fc <USBH_SetAddress>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009c30:	7bbb      	ldrb	r3, [r7, #14]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d132      	bne.n	8009c9c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009c36:	2002      	movs	r0, #2
 8009c38:	f001 fb30 	bl	800b29c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2203      	movs	r2, #3
 8009c48:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	7919      	ldrb	r1, [r3, #4]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009c5e:	b292      	uxth	r2, r2
 8009c60:	9202      	str	r2, [sp, #8]
 8009c62:	2200      	movs	r2, #0
 8009c64:	9201      	str	r2, [sp, #4]
 8009c66:	9300      	str	r3, [sp, #0]
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2280      	movs	r2, #128	; 0x80
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 ffcf 	bl	800ac10 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	7959      	ldrb	r1, [r3, #5]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009c86:	b292      	uxth	r2, r2
 8009c88:	9202      	str	r2, [sp, #8]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	9201      	str	r2, [sp, #4]
 8009c8e:	9300      	str	r3, [sp, #0]
 8009c90:	4603      	mov	r3, r0
 8009c92:	2200      	movs	r2, #0
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 ffbb 	bl	800ac10 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009c9a:	e0e3      	b.n	8009e64 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c9c:	7bbb      	ldrb	r3, [r7, #14]
 8009c9e:	2b03      	cmp	r3, #3
 8009ca0:	f040 80e0 	bne.w	8009e64 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	220d      	movs	r2, #13
 8009ca8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2200      	movs	r2, #0
 8009cae:	705a      	strb	r2, [r3, #1]
      break;
 8009cb0:	e0d8      	b.n	8009e64 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009cb2:	2109      	movs	r1, #9
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 f99d 	bl	8009ff4 <USBH_Get_CfgDesc>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009cbe:	7bbb      	ldrb	r3, [r7, #14]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d103      	bne.n	8009ccc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2204      	movs	r2, #4
 8009cc8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009cca:	e0cd      	b.n	8009e68 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ccc:	7bbb      	ldrb	r3, [r7, #14]
 8009cce:	2b03      	cmp	r3, #3
 8009cd0:	f040 80ca 	bne.w	8009e68 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009cda:	3301      	adds	r3, #1
 8009cdc:	b2da      	uxtb	r2, r3
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009cea:	2b03      	cmp	r3, #3
 8009cec:	d903      	bls.n	8009cf6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	220d      	movs	r2, #13
 8009cf2:	701a      	strb	r2, [r3, #0]
      break;
 8009cf4:	e0b8      	b.n	8009e68 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	795b      	ldrb	r3, [r3, #5]
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 ffd7 	bl	800acb0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	791b      	ldrb	r3, [r3, #4]
 8009d06:	4619      	mov	r1, r3
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f000 ffd1 	bl	800acb0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2200      	movs	r2, #0
 8009d12:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2200      	movs	r2, #0
 8009d18:	701a      	strb	r2, [r3, #0]
      break;
 8009d1a:	e0a5      	b.n	8009e68 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009d22:	4619      	mov	r1, r3
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 f965 	bl	8009ff4 <USBH_Get_CfgDesc>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009d2e:	7bbb      	ldrb	r3, [r7, #14]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d103      	bne.n	8009d3c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2205      	movs	r2, #5
 8009d38:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009d3a:	e097      	b.n	8009e6c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d3c:	7bbb      	ldrb	r3, [r7, #14]
 8009d3e:	2b03      	cmp	r3, #3
 8009d40:	f040 8094 	bne.w	8009e6c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	b2da      	uxtb	r2, r3
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009d5a:	2b03      	cmp	r3, #3
 8009d5c:	d903      	bls.n	8009d66 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	220d      	movs	r2, #13
 8009d62:	701a      	strb	r2, [r3, #0]
      break;
 8009d64:	e082      	b.n	8009e6c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	795b      	ldrb	r3, [r3, #5]
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f000 ff9f 	bl	800acb0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	791b      	ldrb	r3, [r3, #4]
 8009d76:	4619      	mov	r1, r3
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 ff99 	bl	800acb0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2200      	movs	r2, #0
 8009d82:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	701a      	strb	r2, [r3, #0]
      break;
 8009d8a:	e06f      	b.n	8009e6c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d019      	beq.n	8009dca <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009da2:	23ff      	movs	r3, #255	; 0xff
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 f949 	bl	800a03c <USBH_Get_StringDesc>
 8009daa:	4603      	mov	r3, r0
 8009dac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009dae:	7bbb      	ldrb	r3, [r7, #14]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d103      	bne.n	8009dbc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2206      	movs	r2, #6
 8009db8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009dba:	e059      	b.n	8009e70 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009dbc:	7bbb      	ldrb	r3, [r7, #14]
 8009dbe:	2b03      	cmp	r3, #3
 8009dc0:	d156      	bne.n	8009e70 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2206      	movs	r2, #6
 8009dc6:	705a      	strb	r2, [r3, #1]
      break;
 8009dc8:	e052      	b.n	8009e70 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2206      	movs	r2, #6
 8009dce:	705a      	strb	r2, [r3, #1]
      break;
 8009dd0:	e04e      	b.n	8009e70 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d019      	beq.n	8009e10 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009de8:	23ff      	movs	r3, #255	; 0xff
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 f926 	bl	800a03c <USBH_Get_StringDesc>
 8009df0:	4603      	mov	r3, r0
 8009df2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009df4:	7bbb      	ldrb	r3, [r7, #14]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d103      	bne.n	8009e02 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2207      	movs	r2, #7
 8009dfe:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009e00:	e038      	b.n	8009e74 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e02:	7bbb      	ldrb	r3, [r7, #14]
 8009e04:	2b03      	cmp	r3, #3
 8009e06:	d135      	bne.n	8009e74 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2207      	movs	r2, #7
 8009e0c:	705a      	strb	r2, [r3, #1]
      break;
 8009e0e:	e031      	b.n	8009e74 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2207      	movs	r2, #7
 8009e14:	705a      	strb	r2, [r3, #1]
      break;
 8009e16:	e02d      	b.n	8009e74 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d017      	beq.n	8009e52 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009e2e:	23ff      	movs	r3, #255	; 0xff
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 f903 	bl	800a03c <USBH_Get_StringDesc>
 8009e36:	4603      	mov	r3, r0
 8009e38:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009e3a:	7bbb      	ldrb	r3, [r7, #14]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d102      	bne.n	8009e46 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009e40:	2300      	movs	r3, #0
 8009e42:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009e44:	e018      	b.n	8009e78 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e46:	7bbb      	ldrb	r3, [r7, #14]
 8009e48:	2b03      	cmp	r3, #3
 8009e4a:	d115      	bne.n	8009e78 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8009e50:	e012      	b.n	8009e78 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009e52:	2300      	movs	r3, #0
 8009e54:	73fb      	strb	r3, [r7, #15]
      break;
 8009e56:	e00f      	b.n	8009e78 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009e58:	bf00      	nop
 8009e5a:	e00e      	b.n	8009e7a <USBH_HandleEnum+0x3be>
      break;
 8009e5c:	bf00      	nop
 8009e5e:	e00c      	b.n	8009e7a <USBH_HandleEnum+0x3be>
      break;
 8009e60:	bf00      	nop
 8009e62:	e00a      	b.n	8009e7a <USBH_HandleEnum+0x3be>
      break;
 8009e64:	bf00      	nop
 8009e66:	e008      	b.n	8009e7a <USBH_HandleEnum+0x3be>
      break;
 8009e68:	bf00      	nop
 8009e6a:	e006      	b.n	8009e7a <USBH_HandleEnum+0x3be>
      break;
 8009e6c:	bf00      	nop
 8009e6e:	e004      	b.n	8009e7a <USBH_HandleEnum+0x3be>
      break;
 8009e70:	bf00      	nop
 8009e72:	e002      	b.n	8009e7a <USBH_HandleEnum+0x3be>
      break;
 8009e74:	bf00      	nop
 8009e76:	e000      	b.n	8009e7a <USBH_HandleEnum+0x3be>
      break;
 8009e78:	bf00      	nop
  }
  return Status;
 8009e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3710      	adds	r7, #16
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	683a      	ldr	r2, [r7, #0]
 8009e92:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009e96:	bf00      	nop
 8009e98:	370c      	adds	r7, #12
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr

08009ea2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009ea2:	b580      	push	{r7, lr}
 8009ea4:	b082      	sub	sp, #8
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009eb0:	1c5a      	adds	r2, r3, #1
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 f804 	bl	8009ec6 <USBH_HandleSof>
}
 8009ebe:	bf00      	nop
 8009ec0:	3708      	adds	r7, #8
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b082      	sub	sp, #8
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	2b0b      	cmp	r3, #11
 8009ed6:	d10a      	bne.n	8009eee <USBH_HandleSof+0x28>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d005      	beq.n	8009eee <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ee8:	699b      	ldr	r3, [r3, #24]
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	4798      	blx	r3
  }
}
 8009eee:	bf00      	nop
 8009ef0:	3708      	adds	r7, #8
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009ef6:	b480      	push	{r7}
 8009ef8:	b083      	sub	sp, #12
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2201      	movs	r2, #1
 8009f02:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009f06:	bf00      	nop
}
 8009f08:	370c      	adds	r7, #12
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr

08009f12 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009f12:	b480      	push	{r7}
 8009f14:	b083      	sub	sp, #12
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009f22:	bf00      	nop
}
 8009f24:	370c      	adds	r7, #12
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr

08009f2e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009f2e:	b480      	push	{r7}
 8009f30:	b083      	sub	sp, #12
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2201      	movs	r2, #1
 8009f3a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2200      	movs	r2, #0
 8009f42:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009f4e:	2300      	movs	r3, #0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	370c      	adds	r7, #12
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2201      	movs	r2, #1
 8009f68:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f001 f844 	bl	800b00a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	791b      	ldrb	r3, [r3, #4]
 8009f86:	4619      	mov	r1, r3
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 fe91 	bl	800acb0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	795b      	ldrb	r3, [r3, #5]
 8009f92:	4619      	mov	r1, r3
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 fe8b 	bl	800acb0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009f9a:	2300      	movs	r3, #0
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3708      	adds	r7, #8
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b086      	sub	sp, #24
 8009fa8:	af02      	add	r7, sp, #8
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	460b      	mov	r3, r1
 8009fae:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009fb6:	78fb      	ldrb	r3, [r7, #3]
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	9300      	str	r3, [sp, #0]
 8009fbc:	4613      	mov	r3, r2
 8009fbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009fc2:	2100      	movs	r1, #0
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 f864 	bl	800a092 <USBH_GetDescriptor>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8009fce:	7bfb      	ldrb	r3, [r7, #15]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d10a      	bne.n	8009fea <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009fe0:	78fa      	ldrb	r2, [r7, #3]
 8009fe2:	b292      	uxth	r2, r2
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	f000 f918 	bl	800a21a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3710      	adds	r7, #16
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b086      	sub	sp, #24
 8009ff8:	af02      	add	r7, sp, #8
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	460b      	mov	r3, r1
 8009ffe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	331c      	adds	r3, #28
 800a004:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a006:	887b      	ldrh	r3, [r7, #2]
 800a008:	9300      	str	r3, [sp, #0]
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a010:	2100      	movs	r1, #0
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 f83d 	bl	800a092 <USBH_GetDescriptor>
 800a018:	4603      	mov	r3, r0
 800a01a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a01c:	7bfb      	ldrb	r3, [r7, #15]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d107      	bne.n	800a032 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a022:	887b      	ldrh	r3, [r7, #2]
 800a024:	461a      	mov	r2, r3
 800a026:	68b9      	ldr	r1, [r7, #8]
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 f987 	bl	800a33c <USBH_ParseCfgDesc>
 800a02e:	4603      	mov	r3, r0
 800a030:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a032:	7bfb      	ldrb	r3, [r7, #15]
}
 800a034:	4618      	mov	r0, r3
 800a036:	3710      	adds	r7, #16
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b088      	sub	sp, #32
 800a040:	af02      	add	r7, sp, #8
 800a042:	60f8      	str	r0, [r7, #12]
 800a044:	607a      	str	r2, [r7, #4]
 800a046:	461a      	mov	r2, r3
 800a048:	460b      	mov	r3, r1
 800a04a:	72fb      	strb	r3, [r7, #11]
 800a04c:	4613      	mov	r3, r2
 800a04e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800a050:	7afb      	ldrb	r3, [r7, #11]
 800a052:	b29b      	uxth	r3, r3
 800a054:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a058:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a060:	893b      	ldrh	r3, [r7, #8]
 800a062:	9300      	str	r3, [sp, #0]
 800a064:	460b      	mov	r3, r1
 800a066:	2100      	movs	r1, #0
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f000 f812 	bl	800a092 <USBH_GetDescriptor>
 800a06e:	4603      	mov	r3, r0
 800a070:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a072:	7dfb      	ldrb	r3, [r7, #23]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d107      	bne.n	800a088 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a07e:	893a      	ldrh	r2, [r7, #8]
 800a080:	6879      	ldr	r1, [r7, #4]
 800a082:	4618      	mov	r0, r3
 800a084:	f000 fb24 	bl	800a6d0 <USBH_ParseStringDesc>
  }

  return status;
 800a088:	7dfb      	ldrb	r3, [r7, #23]
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3718      	adds	r7, #24
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}

0800a092 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b084      	sub	sp, #16
 800a096:	af00      	add	r7, sp, #0
 800a098:	60f8      	str	r0, [r7, #12]
 800a09a:	607b      	str	r3, [r7, #4]
 800a09c:	460b      	mov	r3, r1
 800a09e:	72fb      	strb	r3, [r7, #11]
 800a0a0:	4613      	mov	r3, r2
 800a0a2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	789b      	ldrb	r3, [r3, #2]
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d11c      	bne.n	800a0e6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a0ac:	7afb      	ldrb	r3, [r7, #11]
 800a0ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a0b2:	b2da      	uxtb	r2, r3
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2206      	movs	r2, #6
 800a0bc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	893a      	ldrh	r2, [r7, #8]
 800a0c2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a0c4:	893b      	ldrh	r3, [r7, #8]
 800a0c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a0ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0ce:	d104      	bne.n	800a0da <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f240 4209 	movw	r2, #1033	; 0x409
 800a0d6:	829a      	strh	r2, [r3, #20]
 800a0d8:	e002      	b.n	800a0e0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	8b3a      	ldrh	r2, [r7, #24]
 800a0e4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a0e6:	8b3b      	ldrh	r3, [r7, #24]
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	6879      	ldr	r1, [r7, #4]
 800a0ec:	68f8      	ldr	r0, [r7, #12]
 800a0ee:	f000 fb3d 	bl	800a76c <USBH_CtlReq>
 800a0f2:	4603      	mov	r3, r0
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3710      	adds	r7, #16
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	460b      	mov	r3, r1
 800a106:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	789b      	ldrb	r3, [r3, #2]
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d10f      	bne.n	800a130 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2200      	movs	r2, #0
 800a114:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2205      	movs	r2, #5
 800a11a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a11c:	78fb      	ldrb	r3, [r7, #3]
 800a11e:	b29a      	uxth	r2, r3
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2200      	movs	r2, #0
 800a128:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2200      	movs	r2, #0
 800a12e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a130:	2200      	movs	r2, #0
 800a132:	2100      	movs	r1, #0
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 fb19 	bl	800a76c <USBH_CtlReq>
 800a13a:	4603      	mov	r3, r0
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3708      	adds	r7, #8
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b082      	sub	sp, #8
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	460b      	mov	r3, r1
 800a14e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	789b      	ldrb	r3, [r3, #2]
 800a154:	2b01      	cmp	r3, #1
 800a156:	d10e      	bne.n	800a176 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2200      	movs	r2, #0
 800a15c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2209      	movs	r2, #9
 800a162:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	887a      	ldrh	r2, [r7, #2]
 800a168:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2200      	movs	r2, #0
 800a16e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2200      	movs	r2, #0
 800a174:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a176:	2200      	movs	r2, #0
 800a178:	2100      	movs	r1, #0
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 faf6 	bl	800a76c <USBH_CtlReq>
 800a180:	4603      	mov	r3, r0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3708      	adds	r7, #8
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}

0800a18a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a18a:	b580      	push	{r7, lr}
 800a18c:	b082      	sub	sp, #8
 800a18e:	af00      	add	r7, sp, #0
 800a190:	6078      	str	r0, [r7, #4]
 800a192:	460b      	mov	r3, r1
 800a194:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	789b      	ldrb	r3, [r3, #2]
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d10f      	bne.n	800a1be <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2203      	movs	r2, #3
 800a1a8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a1aa:	78fb      	ldrb	r3, [r7, #3]
 800a1ac:	b29a      	uxth	r2, r3
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a1be:	2200      	movs	r2, #0
 800a1c0:	2100      	movs	r1, #0
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 fad2 	bl	800a76c <USBH_CtlReq>
 800a1c8:	4603      	mov	r3, r0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3708      	adds	r7, #8
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}

0800a1d2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a1d2:	b580      	push	{r7, lr}
 800a1d4:	b082      	sub	sp, #8
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]
 800a1da:	460b      	mov	r3, r1
 800a1dc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	789b      	ldrb	r3, [r3, #2]
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	d10f      	bne.n	800a206 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2202      	movs	r2, #2
 800a1ea:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a1f8:	78fb      	ldrb	r3, [r7, #3]
 800a1fa:	b29a      	uxth	r2, r3
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800a206:	2200      	movs	r2, #0
 800a208:	2100      	movs	r1, #0
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f000 faae 	bl	800a76c <USBH_CtlReq>
 800a210:	4603      	mov	r3, r0
}
 800a212:	4618      	mov	r0, r3
 800a214:	3708      	adds	r7, #8
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}

0800a21a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a21a:	b480      	push	{r7}
 800a21c:	b085      	sub	sp, #20
 800a21e:	af00      	add	r7, sp, #0
 800a220:	60f8      	str	r0, [r7, #12]
 800a222:	60b9      	str	r1, [r7, #8]
 800a224:	4613      	mov	r3, r2
 800a226:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	781a      	ldrb	r2, [r3, #0]
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	785a      	ldrb	r2, [r3, #1]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	3302      	adds	r3, #2
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	b29a      	uxth	r2, r3
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	3303      	adds	r3, #3
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	b29b      	uxth	r3, r3
 800a248:	021b      	lsls	r3, r3, #8
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	4313      	orrs	r3, r2
 800a24e:	b29a      	uxth	r2, r3
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	791a      	ldrb	r2, [r3, #4]
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	795a      	ldrb	r2, [r3, #5]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	799a      	ldrb	r2, [r3, #6]
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	79da      	ldrb	r2, [r3, #7]
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	79db      	ldrb	r3, [r3, #7]
 800a278:	2b20      	cmp	r3, #32
 800a27a:	dc11      	bgt.n	800a2a0 <USBH_ParseDevDesc+0x86>
 800a27c:	2b08      	cmp	r3, #8
 800a27e:	db16      	blt.n	800a2ae <USBH_ParseDevDesc+0x94>
 800a280:	3b08      	subs	r3, #8
 800a282:	2201      	movs	r2, #1
 800a284:	fa02 f303 	lsl.w	r3, r2, r3
 800a288:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800a28c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a290:	2b00      	cmp	r3, #0
 800a292:	bf14      	ite	ne
 800a294:	2301      	movne	r3, #1
 800a296:	2300      	moveq	r3, #0
 800a298:	b2db      	uxtb	r3, r3
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d102      	bne.n	800a2a4 <USBH_ParseDevDesc+0x8a>
 800a29e:	e006      	b.n	800a2ae <USBH_ParseDevDesc+0x94>
 800a2a0:	2b40      	cmp	r3, #64	; 0x40
 800a2a2:	d104      	bne.n	800a2ae <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	79da      	ldrb	r2, [r3, #7]
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	71da      	strb	r2, [r3, #7]
      break;
 800a2ac:	e003      	b.n	800a2b6 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2240      	movs	r2, #64	; 0x40
 800a2b2:	71da      	strb	r2, [r3, #7]
      break;
 800a2b4:	bf00      	nop
  }

  if (length > 8U)
 800a2b6:	88fb      	ldrh	r3, [r7, #6]
 800a2b8:	2b08      	cmp	r3, #8
 800a2ba:	d939      	bls.n	800a330 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	3308      	adds	r3, #8
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	b29a      	uxth	r2, r3
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	3309      	adds	r3, #9
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	021b      	lsls	r3, r3, #8
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	b29a      	uxth	r2, r3
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	330a      	adds	r3, #10
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	b29a      	uxth	r2, r3
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	330b      	adds	r3, #11
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	021b      	lsls	r3, r3, #8
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	b29a      	uxth	r2, r3
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	330c      	adds	r3, #12
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	b29a      	uxth	r2, r3
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	330d      	adds	r3, #13
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	b29b      	uxth	r3, r3
 800a304:	021b      	lsls	r3, r3, #8
 800a306:	b29b      	uxth	r3, r3
 800a308:	4313      	orrs	r3, r2
 800a30a:	b29a      	uxth	r2, r3
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	7b9a      	ldrb	r2, [r3, #14]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	7bda      	ldrb	r2, [r3, #15]
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	7c1a      	ldrb	r2, [r3, #16]
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	7c5a      	ldrb	r2, [r3, #17]
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	745a      	strb	r2, [r3, #17]
  }
}
 800a330:	bf00      	nop
 800a332:	3714      	adds	r7, #20
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b08c      	sub	sp, #48	; 0x30
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	4613      	mov	r3, r2
 800a348:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a350:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a352:	2300      	movs	r3, #0
 800a354:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a35c:	2300      	movs	r3, #0
 800a35e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800a362:	2300      	movs	r3, #0
 800a364:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	781a      	ldrb	r2, [r3, #0]
 800a370:	6a3b      	ldr	r3, [r7, #32]
 800a372:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	785a      	ldrb	r2, [r3, #1]
 800a378:	6a3b      	ldr	r3, [r7, #32]
 800a37a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	3302      	adds	r3, #2
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	b29a      	uxth	r2, r3
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	3303      	adds	r3, #3
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	021b      	lsls	r3, r3, #8
 800a38e:	b29b      	uxth	r3, r3
 800a390:	4313      	orrs	r3, r2
 800a392:	b29b      	uxth	r3, r3
 800a394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a398:	bf28      	it	cs
 800a39a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800a39e:	b29a      	uxth	r2, r3
 800a3a0:	6a3b      	ldr	r3, [r7, #32]
 800a3a2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	791a      	ldrb	r2, [r3, #4]
 800a3a8:	6a3b      	ldr	r3, [r7, #32]
 800a3aa:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	795a      	ldrb	r2, [r3, #5]
 800a3b0:	6a3b      	ldr	r3, [r7, #32]
 800a3b2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	799a      	ldrb	r2, [r3, #6]
 800a3b8:	6a3b      	ldr	r3, [r7, #32]
 800a3ba:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	79da      	ldrb	r2, [r3, #7]
 800a3c0:	6a3b      	ldr	r3, [r7, #32]
 800a3c2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	7a1a      	ldrb	r2, [r3, #8]
 800a3c8:	6a3b      	ldr	r3, [r7, #32]
 800a3ca:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800a3cc:	6a3b      	ldr	r3, [r7, #32]
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	2b09      	cmp	r3, #9
 800a3d2:	d002      	beq.n	800a3da <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a3d4:	6a3b      	ldr	r3, [r7, #32]
 800a3d6:	2209      	movs	r2, #9
 800a3d8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a3da:	88fb      	ldrh	r3, [r7, #6]
 800a3dc:	2b09      	cmp	r3, #9
 800a3de:	f240 809d 	bls.w	800a51c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800a3e2:	2309      	movs	r3, #9
 800a3e4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a3ea:	e081      	b.n	800a4f0 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a3ec:	f107 0316 	add.w	r3, r7, #22
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3f4:	f000 f99f 	bl	800a736 <USBH_GetNextDesc>
 800a3f8:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3fc:	785b      	ldrb	r3, [r3, #1]
 800a3fe:	2b04      	cmp	r3, #4
 800a400:	d176      	bne.n	800a4f0 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	2b09      	cmp	r3, #9
 800a408:	d002      	beq.n	800a410 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40c:	2209      	movs	r2, #9
 800a40e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a414:	221a      	movs	r2, #26
 800a416:	fb02 f303 	mul.w	r3, r2, r3
 800a41a:	3308      	adds	r3, #8
 800a41c:	6a3a      	ldr	r2, [r7, #32]
 800a41e:	4413      	add	r3, r2
 800a420:	3302      	adds	r3, #2
 800a422:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a424:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a426:	69f8      	ldr	r0, [r7, #28]
 800a428:	f000 f87e 	bl	800a528 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a42c:	2300      	movs	r3, #0
 800a42e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a432:	2300      	movs	r3, #0
 800a434:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a436:	e043      	b.n	800a4c0 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a438:	f107 0316 	add.w	r3, r7, #22
 800a43c:	4619      	mov	r1, r3
 800a43e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a440:	f000 f979 	bl	800a736 <USBH_GetNextDesc>
 800a444:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a448:	785b      	ldrb	r3, [r3, #1]
 800a44a:	2b05      	cmp	r3, #5
 800a44c:	d138      	bne.n	800a4c0 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800a44e:	69fb      	ldr	r3, [r7, #28]
 800a450:	795b      	ldrb	r3, [r3, #5]
 800a452:	2b01      	cmp	r3, #1
 800a454:	d10f      	bne.n	800a476 <USBH_ParseCfgDesc+0x13a>
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	799b      	ldrb	r3, [r3, #6]
 800a45a:	2b02      	cmp	r3, #2
 800a45c:	d10b      	bne.n	800a476 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a45e:	69fb      	ldr	r3, [r7, #28]
 800a460:	79db      	ldrb	r3, [r3, #7]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d10f      	bne.n	800a486 <USBH_ParseCfgDesc+0x14a>
 800a466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	2b09      	cmp	r3, #9
 800a46c:	d00b      	beq.n	800a486 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800a46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a470:	2209      	movs	r2, #9
 800a472:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a474:	e007      	b.n	800a486 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800a476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	2b07      	cmp	r3, #7
 800a47c:	d004      	beq.n	800a488 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a480:	2207      	movs	r2, #7
 800a482:	701a      	strb	r2, [r3, #0]
 800a484:	e000      	b.n	800a488 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a486:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a48c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a490:	3201      	adds	r2, #1
 800a492:	00d2      	lsls	r2, r2, #3
 800a494:	211a      	movs	r1, #26
 800a496:	fb01 f303 	mul.w	r3, r1, r3
 800a49a:	4413      	add	r3, r2
 800a49c:	3308      	adds	r3, #8
 800a49e:	6a3a      	ldr	r2, [r7, #32]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	3304      	adds	r3, #4
 800a4a4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a4a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4a8:	69b9      	ldr	r1, [r7, #24]
 800a4aa:	68f8      	ldr	r0, [r7, #12]
 800a4ac:	f000 f86b 	bl	800a586 <USBH_ParseEPDesc>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800a4b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a4c0:	69fb      	ldr	r3, [r7, #28]
 800a4c2:	791b      	ldrb	r3, [r3, #4]
 800a4c4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d204      	bcs.n	800a4d6 <USBH_ParseCfgDesc+0x19a>
 800a4cc:	6a3b      	ldr	r3, [r7, #32]
 800a4ce:	885a      	ldrh	r2, [r3, #2]
 800a4d0:	8afb      	ldrh	r3, [r7, #22]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d8b0      	bhi.n	800a438 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a4d6:	69fb      	ldr	r3, [r7, #28]
 800a4d8:	791b      	ldrb	r3, [r3, #4]
 800a4da:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d201      	bcs.n	800a4e6 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800a4e2:	2303      	movs	r3, #3
 800a4e4:	e01c      	b.n	800a520 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800a4e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a4f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d805      	bhi.n	800a504 <USBH_ParseCfgDesc+0x1c8>
 800a4f8:	6a3b      	ldr	r3, [r7, #32]
 800a4fa:	885a      	ldrh	r2, [r3, #2]
 800a4fc:	8afb      	ldrh	r3, [r7, #22]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	f63f af74 	bhi.w	800a3ec <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a504:	6a3b      	ldr	r3, [r7, #32]
 800a506:	791b      	ldrb	r3, [r3, #4]
 800a508:	2b02      	cmp	r3, #2
 800a50a:	bf28      	it	cs
 800a50c:	2302      	movcs	r3, #2
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a514:	429a      	cmp	r2, r3
 800a516:	d201      	bcs.n	800a51c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800a518:	2303      	movs	r3, #3
 800a51a:	e001      	b.n	800a520 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800a51c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a520:	4618      	mov	r0, r3
 800a522:	3730      	adds	r7, #48	; 0x30
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a528:	b480      	push	{r7}
 800a52a:	b083      	sub	sp, #12
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	781a      	ldrb	r2, [r3, #0]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	785a      	ldrb	r2, [r3, #1]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	789a      	ldrb	r2, [r3, #2]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	78da      	ldrb	r2, [r3, #3]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	791a      	ldrb	r2, [r3, #4]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	795a      	ldrb	r2, [r3, #5]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	799a      	ldrb	r2, [r3, #6]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	79da      	ldrb	r2, [r3, #7]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	7a1a      	ldrb	r2, [r3, #8]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	721a      	strb	r2, [r3, #8]
}
 800a57a:	bf00      	nop
 800a57c:	370c      	adds	r7, #12
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr

0800a586 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800a586:	b480      	push	{r7}
 800a588:	b087      	sub	sp, #28
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	60f8      	str	r0, [r7, #12]
 800a58e:	60b9      	str	r1, [r7, #8]
 800a590:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a592:	2300      	movs	r3, #0
 800a594:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	781a      	ldrb	r2, [r3, #0]
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	785a      	ldrb	r2, [r3, #1]
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	789a      	ldrb	r2, [r3, #2]
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	78da      	ldrb	r2, [r3, #3]
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	3304      	adds	r3, #4
 800a5ba:	781b      	ldrb	r3, [r3, #0]
 800a5bc:	b29a      	uxth	r2, r3
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	3305      	adds	r3, #5
 800a5c2:	781b      	ldrb	r3, [r3, #0]
 800a5c4:	b29b      	uxth	r3, r3
 800a5c6:	021b      	lsls	r3, r3, #8
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	b29a      	uxth	r2, r3
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	799a      	ldrb	r2, [r3, #6]
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	889b      	ldrh	r3, [r3, #4]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d102      	bne.n	800a5e8 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800a5e2:	2303      	movs	r3, #3
 800a5e4:	75fb      	strb	r3, [r7, #23]
 800a5e6:	e033      	b.n	800a650 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	889b      	ldrh	r3, [r3, #4]
 800a5ec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a5f0:	f023 0307 	bic.w	r3, r3, #7
 800a5f4:	b29a      	uxth	r2, r3
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	889b      	ldrh	r3, [r3, #4]
 800a5fe:	b21a      	sxth	r2, r3
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	3304      	adds	r3, #4
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	b299      	uxth	r1, r3
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	3305      	adds	r3, #5
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	b29b      	uxth	r3, r3
 800a610:	021b      	lsls	r3, r3, #8
 800a612:	b29b      	uxth	r3, r3
 800a614:	430b      	orrs	r3, r1
 800a616:	b29b      	uxth	r3, r3
 800a618:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d110      	bne.n	800a642 <USBH_ParseEPDesc+0xbc>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	3304      	adds	r3, #4
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	b299      	uxth	r1, r3
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	3305      	adds	r3, #5
 800a62c:	781b      	ldrb	r3, [r3, #0]
 800a62e:	b29b      	uxth	r3, r3
 800a630:	021b      	lsls	r3, r3, #8
 800a632:	b29b      	uxth	r3, r3
 800a634:	430b      	orrs	r3, r1
 800a636:	b29b      	uxth	r3, r3
 800a638:	b21b      	sxth	r3, r3
 800a63a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a63e:	b21b      	sxth	r3, r3
 800a640:	e001      	b.n	800a646 <USBH_ParseEPDesc+0xc0>
 800a642:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a646:	4313      	orrs	r3, r2
 800a648:	b21b      	sxth	r3, r3
 800a64a:	b29a      	uxth	r2, r3
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a656:	2b00      	cmp	r3, #0
 800a658:	d116      	bne.n	800a688 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	78db      	ldrb	r3, [r3, #3]
 800a65e:	f003 0303 	and.w	r3, r3, #3
 800a662:	2b01      	cmp	r3, #1
 800a664:	d005      	beq.n	800a672 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	78db      	ldrb	r3, [r3, #3]
 800a66a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a66e:	2b03      	cmp	r3, #3
 800a670:	d127      	bne.n	800a6c2 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	799b      	ldrb	r3, [r3, #6]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d003      	beq.n	800a682 <USBH_ParseEPDesc+0xfc>
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	799b      	ldrb	r3, [r3, #6]
 800a67e:	2b10      	cmp	r3, #16
 800a680:	d91f      	bls.n	800a6c2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a682:	2303      	movs	r3, #3
 800a684:	75fb      	strb	r3, [r7, #23]
 800a686:	e01c      	b.n	800a6c2 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	78db      	ldrb	r3, [r3, #3]
 800a68c:	f003 0303 	and.w	r3, r3, #3
 800a690:	2b01      	cmp	r3, #1
 800a692:	d10a      	bne.n	800a6aa <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	799b      	ldrb	r3, [r3, #6]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d003      	beq.n	800a6a4 <USBH_ParseEPDesc+0x11e>
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	799b      	ldrb	r3, [r3, #6]
 800a6a0:	2b10      	cmp	r3, #16
 800a6a2:	d90e      	bls.n	800a6c2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a6a4:	2303      	movs	r3, #3
 800a6a6:	75fb      	strb	r3, [r7, #23]
 800a6a8:	e00b      	b.n	800a6c2 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	78db      	ldrb	r3, [r3, #3]
 800a6ae:	f003 0303 	and.w	r3, r3, #3
 800a6b2:	2b03      	cmp	r3, #3
 800a6b4:	d105      	bne.n	800a6c2 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	799b      	ldrb	r3, [r3, #6]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d101      	bne.n	800a6c2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a6be:	2303      	movs	r3, #3
 800a6c0:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800a6c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	371c      	adds	r7, #28
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b087      	sub	sp, #28
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	60f8      	str	r0, [r7, #12]
 800a6d8:	60b9      	str	r1, [r7, #8]
 800a6da:	4613      	mov	r3, r2
 800a6dc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	3301      	adds	r3, #1
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	2b03      	cmp	r3, #3
 800a6e6:	d120      	bne.n	800a72a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	781b      	ldrb	r3, [r3, #0]
 800a6ec:	1e9a      	subs	r2, r3, #2
 800a6ee:	88fb      	ldrh	r3, [r7, #6]
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	bf28      	it	cs
 800a6f4:	4613      	movcs	r3, r2
 800a6f6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	3302      	adds	r3, #2
 800a6fc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a6fe:	2300      	movs	r3, #0
 800a700:	82fb      	strh	r3, [r7, #22]
 800a702:	e00b      	b.n	800a71c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a704:	8afb      	ldrh	r3, [r7, #22]
 800a706:	68fa      	ldr	r2, [r7, #12]
 800a708:	4413      	add	r3, r2
 800a70a:	781a      	ldrb	r2, [r3, #0]
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	3301      	adds	r3, #1
 800a714:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a716:	8afb      	ldrh	r3, [r7, #22]
 800a718:	3302      	adds	r3, #2
 800a71a:	82fb      	strh	r3, [r7, #22]
 800a71c:	8afa      	ldrh	r2, [r7, #22]
 800a71e:	8abb      	ldrh	r3, [r7, #20]
 800a720:	429a      	cmp	r2, r3
 800a722:	d3ef      	bcc.n	800a704 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	2200      	movs	r2, #0
 800a728:	701a      	strb	r2, [r3, #0]
  }
}
 800a72a:	bf00      	nop
 800a72c:	371c      	adds	r7, #28
 800a72e:	46bd      	mov	sp, r7
 800a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a734:	4770      	bx	lr

0800a736 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a736:	b480      	push	{r7}
 800a738:	b085      	sub	sp, #20
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
 800a73e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	881a      	ldrh	r2, [r3, #0]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	781b      	ldrb	r3, [r3, #0]
 800a748:	b29b      	uxth	r3, r3
 800a74a:	4413      	add	r3, r2
 800a74c:	b29a      	uxth	r2, r3
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	4413      	add	r3, r2
 800a75c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a75e:	68fb      	ldr	r3, [r7, #12]
}
 800a760:	4618      	mov	r0, r3
 800a762:	3714      	adds	r7, #20
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b086      	sub	sp, #24
 800a770:	af00      	add	r7, sp, #0
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	60b9      	str	r1, [r7, #8]
 800a776:	4613      	mov	r3, r2
 800a778:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a77a:	2301      	movs	r3, #1
 800a77c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	789b      	ldrb	r3, [r3, #2]
 800a782:	2b01      	cmp	r3, #1
 800a784:	d002      	beq.n	800a78c <USBH_CtlReq+0x20>
 800a786:	2b02      	cmp	r3, #2
 800a788:	d00f      	beq.n	800a7aa <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a78a:	e027      	b.n	800a7dc <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	68ba      	ldr	r2, [r7, #8]
 800a790:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	88fa      	ldrh	r2, [r7, #6]
 800a796:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2201      	movs	r2, #1
 800a79c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2202      	movs	r2, #2
 800a7a2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	75fb      	strb	r3, [r7, #23]
      break;
 800a7a8:	e018      	b.n	800a7dc <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a7aa:	68f8      	ldr	r0, [r7, #12]
 800a7ac:	f000 f81c 	bl	800a7e8 <USBH_HandleControl>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a7b4:	7dfb      	ldrb	r3, [r7, #23]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d002      	beq.n	800a7c0 <USBH_CtlReq+0x54>
 800a7ba:	7dfb      	ldrb	r3, [r7, #23]
 800a7bc:	2b03      	cmp	r3, #3
 800a7be:	d106      	bne.n	800a7ce <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	761a      	strb	r2, [r3, #24]
      break;
 800a7cc:	e005      	b.n	800a7da <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a7ce:	7dfb      	ldrb	r3, [r7, #23]
 800a7d0:	2b02      	cmp	r3, #2
 800a7d2:	d102      	bne.n	800a7da <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	709a      	strb	r2, [r3, #2]
      break;
 800a7da:	bf00      	nop
  }
  return status;
 800a7dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3718      	adds	r7, #24
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}
	...

0800a7e8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b086      	sub	sp, #24
 800a7ec:	af02      	add	r7, sp, #8
 800a7ee:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	7e1b      	ldrb	r3, [r3, #24]
 800a7fc:	3b01      	subs	r3, #1
 800a7fe:	2b0a      	cmp	r3, #10
 800a800:	f200 8156 	bhi.w	800aab0 <USBH_HandleControl+0x2c8>
 800a804:	a201      	add	r2, pc, #4	; (adr r2, 800a80c <USBH_HandleControl+0x24>)
 800a806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a80a:	bf00      	nop
 800a80c:	0800a839 	.word	0x0800a839
 800a810:	0800a853 	.word	0x0800a853
 800a814:	0800a8bd 	.word	0x0800a8bd
 800a818:	0800a8e3 	.word	0x0800a8e3
 800a81c:	0800a91b 	.word	0x0800a91b
 800a820:	0800a945 	.word	0x0800a945
 800a824:	0800a997 	.word	0x0800a997
 800a828:	0800a9b9 	.word	0x0800a9b9
 800a82c:	0800a9f5 	.word	0x0800a9f5
 800a830:	0800aa1b 	.word	0x0800aa1b
 800a834:	0800aa59 	.word	0x0800aa59
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f103 0110 	add.w	r1, r3, #16
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	795b      	ldrb	r3, [r3, #5]
 800a842:	461a      	mov	r2, r3
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 f943 	bl	800aad0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2202      	movs	r2, #2
 800a84e:	761a      	strb	r2, [r3, #24]
      break;
 800a850:	e139      	b.n	800aac6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	795b      	ldrb	r3, [r3, #5]
 800a856:	4619      	mov	r1, r3
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 fcc5 	bl	800b1e8 <USBH_LL_GetURBState>
 800a85e:	4603      	mov	r3, r0
 800a860:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a862:	7bbb      	ldrb	r3, [r7, #14]
 800a864:	2b01      	cmp	r3, #1
 800a866:	d11e      	bne.n	800a8a6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	7c1b      	ldrb	r3, [r3, #16]
 800a86c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a870:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	8adb      	ldrh	r3, [r3, #22]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d00a      	beq.n	800a890 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a87a:	7b7b      	ldrb	r3, [r7, #13]
 800a87c:	2b80      	cmp	r3, #128	; 0x80
 800a87e:	d103      	bne.n	800a888 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2203      	movs	r2, #3
 800a884:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a886:	e115      	b.n	800aab4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2205      	movs	r2, #5
 800a88c:	761a      	strb	r2, [r3, #24]
      break;
 800a88e:	e111      	b.n	800aab4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a890:	7b7b      	ldrb	r3, [r7, #13]
 800a892:	2b80      	cmp	r3, #128	; 0x80
 800a894:	d103      	bne.n	800a89e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2209      	movs	r2, #9
 800a89a:	761a      	strb	r2, [r3, #24]
      break;
 800a89c:	e10a      	b.n	800aab4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2207      	movs	r2, #7
 800a8a2:	761a      	strb	r2, [r3, #24]
      break;
 800a8a4:	e106      	b.n	800aab4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a8a6:	7bbb      	ldrb	r3, [r7, #14]
 800a8a8:	2b04      	cmp	r3, #4
 800a8aa:	d003      	beq.n	800a8b4 <USBH_HandleControl+0xcc>
 800a8ac:	7bbb      	ldrb	r3, [r7, #14]
 800a8ae:	2b02      	cmp	r3, #2
 800a8b0:	f040 8100 	bne.w	800aab4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	220b      	movs	r2, #11
 800a8b8:	761a      	strb	r2, [r3, #24]
      break;
 800a8ba:	e0fb      	b.n	800aab4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a8c2:	b29a      	uxth	r2, r3
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6899      	ldr	r1, [r3, #8]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	899a      	ldrh	r2, [r3, #12]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	791b      	ldrb	r3, [r3, #4]
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 f93a 	bl	800ab4e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2204      	movs	r2, #4
 800a8de:	761a      	strb	r2, [r3, #24]
      break;
 800a8e0:	e0f1      	b.n	800aac6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	791b      	ldrb	r3, [r3, #4]
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f000 fc7d 	bl	800b1e8 <USBH_LL_GetURBState>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a8f2:	7bbb      	ldrb	r3, [r7, #14]
 800a8f4:	2b01      	cmp	r3, #1
 800a8f6:	d102      	bne.n	800a8fe <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2209      	movs	r2, #9
 800a8fc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a8fe:	7bbb      	ldrb	r3, [r7, #14]
 800a900:	2b05      	cmp	r3, #5
 800a902:	d102      	bne.n	800a90a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a904:	2303      	movs	r3, #3
 800a906:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a908:	e0d6      	b.n	800aab8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a90a:	7bbb      	ldrb	r3, [r7, #14]
 800a90c:	2b04      	cmp	r3, #4
 800a90e:	f040 80d3 	bne.w	800aab8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	220b      	movs	r2, #11
 800a916:	761a      	strb	r2, [r3, #24]
      break;
 800a918:	e0ce      	b.n	800aab8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6899      	ldr	r1, [r3, #8]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	899a      	ldrh	r2, [r3, #12]
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	795b      	ldrb	r3, [r3, #5]
 800a926:	2001      	movs	r0, #1
 800a928:	9000      	str	r0, [sp, #0]
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 f8ea 	bl	800ab04 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a936:	b29a      	uxth	r2, r3
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2206      	movs	r2, #6
 800a940:	761a      	strb	r2, [r3, #24]
      break;
 800a942:	e0c0      	b.n	800aac6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	795b      	ldrb	r3, [r3, #5]
 800a948:	4619      	mov	r1, r3
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f000 fc4c 	bl	800b1e8 <USBH_LL_GetURBState>
 800a950:	4603      	mov	r3, r0
 800a952:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a954:	7bbb      	ldrb	r3, [r7, #14]
 800a956:	2b01      	cmp	r3, #1
 800a958:	d103      	bne.n	800a962 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2207      	movs	r2, #7
 800a95e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a960:	e0ac      	b.n	800aabc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a962:	7bbb      	ldrb	r3, [r7, #14]
 800a964:	2b05      	cmp	r3, #5
 800a966:	d105      	bne.n	800a974 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	220c      	movs	r2, #12
 800a96c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a96e:	2303      	movs	r3, #3
 800a970:	73fb      	strb	r3, [r7, #15]
      break;
 800a972:	e0a3      	b.n	800aabc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a974:	7bbb      	ldrb	r3, [r7, #14]
 800a976:	2b02      	cmp	r3, #2
 800a978:	d103      	bne.n	800a982 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2205      	movs	r2, #5
 800a97e:	761a      	strb	r2, [r3, #24]
      break;
 800a980:	e09c      	b.n	800aabc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a982:	7bbb      	ldrb	r3, [r7, #14]
 800a984:	2b04      	cmp	r3, #4
 800a986:	f040 8099 	bne.w	800aabc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	220b      	movs	r2, #11
 800a98e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a990:	2302      	movs	r3, #2
 800a992:	73fb      	strb	r3, [r7, #15]
      break;
 800a994:	e092      	b.n	800aabc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	791b      	ldrb	r3, [r3, #4]
 800a99a:	2200      	movs	r2, #0
 800a99c:	2100      	movs	r1, #0
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f000 f8d5 	bl	800ab4e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a9aa:	b29a      	uxth	r2, r3
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2208      	movs	r2, #8
 800a9b4:	761a      	strb	r2, [r3, #24]

      break;
 800a9b6:	e086      	b.n	800aac6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	791b      	ldrb	r3, [r3, #4]
 800a9bc:	4619      	mov	r1, r3
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 fc12 	bl	800b1e8 <USBH_LL_GetURBState>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a9c8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d105      	bne.n	800a9da <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	220d      	movs	r2, #13
 800a9d2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a9d8:	e072      	b.n	800aac0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a9da:	7bbb      	ldrb	r3, [r7, #14]
 800a9dc:	2b04      	cmp	r3, #4
 800a9de:	d103      	bne.n	800a9e8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	220b      	movs	r2, #11
 800a9e4:	761a      	strb	r2, [r3, #24]
      break;
 800a9e6:	e06b      	b.n	800aac0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a9e8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ea:	2b05      	cmp	r3, #5
 800a9ec:	d168      	bne.n	800aac0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a9ee:	2303      	movs	r3, #3
 800a9f0:	73fb      	strb	r3, [r7, #15]
      break;
 800a9f2:	e065      	b.n	800aac0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	795b      	ldrb	r3, [r3, #5]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	9200      	str	r2, [sp, #0]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	2100      	movs	r1, #0
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 f87f 	bl	800ab04 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aa0c:	b29a      	uxth	r2, r3
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	220a      	movs	r2, #10
 800aa16:	761a      	strb	r2, [r3, #24]
      break;
 800aa18:	e055      	b.n	800aac6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	795b      	ldrb	r3, [r3, #5]
 800aa1e:	4619      	mov	r1, r3
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 fbe1 	bl	800b1e8 <USBH_LL_GetURBState>
 800aa26:	4603      	mov	r3, r0
 800aa28:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800aa2a:	7bbb      	ldrb	r3, [r7, #14]
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	d105      	bne.n	800aa3c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800aa30:	2300      	movs	r3, #0
 800aa32:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	220d      	movs	r2, #13
 800aa38:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800aa3a:	e043      	b.n	800aac4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800aa3c:	7bbb      	ldrb	r3, [r7, #14]
 800aa3e:	2b02      	cmp	r3, #2
 800aa40:	d103      	bne.n	800aa4a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2209      	movs	r2, #9
 800aa46:	761a      	strb	r2, [r3, #24]
      break;
 800aa48:	e03c      	b.n	800aac4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800aa4a:	7bbb      	ldrb	r3, [r7, #14]
 800aa4c:	2b04      	cmp	r3, #4
 800aa4e:	d139      	bne.n	800aac4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	220b      	movs	r2, #11
 800aa54:	761a      	strb	r2, [r3, #24]
      break;
 800aa56:	e035      	b.n	800aac4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	7e5b      	ldrb	r3, [r3, #25]
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	b2da      	uxtb	r2, r3
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	765a      	strb	r2, [r3, #25]
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	7e5b      	ldrb	r3, [r3, #25]
 800aa68:	2b02      	cmp	r3, #2
 800aa6a:	d806      	bhi.n	800aa7a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2201      	movs	r2, #1
 800aa76:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800aa78:	e025      	b.n	800aac6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aa80:	2106      	movs	r1, #6
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	795b      	ldrb	r3, [r3, #5]
 800aa90:	4619      	mov	r1, r3
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 f90c 	bl	800acb0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	791b      	ldrb	r3, [r3, #4]
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 f906 	bl	800acb0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800aaaa:	2302      	movs	r3, #2
 800aaac:	73fb      	strb	r3, [r7, #15]
      break;
 800aaae:	e00a      	b.n	800aac6 <USBH_HandleControl+0x2de>

    default:
      break;
 800aab0:	bf00      	nop
 800aab2:	e008      	b.n	800aac6 <USBH_HandleControl+0x2de>
      break;
 800aab4:	bf00      	nop
 800aab6:	e006      	b.n	800aac6 <USBH_HandleControl+0x2de>
      break;
 800aab8:	bf00      	nop
 800aaba:	e004      	b.n	800aac6 <USBH_HandleControl+0x2de>
      break;
 800aabc:	bf00      	nop
 800aabe:	e002      	b.n	800aac6 <USBH_HandleControl+0x2de>
      break;
 800aac0:	bf00      	nop
 800aac2:	e000      	b.n	800aac6 <USBH_HandleControl+0x2de>
      break;
 800aac4:	bf00      	nop
  }

  return status;
 800aac6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3710      	adds	r7, #16
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b088      	sub	sp, #32
 800aad4:	af04      	add	r7, sp, #16
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	60b9      	str	r1, [r7, #8]
 800aada:	4613      	mov	r3, r2
 800aadc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aade:	79f9      	ldrb	r1, [r7, #7]
 800aae0:	2300      	movs	r3, #0
 800aae2:	9303      	str	r3, [sp, #12]
 800aae4:	2308      	movs	r3, #8
 800aae6:	9302      	str	r3, [sp, #8]
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	9301      	str	r3, [sp, #4]
 800aaec:	2300      	movs	r3, #0
 800aaee:	9300      	str	r3, [sp, #0]
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	68f8      	ldr	r0, [r7, #12]
 800aaf6:	f000 fb46 	bl	800b186 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800aafa:	2300      	movs	r3, #0
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3710      	adds	r7, #16
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b088      	sub	sp, #32
 800ab08:	af04      	add	r7, sp, #16
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	60b9      	str	r1, [r7, #8]
 800ab0e:	4611      	mov	r1, r2
 800ab10:	461a      	mov	r2, r3
 800ab12:	460b      	mov	r3, r1
 800ab14:	80fb      	strh	r3, [r7, #6]
 800ab16:	4613      	mov	r3, r2
 800ab18:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d001      	beq.n	800ab28 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ab24:	2300      	movs	r3, #0
 800ab26:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ab28:	7979      	ldrb	r1, [r7, #5]
 800ab2a:	7e3b      	ldrb	r3, [r7, #24]
 800ab2c:	9303      	str	r3, [sp, #12]
 800ab2e:	88fb      	ldrh	r3, [r7, #6]
 800ab30:	9302      	str	r3, [sp, #8]
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	9301      	str	r3, [sp, #4]
 800ab36:	2301      	movs	r3, #1
 800ab38:	9300      	str	r3, [sp, #0]
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	68f8      	ldr	r0, [r7, #12]
 800ab40:	f000 fb21 	bl	800b186 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ab44:	2300      	movs	r3, #0
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3710      	adds	r7, #16
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}

0800ab4e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ab4e:	b580      	push	{r7, lr}
 800ab50:	b088      	sub	sp, #32
 800ab52:	af04      	add	r7, sp, #16
 800ab54:	60f8      	str	r0, [r7, #12]
 800ab56:	60b9      	str	r1, [r7, #8]
 800ab58:	4611      	mov	r1, r2
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	80fb      	strh	r3, [r7, #6]
 800ab60:	4613      	mov	r3, r2
 800ab62:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ab64:	7979      	ldrb	r1, [r7, #5]
 800ab66:	2300      	movs	r3, #0
 800ab68:	9303      	str	r3, [sp, #12]
 800ab6a:	88fb      	ldrh	r3, [r7, #6]
 800ab6c:	9302      	str	r3, [sp, #8]
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	9301      	str	r3, [sp, #4]
 800ab72:	2301      	movs	r3, #1
 800ab74:	9300      	str	r3, [sp, #0]
 800ab76:	2300      	movs	r3, #0
 800ab78:	2201      	movs	r2, #1
 800ab7a:	68f8      	ldr	r0, [r7, #12]
 800ab7c:	f000 fb03 	bl	800b186 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ab80:	2300      	movs	r3, #0

}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3710      	adds	r7, #16
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}

0800ab8a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b088      	sub	sp, #32
 800ab8e:	af04      	add	r7, sp, #16
 800ab90:	60f8      	str	r0, [r7, #12]
 800ab92:	60b9      	str	r1, [r7, #8]
 800ab94:	4611      	mov	r1, r2
 800ab96:	461a      	mov	r2, r3
 800ab98:	460b      	mov	r3, r1
 800ab9a:	80fb      	strh	r3, [r7, #6]
 800ab9c:	4613      	mov	r3, r2
 800ab9e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d001      	beq.n	800abae <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800abaa:	2300      	movs	r3, #0
 800abac:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800abae:	7979      	ldrb	r1, [r7, #5]
 800abb0:	7e3b      	ldrb	r3, [r7, #24]
 800abb2:	9303      	str	r3, [sp, #12]
 800abb4:	88fb      	ldrh	r3, [r7, #6]
 800abb6:	9302      	str	r3, [sp, #8]
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	9301      	str	r3, [sp, #4]
 800abbc:	2301      	movs	r3, #1
 800abbe:	9300      	str	r3, [sp, #0]
 800abc0:	2302      	movs	r3, #2
 800abc2:	2200      	movs	r2, #0
 800abc4:	68f8      	ldr	r0, [r7, #12]
 800abc6:	f000 fade 	bl	800b186 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800abca:	2300      	movs	r3, #0
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3710      	adds	r7, #16
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b088      	sub	sp, #32
 800abd8:	af04      	add	r7, sp, #16
 800abda:	60f8      	str	r0, [r7, #12]
 800abdc:	60b9      	str	r1, [r7, #8]
 800abde:	4611      	mov	r1, r2
 800abe0:	461a      	mov	r2, r3
 800abe2:	460b      	mov	r3, r1
 800abe4:	80fb      	strh	r3, [r7, #6]
 800abe6:	4613      	mov	r3, r2
 800abe8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800abea:	7979      	ldrb	r1, [r7, #5]
 800abec:	2300      	movs	r3, #0
 800abee:	9303      	str	r3, [sp, #12]
 800abf0:	88fb      	ldrh	r3, [r7, #6]
 800abf2:	9302      	str	r3, [sp, #8]
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	9301      	str	r3, [sp, #4]
 800abf8:	2301      	movs	r3, #1
 800abfa:	9300      	str	r3, [sp, #0]
 800abfc:	2302      	movs	r3, #2
 800abfe:	2201      	movs	r2, #1
 800ac00:	68f8      	ldr	r0, [r7, #12]
 800ac02:	f000 fac0 	bl	800b186 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ac06:	2300      	movs	r3, #0
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3710      	adds	r7, #16
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}

0800ac10 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b086      	sub	sp, #24
 800ac14:	af04      	add	r7, sp, #16
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	4608      	mov	r0, r1
 800ac1a:	4611      	mov	r1, r2
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	4603      	mov	r3, r0
 800ac20:	70fb      	strb	r3, [r7, #3]
 800ac22:	460b      	mov	r3, r1
 800ac24:	70bb      	strb	r3, [r7, #2]
 800ac26:	4613      	mov	r3, r2
 800ac28:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ac2a:	7878      	ldrb	r0, [r7, #1]
 800ac2c:	78ba      	ldrb	r2, [r7, #2]
 800ac2e:	78f9      	ldrb	r1, [r7, #3]
 800ac30:	8b3b      	ldrh	r3, [r7, #24]
 800ac32:	9302      	str	r3, [sp, #8]
 800ac34:	7d3b      	ldrb	r3, [r7, #20]
 800ac36:	9301      	str	r3, [sp, #4]
 800ac38:	7c3b      	ldrb	r3, [r7, #16]
 800ac3a:	9300      	str	r3, [sp, #0]
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f000 fa53 	bl	800b0ea <USBH_LL_OpenPipe>

  return USBH_OK;
 800ac44:	2300      	movs	r3, #0
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3708      	adds	r7, #8
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}

0800ac4e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ac4e:	b580      	push	{r7, lr}
 800ac50:	b082      	sub	sp, #8
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	6078      	str	r0, [r7, #4]
 800ac56:	460b      	mov	r3, r1
 800ac58:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800ac5a:	78fb      	ldrb	r3, [r7, #3]
 800ac5c:	4619      	mov	r1, r3
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 fa72 	bl	800b148 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ac64:	2300      	movs	r3, #0
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3708      	adds	r7, #8
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}

0800ac6e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ac6e:	b580      	push	{r7, lr}
 800ac70:	b084      	sub	sp, #16
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
 800ac76:	460b      	mov	r3, r1
 800ac78:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f000 f836 	bl	800acec <USBH_GetFreePipe>
 800ac80:	4603      	mov	r3, r0
 800ac82:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ac84:	89fb      	ldrh	r3, [r7, #14]
 800ac86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d00a      	beq.n	800aca4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ac8e:	78fa      	ldrb	r2, [r7, #3]
 800ac90:	89fb      	ldrh	r3, [r7, #14]
 800ac92:	f003 030f 	and.w	r3, r3, #15
 800ac96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ac9a:	6879      	ldr	r1, [r7, #4]
 800ac9c:	33e0      	adds	r3, #224	; 0xe0
 800ac9e:	009b      	lsls	r3, r3, #2
 800aca0:	440b      	add	r3, r1
 800aca2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800aca4:	89fb      	ldrh	r3, [r7, #14]
 800aca6:	b2db      	uxtb	r3, r3
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3710      	adds	r7, #16
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	460b      	mov	r3, r1
 800acba:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800acbc:	78fb      	ldrb	r3, [r7, #3]
 800acbe:	2b0f      	cmp	r3, #15
 800acc0:	d80d      	bhi.n	800acde <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800acc2:	78fb      	ldrb	r3, [r7, #3]
 800acc4:	687a      	ldr	r2, [r7, #4]
 800acc6:	33e0      	adds	r3, #224	; 0xe0
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	4413      	add	r3, r2
 800accc:	685a      	ldr	r2, [r3, #4]
 800acce:	78fb      	ldrb	r3, [r7, #3]
 800acd0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800acd4:	6879      	ldr	r1, [r7, #4]
 800acd6:	33e0      	adds	r3, #224	; 0xe0
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	440b      	add	r3, r1
 800acdc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800acde:	2300      	movs	r3, #0
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	370c      	adds	r7, #12
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr

0800acec <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800acec:	b480      	push	{r7}
 800acee:	b085      	sub	sp, #20
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800acf4:	2300      	movs	r3, #0
 800acf6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800acf8:	2300      	movs	r3, #0
 800acfa:	73fb      	strb	r3, [r7, #15]
 800acfc:	e00f      	b.n	800ad1e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800acfe:	7bfb      	ldrb	r3, [r7, #15]
 800ad00:	687a      	ldr	r2, [r7, #4]
 800ad02:	33e0      	adds	r3, #224	; 0xe0
 800ad04:	009b      	lsls	r3, r3, #2
 800ad06:	4413      	add	r3, r2
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d102      	bne.n	800ad18 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ad12:	7bfb      	ldrb	r3, [r7, #15]
 800ad14:	b29b      	uxth	r3, r3
 800ad16:	e007      	b.n	800ad28 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800ad18:	7bfb      	ldrb	r3, [r7, #15]
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	73fb      	strb	r3, [r7, #15]
 800ad1e:	7bfb      	ldrb	r3, [r7, #15]
 800ad20:	2b0f      	cmp	r3, #15
 800ad22:	d9ec      	bls.n	800acfe <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ad24:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3714      	adds	r7, #20
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr

0800ad34 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ad38:	2201      	movs	r2, #1
 800ad3a:	490e      	ldr	r1, [pc, #56]	; (800ad74 <MX_USB_HOST_Init+0x40>)
 800ad3c:	480e      	ldr	r0, [pc, #56]	; (800ad78 <MX_USB_HOST_Init+0x44>)
 800ad3e:	f7fe fba7 	bl	8009490 <USBH_Init>
 800ad42:	4603      	mov	r3, r0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d001      	beq.n	800ad4c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ad48:	f7f6 fffc 	bl	8001d44 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ad4c:	490b      	ldr	r1, [pc, #44]	; (800ad7c <MX_USB_HOST_Init+0x48>)
 800ad4e:	480a      	ldr	r0, [pc, #40]	; (800ad78 <MX_USB_HOST_Init+0x44>)
 800ad50:	f7fe fc2c 	bl	80095ac <USBH_RegisterClass>
 800ad54:	4603      	mov	r3, r0
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d001      	beq.n	800ad5e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ad5a:	f7f6 fff3 	bl	8001d44 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ad5e:	4806      	ldr	r0, [pc, #24]	; (800ad78 <MX_USB_HOST_Init+0x44>)
 800ad60:	f7fe fcb0 	bl	80096c4 <USBH_Start>
 800ad64:	4603      	mov	r3, r0
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d001      	beq.n	800ad6e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ad6a:	f7f6 ffeb 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ad6e:	bf00      	nop
 800ad70:	bd80      	pop	{r7, pc}
 800ad72:	bf00      	nop
 800ad74:	0800ad95 	.word	0x0800ad95
 800ad78:	200004dc 	.word	0x200004dc
 800ad7c:	2000000c 	.word	0x2000000c

0800ad80 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800ad84:	4802      	ldr	r0, [pc, #8]	; (800ad90 <MX_USB_HOST_Process+0x10>)
 800ad86:	f7fe fcad 	bl	80096e4 <USBH_Process>
}
 800ad8a:	bf00      	nop
 800ad8c:	bd80      	pop	{r7, pc}
 800ad8e:	bf00      	nop
 800ad90:	200004dc 	.word	0x200004dc

0800ad94 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b083      	sub	sp, #12
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	460b      	mov	r3, r1
 800ad9e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ada0:	78fb      	ldrb	r3, [r7, #3]
 800ada2:	3b01      	subs	r3, #1
 800ada4:	2b04      	cmp	r3, #4
 800ada6:	d819      	bhi.n	800addc <USBH_UserProcess+0x48>
 800ada8:	a201      	add	r2, pc, #4	; (adr r2, 800adb0 <USBH_UserProcess+0x1c>)
 800adaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adae:	bf00      	nop
 800adb0:	0800addd 	.word	0x0800addd
 800adb4:	0800adcd 	.word	0x0800adcd
 800adb8:	0800addd 	.word	0x0800addd
 800adbc:	0800add5 	.word	0x0800add5
 800adc0:	0800adc5 	.word	0x0800adc5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800adc4:	4b09      	ldr	r3, [pc, #36]	; (800adec <USBH_UserProcess+0x58>)
 800adc6:	2203      	movs	r2, #3
 800adc8:	701a      	strb	r2, [r3, #0]
  break;
 800adca:	e008      	b.n	800adde <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800adcc:	4b07      	ldr	r3, [pc, #28]	; (800adec <USBH_UserProcess+0x58>)
 800adce:	2202      	movs	r2, #2
 800add0:	701a      	strb	r2, [r3, #0]
  break;
 800add2:	e004      	b.n	800adde <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800add4:	4b05      	ldr	r3, [pc, #20]	; (800adec <USBH_UserProcess+0x58>)
 800add6:	2201      	movs	r2, #1
 800add8:	701a      	strb	r2, [r3, #0]
  break;
 800adda:	e000      	b.n	800adde <USBH_UserProcess+0x4a>

  default:
  break;
 800addc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800adde:	bf00      	nop
 800ade0:	370c      	adds	r7, #12
 800ade2:	46bd      	mov	sp, r7
 800ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade8:	4770      	bx	lr
 800adea:	bf00      	nop
 800adec:	200008b4 	.word	0x200008b4

0800adf0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b08a      	sub	sp, #40	; 0x28
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800adf8:	f107 0314 	add.w	r3, r7, #20
 800adfc:	2200      	movs	r2, #0
 800adfe:	601a      	str	r2, [r3, #0]
 800ae00:	605a      	str	r2, [r3, #4]
 800ae02:	609a      	str	r2, [r3, #8]
 800ae04:	60da      	str	r2, [r3, #12]
 800ae06:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ae10:	d147      	bne.n	800aea2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae12:	2300      	movs	r3, #0
 800ae14:	613b      	str	r3, [r7, #16]
 800ae16:	4b25      	ldr	r3, [pc, #148]	; (800aeac <HAL_HCD_MspInit+0xbc>)
 800ae18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae1a:	4a24      	ldr	r2, [pc, #144]	; (800aeac <HAL_HCD_MspInit+0xbc>)
 800ae1c:	f043 0301 	orr.w	r3, r3, #1
 800ae20:	6313      	str	r3, [r2, #48]	; 0x30
 800ae22:	4b22      	ldr	r3, [pc, #136]	; (800aeac <HAL_HCD_MspInit+0xbc>)
 800ae24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae26:	f003 0301 	and.w	r3, r3, #1
 800ae2a:	613b      	str	r3, [r7, #16]
 800ae2c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ae2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ae34:	2300      	movs	r3, #0
 800ae36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ae3c:	f107 0314 	add.w	r3, r7, #20
 800ae40:	4619      	mov	r1, r3
 800ae42:	481b      	ldr	r0, [pc, #108]	; (800aeb0 <HAL_HCD_MspInit+0xc0>)
 800ae44:	f7f8 ff2c 	bl	8003ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ae48:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ae4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae4e:	2302      	movs	r3, #2
 800ae50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae52:	2300      	movs	r3, #0
 800ae54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae56:	2300      	movs	r3, #0
 800ae58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ae5a:	230a      	movs	r3, #10
 800ae5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae5e:	f107 0314 	add.w	r3, r7, #20
 800ae62:	4619      	mov	r1, r3
 800ae64:	4812      	ldr	r0, [pc, #72]	; (800aeb0 <HAL_HCD_MspInit+0xc0>)
 800ae66:	f7f8 ff1b 	bl	8003ca0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ae6a:	4b10      	ldr	r3, [pc, #64]	; (800aeac <HAL_HCD_MspInit+0xbc>)
 800ae6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae6e:	4a0f      	ldr	r2, [pc, #60]	; (800aeac <HAL_HCD_MspInit+0xbc>)
 800ae70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae74:	6353      	str	r3, [r2, #52]	; 0x34
 800ae76:	2300      	movs	r3, #0
 800ae78:	60fb      	str	r3, [r7, #12]
 800ae7a:	4b0c      	ldr	r3, [pc, #48]	; (800aeac <HAL_HCD_MspInit+0xbc>)
 800ae7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae7e:	4a0b      	ldr	r2, [pc, #44]	; (800aeac <HAL_HCD_MspInit+0xbc>)
 800ae80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ae84:	6453      	str	r3, [r2, #68]	; 0x44
 800ae86:	4b09      	ldr	r3, [pc, #36]	; (800aeac <HAL_HCD_MspInit+0xbc>)
 800ae88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae8e:	60fb      	str	r3, [r7, #12]
 800ae90:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ae92:	2200      	movs	r2, #0
 800ae94:	2100      	movs	r1, #0
 800ae96:	2043      	movs	r0, #67	; 0x43
 800ae98:	f7f8 fecb 	bl	8003c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ae9c:	2043      	movs	r0, #67	; 0x43
 800ae9e:	f7f8 fee4 	bl	8003c6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800aea2:	bf00      	nop
 800aea4:	3728      	adds	r7, #40	; 0x28
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	40023800 	.word	0x40023800
 800aeb0:	40020000 	.word	0x40020000

0800aeb4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b082      	sub	sp, #8
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7fe ffed 	bl	8009ea2 <USBH_LL_IncTimer>
}
 800aec8:	bf00      	nop
 800aeca:	3708      	adds	r7, #8
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aede:	4618      	mov	r0, r3
 800aee0:	f7ff f825 	bl	8009f2e <USBH_LL_Connect>
}
 800aee4:	bf00      	nop
 800aee6:	3708      	adds	r7, #8
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b082      	sub	sp, #8
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7ff f82e 	bl	8009f5c <USBH_LL_Disconnect>
}
 800af00:	bf00      	nop
 800af02:	3708      	adds	r7, #8
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800af08:	b480      	push	{r7}
 800af0a:	b083      	sub	sp, #12
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	460b      	mov	r3, r1
 800af12:	70fb      	strb	r3, [r7, #3]
 800af14:	4613      	mov	r3, r2
 800af16:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800af18:	bf00      	nop
 800af1a:	370c      	adds	r7, #12
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	4770      	bx	lr

0800af24 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b082      	sub	sp, #8
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800af32:	4618      	mov	r0, r3
 800af34:	f7fe ffdf 	bl	8009ef6 <USBH_LL_PortEnabled>
}
 800af38:	bf00      	nop
 800af3a:	3708      	adds	r7, #8
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}

0800af40 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800af4e:	4618      	mov	r0, r3
 800af50:	f7fe ffdf 	bl	8009f12 <USBH_LL_PortDisabled>
}
 800af54:	bf00      	nop
 800af56:	3708      	adds	r7, #8
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b082      	sub	sp, #8
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d12a      	bne.n	800afc4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800af6e:	4a18      	ldr	r2, [pc, #96]	; (800afd0 <USBH_LL_Init+0x74>)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	4a15      	ldr	r2, [pc, #84]	; (800afd0 <USBH_LL_Init+0x74>)
 800af7a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800af7e:	4b14      	ldr	r3, [pc, #80]	; (800afd0 <USBH_LL_Init+0x74>)
 800af80:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800af84:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800af86:	4b12      	ldr	r3, [pc, #72]	; (800afd0 <USBH_LL_Init+0x74>)
 800af88:	2208      	movs	r2, #8
 800af8a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800af8c:	4b10      	ldr	r3, [pc, #64]	; (800afd0 <USBH_LL_Init+0x74>)
 800af8e:	2201      	movs	r2, #1
 800af90:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800af92:	4b0f      	ldr	r3, [pc, #60]	; (800afd0 <USBH_LL_Init+0x74>)
 800af94:	2200      	movs	r2, #0
 800af96:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800af98:	4b0d      	ldr	r3, [pc, #52]	; (800afd0 <USBH_LL_Init+0x74>)
 800af9a:	2202      	movs	r2, #2
 800af9c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800af9e:	4b0c      	ldr	r3, [pc, #48]	; (800afd0 <USBH_LL_Init+0x74>)
 800afa0:	2200      	movs	r2, #0
 800afa2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800afa4:	480a      	ldr	r0, [pc, #40]	; (800afd0 <USBH_LL_Init+0x74>)
 800afa6:	f7f9 f87b 	bl	80040a0 <HAL_HCD_Init>
 800afaa:	4603      	mov	r3, r0
 800afac:	2b00      	cmp	r3, #0
 800afae:	d001      	beq.n	800afb4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800afb0:	f7f6 fec8 	bl	8001d44 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800afb4:	4806      	ldr	r0, [pc, #24]	; (800afd0 <USBH_LL_Init+0x74>)
 800afb6:	f7f9 fc5e 	bl	8004876 <HAL_HCD_GetCurrentFrame>
 800afba:	4603      	mov	r3, r0
 800afbc:	4619      	mov	r1, r3
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f7fe ff60 	bl	8009e84 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800afc4:	2300      	movs	r3, #0
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3708      	adds	r7, #8
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	200008b8 	.word	0x200008b8

0800afd4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b084      	sub	sp, #16
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afdc:	2300      	movs	r3, #0
 800afde:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800afe0:	2300      	movs	r3, #0
 800afe2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800afea:	4618      	mov	r0, r3
 800afec:	f7f9 fbcd 	bl	800478a <HAL_HCD_Start>
 800aff0:	4603      	mov	r3, r0
 800aff2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aff4:	7bfb      	ldrb	r3, [r7, #15]
 800aff6:	4618      	mov	r0, r3
 800aff8:	f000 f95c 	bl	800b2b4 <USBH_Get_USB_Status>
 800affc:	4603      	mov	r3, r0
 800affe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b000:	7bbb      	ldrb	r3, [r7, #14]
}
 800b002:	4618      	mov	r0, r3
 800b004:	3710      	adds	r7, #16
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}

0800b00a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b00a:	b580      	push	{r7, lr}
 800b00c:	b084      	sub	sp, #16
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b012:	2300      	movs	r3, #0
 800b014:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b016:	2300      	movs	r3, #0
 800b018:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b020:	4618      	mov	r0, r3
 800b022:	f7f9 fbd5 	bl	80047d0 <HAL_HCD_Stop>
 800b026:	4603      	mov	r3, r0
 800b028:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b02a:	7bfb      	ldrb	r3, [r7, #15]
 800b02c:	4618      	mov	r0, r3
 800b02e:	f000 f941 	bl	800b2b4 <USBH_Get_USB_Status>
 800b032:	4603      	mov	r3, r0
 800b034:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b036:	7bbb      	ldrb	r3, [r7, #14]
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3710      	adds	r7, #16
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b084      	sub	sp, #16
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b048:	2301      	movs	r3, #1
 800b04a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b052:	4618      	mov	r0, r3
 800b054:	f7f9 fc1d 	bl	8004892 <HAL_HCD_GetCurrentSpeed>
 800b058:	4603      	mov	r3, r0
 800b05a:	2b02      	cmp	r3, #2
 800b05c:	d00c      	beq.n	800b078 <USBH_LL_GetSpeed+0x38>
 800b05e:	2b02      	cmp	r3, #2
 800b060:	d80d      	bhi.n	800b07e <USBH_LL_GetSpeed+0x3e>
 800b062:	2b00      	cmp	r3, #0
 800b064:	d002      	beq.n	800b06c <USBH_LL_GetSpeed+0x2c>
 800b066:	2b01      	cmp	r3, #1
 800b068:	d003      	beq.n	800b072 <USBH_LL_GetSpeed+0x32>
 800b06a:	e008      	b.n	800b07e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b06c:	2300      	movs	r3, #0
 800b06e:	73fb      	strb	r3, [r7, #15]
    break;
 800b070:	e008      	b.n	800b084 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b072:	2301      	movs	r3, #1
 800b074:	73fb      	strb	r3, [r7, #15]
    break;
 800b076:	e005      	b.n	800b084 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b078:	2302      	movs	r3, #2
 800b07a:	73fb      	strb	r3, [r7, #15]
    break;
 800b07c:	e002      	b.n	800b084 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b07e:	2301      	movs	r3, #1
 800b080:	73fb      	strb	r3, [r7, #15]
    break;
 800b082:	bf00      	nop
  }
  return  speed;
 800b084:	7bfb      	ldrb	r3, [r7, #15]
}
 800b086:	4618      	mov	r0, r3
 800b088:	3710      	adds	r7, #16
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}

0800b08e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b08e:	b580      	push	{r7, lr}
 800b090:	b084      	sub	sp, #16
 800b092:	af00      	add	r7, sp, #0
 800b094:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b096:	2300      	movs	r3, #0
 800b098:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b09a:	2300      	movs	r3, #0
 800b09c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f7f9 fbb0 	bl	800480a <HAL_HCD_ResetPort>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b0ae:	7bfb      	ldrb	r3, [r7, #15]
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f000 f8ff 	bl	800b2b4 <USBH_Get_USB_Status>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3710      	adds	r7, #16
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	460b      	mov	r3, r1
 800b0ce:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b0d6:	78fa      	ldrb	r2, [r7, #3]
 800b0d8:	4611      	mov	r1, r2
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f7f9 fbb7 	bl	800484e <HAL_HCD_HC_GetXferCount>
 800b0e0:	4603      	mov	r3, r0
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3708      	adds	r7, #8
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}

0800b0ea <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b0ea:	b590      	push	{r4, r7, lr}
 800b0ec:	b089      	sub	sp, #36	; 0x24
 800b0ee:	af04      	add	r7, sp, #16
 800b0f0:	6078      	str	r0, [r7, #4]
 800b0f2:	4608      	mov	r0, r1
 800b0f4:	4611      	mov	r1, r2
 800b0f6:	461a      	mov	r2, r3
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	70fb      	strb	r3, [r7, #3]
 800b0fc:	460b      	mov	r3, r1
 800b0fe:	70bb      	strb	r3, [r7, #2]
 800b100:	4613      	mov	r3, r2
 800b102:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b104:	2300      	movs	r3, #0
 800b106:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b108:	2300      	movs	r3, #0
 800b10a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b112:	787c      	ldrb	r4, [r7, #1]
 800b114:	78ba      	ldrb	r2, [r7, #2]
 800b116:	78f9      	ldrb	r1, [r7, #3]
 800b118:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b11a:	9302      	str	r3, [sp, #8]
 800b11c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b120:	9301      	str	r3, [sp, #4]
 800b122:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b126:	9300      	str	r3, [sp, #0]
 800b128:	4623      	mov	r3, r4
 800b12a:	f7f9 f81b 	bl	8004164 <HAL_HCD_HC_Init>
 800b12e:	4603      	mov	r3, r0
 800b130:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b132:	7bfb      	ldrb	r3, [r7, #15]
 800b134:	4618      	mov	r0, r3
 800b136:	f000 f8bd 	bl	800b2b4 <USBH_Get_USB_Status>
 800b13a:	4603      	mov	r3, r0
 800b13c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b13e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b140:	4618      	mov	r0, r3
 800b142:	3714      	adds	r7, #20
 800b144:	46bd      	mov	sp, r7
 800b146:	bd90      	pop	{r4, r7, pc}

0800b148 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	460b      	mov	r3, r1
 800b152:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b154:	2300      	movs	r3, #0
 800b156:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b158:	2300      	movs	r3, #0
 800b15a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b162:	78fa      	ldrb	r2, [r7, #3]
 800b164:	4611      	mov	r1, r2
 800b166:	4618      	mov	r0, r3
 800b168:	f7f9 f88b 	bl	8004282 <HAL_HCD_HC_Halt>
 800b16c:	4603      	mov	r3, r0
 800b16e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b170:	7bfb      	ldrb	r3, [r7, #15]
 800b172:	4618      	mov	r0, r3
 800b174:	f000 f89e 	bl	800b2b4 <USBH_Get_USB_Status>
 800b178:	4603      	mov	r3, r0
 800b17a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b17c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3710      	adds	r7, #16
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}

0800b186 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b186:	b590      	push	{r4, r7, lr}
 800b188:	b089      	sub	sp, #36	; 0x24
 800b18a:	af04      	add	r7, sp, #16
 800b18c:	6078      	str	r0, [r7, #4]
 800b18e:	4608      	mov	r0, r1
 800b190:	4611      	mov	r1, r2
 800b192:	461a      	mov	r2, r3
 800b194:	4603      	mov	r3, r0
 800b196:	70fb      	strb	r3, [r7, #3]
 800b198:	460b      	mov	r3, r1
 800b19a:	70bb      	strb	r3, [r7, #2]
 800b19c:	4613      	mov	r3, r2
 800b19e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b1ae:	787c      	ldrb	r4, [r7, #1]
 800b1b0:	78ba      	ldrb	r2, [r7, #2]
 800b1b2:	78f9      	ldrb	r1, [r7, #3]
 800b1b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b1b8:	9303      	str	r3, [sp, #12]
 800b1ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b1bc:	9302      	str	r3, [sp, #8]
 800b1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c0:	9301      	str	r3, [sp, #4]
 800b1c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b1c6:	9300      	str	r3, [sp, #0]
 800b1c8:	4623      	mov	r3, r4
 800b1ca:	f7f9 f87d 	bl	80042c8 <HAL_HCD_HC_SubmitRequest>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b1d2:	7bfb      	ldrb	r3, [r7, #15]
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f000 f86d 	bl	800b2b4 <USBH_Get_USB_Status>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1de:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3714      	adds	r7, #20
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd90      	pop	{r4, r7, pc}

0800b1e8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b082      	sub	sp, #8
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	460b      	mov	r3, r1
 800b1f2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b1fa:	78fa      	ldrb	r2, [r7, #3]
 800b1fc:	4611      	mov	r1, r2
 800b1fe:	4618      	mov	r0, r3
 800b200:	f7f9 fb11 	bl	8004826 <HAL_HCD_HC_GetURBState>
 800b204:	4603      	mov	r3, r0
}
 800b206:	4618      	mov	r0, r3
 800b208:	3708      	adds	r7, #8
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}

0800b20e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b20e:	b580      	push	{r7, lr}
 800b210:	b082      	sub	sp, #8
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
 800b216:	460b      	mov	r3, r1
 800b218:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b220:	2b01      	cmp	r3, #1
 800b222:	d103      	bne.n	800b22c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b224:	78fb      	ldrb	r3, [r7, #3]
 800b226:	4618      	mov	r0, r3
 800b228:	f000 f870 	bl	800b30c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b22c:	20c8      	movs	r0, #200	; 0xc8
 800b22e:	f7f7 f99f 	bl	8002570 <HAL_Delay>
  return USBH_OK;
 800b232:	2300      	movs	r3, #0
}
 800b234:	4618      	mov	r0, r3
 800b236:	3708      	adds	r7, #8
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b085      	sub	sp, #20
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	460b      	mov	r3, r1
 800b246:	70fb      	strb	r3, [r7, #3]
 800b248:	4613      	mov	r3, r2
 800b24a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b252:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b254:	78fb      	ldrb	r3, [r7, #3]
 800b256:	68fa      	ldr	r2, [r7, #12]
 800b258:	212c      	movs	r1, #44	; 0x2c
 800b25a:	fb01 f303 	mul.w	r3, r1, r3
 800b25e:	4413      	add	r3, r2
 800b260:	333b      	adds	r3, #59	; 0x3b
 800b262:	781b      	ldrb	r3, [r3, #0]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d009      	beq.n	800b27c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b268:	78fb      	ldrb	r3, [r7, #3]
 800b26a:	68fa      	ldr	r2, [r7, #12]
 800b26c:	212c      	movs	r1, #44	; 0x2c
 800b26e:	fb01 f303 	mul.w	r3, r1, r3
 800b272:	4413      	add	r3, r2
 800b274:	3354      	adds	r3, #84	; 0x54
 800b276:	78ba      	ldrb	r2, [r7, #2]
 800b278:	701a      	strb	r2, [r3, #0]
 800b27a:	e008      	b.n	800b28e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b27c:	78fb      	ldrb	r3, [r7, #3]
 800b27e:	68fa      	ldr	r2, [r7, #12]
 800b280:	212c      	movs	r1, #44	; 0x2c
 800b282:	fb01 f303 	mul.w	r3, r1, r3
 800b286:	4413      	add	r3, r2
 800b288:	3355      	adds	r3, #85	; 0x55
 800b28a:	78ba      	ldrb	r2, [r7, #2]
 800b28c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b28e:	2300      	movs	r3, #0
}
 800b290:	4618      	mov	r0, r3
 800b292:	3714      	adds	r7, #20
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr

0800b29c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b082      	sub	sp, #8
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f7f7 f963 	bl	8002570 <HAL_Delay>
}
 800b2aa:	bf00      	nop
 800b2ac:	3708      	adds	r7, #8
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
	...

0800b2b4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b085      	sub	sp, #20
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b2c2:	79fb      	ldrb	r3, [r7, #7]
 800b2c4:	2b03      	cmp	r3, #3
 800b2c6:	d817      	bhi.n	800b2f8 <USBH_Get_USB_Status+0x44>
 800b2c8:	a201      	add	r2, pc, #4	; (adr r2, 800b2d0 <USBH_Get_USB_Status+0x1c>)
 800b2ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ce:	bf00      	nop
 800b2d0:	0800b2e1 	.word	0x0800b2e1
 800b2d4:	0800b2e7 	.word	0x0800b2e7
 800b2d8:	0800b2ed 	.word	0x0800b2ed
 800b2dc:	0800b2f3 	.word	0x0800b2f3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	73fb      	strb	r3, [r7, #15]
    break;
 800b2e4:	e00b      	b.n	800b2fe <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b2e6:	2302      	movs	r3, #2
 800b2e8:	73fb      	strb	r3, [r7, #15]
    break;
 800b2ea:	e008      	b.n	800b2fe <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	73fb      	strb	r3, [r7, #15]
    break;
 800b2f0:	e005      	b.n	800b2fe <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b2f2:	2302      	movs	r3, #2
 800b2f4:	73fb      	strb	r3, [r7, #15]
    break;
 800b2f6:	e002      	b.n	800b2fe <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b2f8:	2302      	movs	r3, #2
 800b2fa:	73fb      	strb	r3, [r7, #15]
    break;
 800b2fc:	bf00      	nop
  }
  return usb_status;
 800b2fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b300:	4618      	mov	r0, r3
 800b302:	3714      	adds	r7, #20
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr

0800b30c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b084      	sub	sp, #16
 800b310:	af00      	add	r7, sp, #0
 800b312:	4603      	mov	r3, r0
 800b314:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b316:	79fb      	ldrb	r3, [r7, #7]
 800b318:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b31a:	79fb      	ldrb	r3, [r7, #7]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d102      	bne.n	800b326 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b320:	2300      	movs	r3, #0
 800b322:	73fb      	strb	r3, [r7, #15]
 800b324:	e001      	b.n	800b32a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b326:	2301      	movs	r3, #1
 800b328:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b32a:	7bfb      	ldrb	r3, [r7, #15]
 800b32c:	461a      	mov	r2, r3
 800b32e:	2101      	movs	r1, #1
 800b330:	4803      	ldr	r0, [pc, #12]	; (800b340 <MX_DriverVbusFS+0x34>)
 800b332:	f7f8 fe69 	bl	8004008 <HAL_GPIO_WritePin>
}
 800b336:	bf00      	nop
 800b338:	3710      	adds	r7, #16
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	bf00      	nop
 800b340:	40020800 	.word	0x40020800

0800b344 <__errno>:
 800b344:	4b01      	ldr	r3, [pc, #4]	; (800b34c <__errno+0x8>)
 800b346:	6818      	ldr	r0, [r3, #0]
 800b348:	4770      	bx	lr
 800b34a:	bf00      	nop
 800b34c:	2000002c 	.word	0x2000002c

0800b350 <__libc_init_array>:
 800b350:	b570      	push	{r4, r5, r6, lr}
 800b352:	4d0d      	ldr	r5, [pc, #52]	; (800b388 <__libc_init_array+0x38>)
 800b354:	4c0d      	ldr	r4, [pc, #52]	; (800b38c <__libc_init_array+0x3c>)
 800b356:	1b64      	subs	r4, r4, r5
 800b358:	10a4      	asrs	r4, r4, #2
 800b35a:	2600      	movs	r6, #0
 800b35c:	42a6      	cmp	r6, r4
 800b35e:	d109      	bne.n	800b374 <__libc_init_array+0x24>
 800b360:	4d0b      	ldr	r5, [pc, #44]	; (800b390 <__libc_init_array+0x40>)
 800b362:	4c0c      	ldr	r4, [pc, #48]	; (800b394 <__libc_init_array+0x44>)
 800b364:	f004 fc94 	bl	800fc90 <_init>
 800b368:	1b64      	subs	r4, r4, r5
 800b36a:	10a4      	asrs	r4, r4, #2
 800b36c:	2600      	movs	r6, #0
 800b36e:	42a6      	cmp	r6, r4
 800b370:	d105      	bne.n	800b37e <__libc_init_array+0x2e>
 800b372:	bd70      	pop	{r4, r5, r6, pc}
 800b374:	f855 3b04 	ldr.w	r3, [r5], #4
 800b378:	4798      	blx	r3
 800b37a:	3601      	adds	r6, #1
 800b37c:	e7ee      	b.n	800b35c <__libc_init_array+0xc>
 800b37e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b382:	4798      	blx	r3
 800b384:	3601      	adds	r6, #1
 800b386:	e7f2      	b.n	800b36e <__libc_init_array+0x1e>
 800b388:	080101cc 	.word	0x080101cc
 800b38c:	080101cc 	.word	0x080101cc
 800b390:	080101cc 	.word	0x080101cc
 800b394:	080101d0 	.word	0x080101d0

0800b398 <malloc>:
 800b398:	4b02      	ldr	r3, [pc, #8]	; (800b3a4 <malloc+0xc>)
 800b39a:	4601      	mov	r1, r0
 800b39c:	6818      	ldr	r0, [r3, #0]
 800b39e:	f000 b87f 	b.w	800b4a0 <_malloc_r>
 800b3a2:	bf00      	nop
 800b3a4:	2000002c 	.word	0x2000002c

0800b3a8 <free>:
 800b3a8:	4b02      	ldr	r3, [pc, #8]	; (800b3b4 <free+0xc>)
 800b3aa:	4601      	mov	r1, r0
 800b3ac:	6818      	ldr	r0, [r3, #0]
 800b3ae:	f000 b80b 	b.w	800b3c8 <_free_r>
 800b3b2:	bf00      	nop
 800b3b4:	2000002c 	.word	0x2000002c

0800b3b8 <memset>:
 800b3b8:	4402      	add	r2, r0
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d100      	bne.n	800b3c2 <memset+0xa>
 800b3c0:	4770      	bx	lr
 800b3c2:	f803 1b01 	strb.w	r1, [r3], #1
 800b3c6:	e7f9      	b.n	800b3bc <memset+0x4>

0800b3c8 <_free_r>:
 800b3c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b3ca:	2900      	cmp	r1, #0
 800b3cc:	d044      	beq.n	800b458 <_free_r+0x90>
 800b3ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3d2:	9001      	str	r0, [sp, #4]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	f1a1 0404 	sub.w	r4, r1, #4
 800b3da:	bfb8      	it	lt
 800b3dc:	18e4      	addlt	r4, r4, r3
 800b3de:	f003 f83d 	bl	800e45c <__malloc_lock>
 800b3e2:	4a1e      	ldr	r2, [pc, #120]	; (800b45c <_free_r+0x94>)
 800b3e4:	9801      	ldr	r0, [sp, #4]
 800b3e6:	6813      	ldr	r3, [r2, #0]
 800b3e8:	b933      	cbnz	r3, 800b3f8 <_free_r+0x30>
 800b3ea:	6063      	str	r3, [r4, #4]
 800b3ec:	6014      	str	r4, [r2, #0]
 800b3ee:	b003      	add	sp, #12
 800b3f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3f4:	f003 b838 	b.w	800e468 <__malloc_unlock>
 800b3f8:	42a3      	cmp	r3, r4
 800b3fa:	d908      	bls.n	800b40e <_free_r+0x46>
 800b3fc:	6825      	ldr	r5, [r4, #0]
 800b3fe:	1961      	adds	r1, r4, r5
 800b400:	428b      	cmp	r3, r1
 800b402:	bf01      	itttt	eq
 800b404:	6819      	ldreq	r1, [r3, #0]
 800b406:	685b      	ldreq	r3, [r3, #4]
 800b408:	1949      	addeq	r1, r1, r5
 800b40a:	6021      	streq	r1, [r4, #0]
 800b40c:	e7ed      	b.n	800b3ea <_free_r+0x22>
 800b40e:	461a      	mov	r2, r3
 800b410:	685b      	ldr	r3, [r3, #4]
 800b412:	b10b      	cbz	r3, 800b418 <_free_r+0x50>
 800b414:	42a3      	cmp	r3, r4
 800b416:	d9fa      	bls.n	800b40e <_free_r+0x46>
 800b418:	6811      	ldr	r1, [r2, #0]
 800b41a:	1855      	adds	r5, r2, r1
 800b41c:	42a5      	cmp	r5, r4
 800b41e:	d10b      	bne.n	800b438 <_free_r+0x70>
 800b420:	6824      	ldr	r4, [r4, #0]
 800b422:	4421      	add	r1, r4
 800b424:	1854      	adds	r4, r2, r1
 800b426:	42a3      	cmp	r3, r4
 800b428:	6011      	str	r1, [r2, #0]
 800b42a:	d1e0      	bne.n	800b3ee <_free_r+0x26>
 800b42c:	681c      	ldr	r4, [r3, #0]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	6053      	str	r3, [r2, #4]
 800b432:	4421      	add	r1, r4
 800b434:	6011      	str	r1, [r2, #0]
 800b436:	e7da      	b.n	800b3ee <_free_r+0x26>
 800b438:	d902      	bls.n	800b440 <_free_r+0x78>
 800b43a:	230c      	movs	r3, #12
 800b43c:	6003      	str	r3, [r0, #0]
 800b43e:	e7d6      	b.n	800b3ee <_free_r+0x26>
 800b440:	6825      	ldr	r5, [r4, #0]
 800b442:	1961      	adds	r1, r4, r5
 800b444:	428b      	cmp	r3, r1
 800b446:	bf04      	itt	eq
 800b448:	6819      	ldreq	r1, [r3, #0]
 800b44a:	685b      	ldreq	r3, [r3, #4]
 800b44c:	6063      	str	r3, [r4, #4]
 800b44e:	bf04      	itt	eq
 800b450:	1949      	addeq	r1, r1, r5
 800b452:	6021      	streq	r1, [r4, #0]
 800b454:	6054      	str	r4, [r2, #4]
 800b456:	e7ca      	b.n	800b3ee <_free_r+0x26>
 800b458:	b003      	add	sp, #12
 800b45a:	bd30      	pop	{r4, r5, pc}
 800b45c:	20000bbc 	.word	0x20000bbc

0800b460 <sbrk_aligned>:
 800b460:	b570      	push	{r4, r5, r6, lr}
 800b462:	4e0e      	ldr	r6, [pc, #56]	; (800b49c <sbrk_aligned+0x3c>)
 800b464:	460c      	mov	r4, r1
 800b466:	6831      	ldr	r1, [r6, #0]
 800b468:	4605      	mov	r5, r0
 800b46a:	b911      	cbnz	r1, 800b472 <sbrk_aligned+0x12>
 800b46c:	f000 ff06 	bl	800c27c <_sbrk_r>
 800b470:	6030      	str	r0, [r6, #0]
 800b472:	4621      	mov	r1, r4
 800b474:	4628      	mov	r0, r5
 800b476:	f000 ff01 	bl	800c27c <_sbrk_r>
 800b47a:	1c43      	adds	r3, r0, #1
 800b47c:	d00a      	beq.n	800b494 <sbrk_aligned+0x34>
 800b47e:	1cc4      	adds	r4, r0, #3
 800b480:	f024 0403 	bic.w	r4, r4, #3
 800b484:	42a0      	cmp	r0, r4
 800b486:	d007      	beq.n	800b498 <sbrk_aligned+0x38>
 800b488:	1a21      	subs	r1, r4, r0
 800b48a:	4628      	mov	r0, r5
 800b48c:	f000 fef6 	bl	800c27c <_sbrk_r>
 800b490:	3001      	adds	r0, #1
 800b492:	d101      	bne.n	800b498 <sbrk_aligned+0x38>
 800b494:	f04f 34ff 	mov.w	r4, #4294967295
 800b498:	4620      	mov	r0, r4
 800b49a:	bd70      	pop	{r4, r5, r6, pc}
 800b49c:	20000bc0 	.word	0x20000bc0

0800b4a0 <_malloc_r>:
 800b4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4a4:	1ccd      	adds	r5, r1, #3
 800b4a6:	f025 0503 	bic.w	r5, r5, #3
 800b4aa:	3508      	adds	r5, #8
 800b4ac:	2d0c      	cmp	r5, #12
 800b4ae:	bf38      	it	cc
 800b4b0:	250c      	movcc	r5, #12
 800b4b2:	2d00      	cmp	r5, #0
 800b4b4:	4607      	mov	r7, r0
 800b4b6:	db01      	blt.n	800b4bc <_malloc_r+0x1c>
 800b4b8:	42a9      	cmp	r1, r5
 800b4ba:	d905      	bls.n	800b4c8 <_malloc_r+0x28>
 800b4bc:	230c      	movs	r3, #12
 800b4be:	603b      	str	r3, [r7, #0]
 800b4c0:	2600      	movs	r6, #0
 800b4c2:	4630      	mov	r0, r6
 800b4c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4c8:	4e2e      	ldr	r6, [pc, #184]	; (800b584 <_malloc_r+0xe4>)
 800b4ca:	f002 ffc7 	bl	800e45c <__malloc_lock>
 800b4ce:	6833      	ldr	r3, [r6, #0]
 800b4d0:	461c      	mov	r4, r3
 800b4d2:	bb34      	cbnz	r4, 800b522 <_malloc_r+0x82>
 800b4d4:	4629      	mov	r1, r5
 800b4d6:	4638      	mov	r0, r7
 800b4d8:	f7ff ffc2 	bl	800b460 <sbrk_aligned>
 800b4dc:	1c43      	adds	r3, r0, #1
 800b4de:	4604      	mov	r4, r0
 800b4e0:	d14d      	bne.n	800b57e <_malloc_r+0xde>
 800b4e2:	6834      	ldr	r4, [r6, #0]
 800b4e4:	4626      	mov	r6, r4
 800b4e6:	2e00      	cmp	r6, #0
 800b4e8:	d140      	bne.n	800b56c <_malloc_r+0xcc>
 800b4ea:	6823      	ldr	r3, [r4, #0]
 800b4ec:	4631      	mov	r1, r6
 800b4ee:	4638      	mov	r0, r7
 800b4f0:	eb04 0803 	add.w	r8, r4, r3
 800b4f4:	f000 fec2 	bl	800c27c <_sbrk_r>
 800b4f8:	4580      	cmp	r8, r0
 800b4fa:	d13a      	bne.n	800b572 <_malloc_r+0xd2>
 800b4fc:	6821      	ldr	r1, [r4, #0]
 800b4fe:	3503      	adds	r5, #3
 800b500:	1a6d      	subs	r5, r5, r1
 800b502:	f025 0503 	bic.w	r5, r5, #3
 800b506:	3508      	adds	r5, #8
 800b508:	2d0c      	cmp	r5, #12
 800b50a:	bf38      	it	cc
 800b50c:	250c      	movcc	r5, #12
 800b50e:	4629      	mov	r1, r5
 800b510:	4638      	mov	r0, r7
 800b512:	f7ff ffa5 	bl	800b460 <sbrk_aligned>
 800b516:	3001      	adds	r0, #1
 800b518:	d02b      	beq.n	800b572 <_malloc_r+0xd2>
 800b51a:	6823      	ldr	r3, [r4, #0]
 800b51c:	442b      	add	r3, r5
 800b51e:	6023      	str	r3, [r4, #0]
 800b520:	e00e      	b.n	800b540 <_malloc_r+0xa0>
 800b522:	6822      	ldr	r2, [r4, #0]
 800b524:	1b52      	subs	r2, r2, r5
 800b526:	d41e      	bmi.n	800b566 <_malloc_r+0xc6>
 800b528:	2a0b      	cmp	r2, #11
 800b52a:	d916      	bls.n	800b55a <_malloc_r+0xba>
 800b52c:	1961      	adds	r1, r4, r5
 800b52e:	42a3      	cmp	r3, r4
 800b530:	6025      	str	r5, [r4, #0]
 800b532:	bf18      	it	ne
 800b534:	6059      	strne	r1, [r3, #4]
 800b536:	6863      	ldr	r3, [r4, #4]
 800b538:	bf08      	it	eq
 800b53a:	6031      	streq	r1, [r6, #0]
 800b53c:	5162      	str	r2, [r4, r5]
 800b53e:	604b      	str	r3, [r1, #4]
 800b540:	4638      	mov	r0, r7
 800b542:	f104 060b 	add.w	r6, r4, #11
 800b546:	f002 ff8f 	bl	800e468 <__malloc_unlock>
 800b54a:	f026 0607 	bic.w	r6, r6, #7
 800b54e:	1d23      	adds	r3, r4, #4
 800b550:	1af2      	subs	r2, r6, r3
 800b552:	d0b6      	beq.n	800b4c2 <_malloc_r+0x22>
 800b554:	1b9b      	subs	r3, r3, r6
 800b556:	50a3      	str	r3, [r4, r2]
 800b558:	e7b3      	b.n	800b4c2 <_malloc_r+0x22>
 800b55a:	6862      	ldr	r2, [r4, #4]
 800b55c:	42a3      	cmp	r3, r4
 800b55e:	bf0c      	ite	eq
 800b560:	6032      	streq	r2, [r6, #0]
 800b562:	605a      	strne	r2, [r3, #4]
 800b564:	e7ec      	b.n	800b540 <_malloc_r+0xa0>
 800b566:	4623      	mov	r3, r4
 800b568:	6864      	ldr	r4, [r4, #4]
 800b56a:	e7b2      	b.n	800b4d2 <_malloc_r+0x32>
 800b56c:	4634      	mov	r4, r6
 800b56e:	6876      	ldr	r6, [r6, #4]
 800b570:	e7b9      	b.n	800b4e6 <_malloc_r+0x46>
 800b572:	230c      	movs	r3, #12
 800b574:	603b      	str	r3, [r7, #0]
 800b576:	4638      	mov	r0, r7
 800b578:	f002 ff76 	bl	800e468 <__malloc_unlock>
 800b57c:	e7a1      	b.n	800b4c2 <_malloc_r+0x22>
 800b57e:	6025      	str	r5, [r4, #0]
 800b580:	e7de      	b.n	800b540 <_malloc_r+0xa0>
 800b582:	bf00      	nop
 800b584:	20000bbc 	.word	0x20000bbc

0800b588 <__cvt>:
 800b588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b58c:	ec55 4b10 	vmov	r4, r5, d0
 800b590:	2d00      	cmp	r5, #0
 800b592:	460e      	mov	r6, r1
 800b594:	4619      	mov	r1, r3
 800b596:	462b      	mov	r3, r5
 800b598:	bfbb      	ittet	lt
 800b59a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b59e:	461d      	movlt	r5, r3
 800b5a0:	2300      	movge	r3, #0
 800b5a2:	232d      	movlt	r3, #45	; 0x2d
 800b5a4:	700b      	strb	r3, [r1, #0]
 800b5a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b5ac:	4691      	mov	r9, r2
 800b5ae:	f023 0820 	bic.w	r8, r3, #32
 800b5b2:	bfbc      	itt	lt
 800b5b4:	4622      	movlt	r2, r4
 800b5b6:	4614      	movlt	r4, r2
 800b5b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b5bc:	d005      	beq.n	800b5ca <__cvt+0x42>
 800b5be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b5c2:	d100      	bne.n	800b5c6 <__cvt+0x3e>
 800b5c4:	3601      	adds	r6, #1
 800b5c6:	2102      	movs	r1, #2
 800b5c8:	e000      	b.n	800b5cc <__cvt+0x44>
 800b5ca:	2103      	movs	r1, #3
 800b5cc:	ab03      	add	r3, sp, #12
 800b5ce:	9301      	str	r3, [sp, #4]
 800b5d0:	ab02      	add	r3, sp, #8
 800b5d2:	9300      	str	r3, [sp, #0]
 800b5d4:	ec45 4b10 	vmov	d0, r4, r5
 800b5d8:	4653      	mov	r3, sl
 800b5da:	4632      	mov	r2, r6
 800b5dc:	f001 fdbc 	bl	800d158 <_dtoa_r>
 800b5e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b5e4:	4607      	mov	r7, r0
 800b5e6:	d102      	bne.n	800b5ee <__cvt+0x66>
 800b5e8:	f019 0f01 	tst.w	r9, #1
 800b5ec:	d022      	beq.n	800b634 <__cvt+0xac>
 800b5ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b5f2:	eb07 0906 	add.w	r9, r7, r6
 800b5f6:	d110      	bne.n	800b61a <__cvt+0x92>
 800b5f8:	783b      	ldrb	r3, [r7, #0]
 800b5fa:	2b30      	cmp	r3, #48	; 0x30
 800b5fc:	d10a      	bne.n	800b614 <__cvt+0x8c>
 800b5fe:	2200      	movs	r2, #0
 800b600:	2300      	movs	r3, #0
 800b602:	4620      	mov	r0, r4
 800b604:	4629      	mov	r1, r5
 800b606:	f7f5 fa5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800b60a:	b918      	cbnz	r0, 800b614 <__cvt+0x8c>
 800b60c:	f1c6 0601 	rsb	r6, r6, #1
 800b610:	f8ca 6000 	str.w	r6, [sl]
 800b614:	f8da 3000 	ldr.w	r3, [sl]
 800b618:	4499      	add	r9, r3
 800b61a:	2200      	movs	r2, #0
 800b61c:	2300      	movs	r3, #0
 800b61e:	4620      	mov	r0, r4
 800b620:	4629      	mov	r1, r5
 800b622:	f7f5 fa51 	bl	8000ac8 <__aeabi_dcmpeq>
 800b626:	b108      	cbz	r0, 800b62c <__cvt+0xa4>
 800b628:	f8cd 900c 	str.w	r9, [sp, #12]
 800b62c:	2230      	movs	r2, #48	; 0x30
 800b62e:	9b03      	ldr	r3, [sp, #12]
 800b630:	454b      	cmp	r3, r9
 800b632:	d307      	bcc.n	800b644 <__cvt+0xbc>
 800b634:	9b03      	ldr	r3, [sp, #12]
 800b636:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b638:	1bdb      	subs	r3, r3, r7
 800b63a:	4638      	mov	r0, r7
 800b63c:	6013      	str	r3, [r2, #0]
 800b63e:	b004      	add	sp, #16
 800b640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b644:	1c59      	adds	r1, r3, #1
 800b646:	9103      	str	r1, [sp, #12]
 800b648:	701a      	strb	r2, [r3, #0]
 800b64a:	e7f0      	b.n	800b62e <__cvt+0xa6>

0800b64c <__exponent>:
 800b64c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b64e:	4603      	mov	r3, r0
 800b650:	2900      	cmp	r1, #0
 800b652:	bfb8      	it	lt
 800b654:	4249      	neglt	r1, r1
 800b656:	f803 2b02 	strb.w	r2, [r3], #2
 800b65a:	bfb4      	ite	lt
 800b65c:	222d      	movlt	r2, #45	; 0x2d
 800b65e:	222b      	movge	r2, #43	; 0x2b
 800b660:	2909      	cmp	r1, #9
 800b662:	7042      	strb	r2, [r0, #1]
 800b664:	dd2a      	ble.n	800b6bc <__exponent+0x70>
 800b666:	f10d 0407 	add.w	r4, sp, #7
 800b66a:	46a4      	mov	ip, r4
 800b66c:	270a      	movs	r7, #10
 800b66e:	46a6      	mov	lr, r4
 800b670:	460a      	mov	r2, r1
 800b672:	fb91 f6f7 	sdiv	r6, r1, r7
 800b676:	fb07 1516 	mls	r5, r7, r6, r1
 800b67a:	3530      	adds	r5, #48	; 0x30
 800b67c:	2a63      	cmp	r2, #99	; 0x63
 800b67e:	f104 34ff 	add.w	r4, r4, #4294967295
 800b682:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b686:	4631      	mov	r1, r6
 800b688:	dcf1      	bgt.n	800b66e <__exponent+0x22>
 800b68a:	3130      	adds	r1, #48	; 0x30
 800b68c:	f1ae 0502 	sub.w	r5, lr, #2
 800b690:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b694:	1c44      	adds	r4, r0, #1
 800b696:	4629      	mov	r1, r5
 800b698:	4561      	cmp	r1, ip
 800b69a:	d30a      	bcc.n	800b6b2 <__exponent+0x66>
 800b69c:	f10d 0209 	add.w	r2, sp, #9
 800b6a0:	eba2 020e 	sub.w	r2, r2, lr
 800b6a4:	4565      	cmp	r5, ip
 800b6a6:	bf88      	it	hi
 800b6a8:	2200      	movhi	r2, #0
 800b6aa:	4413      	add	r3, r2
 800b6ac:	1a18      	subs	r0, r3, r0
 800b6ae:	b003      	add	sp, #12
 800b6b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b6b6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b6ba:	e7ed      	b.n	800b698 <__exponent+0x4c>
 800b6bc:	2330      	movs	r3, #48	; 0x30
 800b6be:	3130      	adds	r1, #48	; 0x30
 800b6c0:	7083      	strb	r3, [r0, #2]
 800b6c2:	70c1      	strb	r1, [r0, #3]
 800b6c4:	1d03      	adds	r3, r0, #4
 800b6c6:	e7f1      	b.n	800b6ac <__exponent+0x60>

0800b6c8 <_printf_float>:
 800b6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6cc:	ed2d 8b02 	vpush	{d8}
 800b6d0:	b08d      	sub	sp, #52	; 0x34
 800b6d2:	460c      	mov	r4, r1
 800b6d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b6d8:	4616      	mov	r6, r2
 800b6da:	461f      	mov	r7, r3
 800b6dc:	4605      	mov	r5, r0
 800b6de:	f002 fe99 	bl	800e414 <_localeconv_r>
 800b6e2:	f8d0 a000 	ldr.w	sl, [r0]
 800b6e6:	4650      	mov	r0, sl
 800b6e8:	f7f4 fd72 	bl	80001d0 <strlen>
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	930a      	str	r3, [sp, #40]	; 0x28
 800b6f0:	6823      	ldr	r3, [r4, #0]
 800b6f2:	9305      	str	r3, [sp, #20]
 800b6f4:	f8d8 3000 	ldr.w	r3, [r8]
 800b6f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b6fc:	3307      	adds	r3, #7
 800b6fe:	f023 0307 	bic.w	r3, r3, #7
 800b702:	f103 0208 	add.w	r2, r3, #8
 800b706:	f8c8 2000 	str.w	r2, [r8]
 800b70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b712:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b716:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b71a:	9307      	str	r3, [sp, #28]
 800b71c:	f8cd 8018 	str.w	r8, [sp, #24]
 800b720:	ee08 0a10 	vmov	s16, r0
 800b724:	4b9f      	ldr	r3, [pc, #636]	; (800b9a4 <_printf_float+0x2dc>)
 800b726:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b72a:	f04f 32ff 	mov.w	r2, #4294967295
 800b72e:	f7f5 f9fd 	bl	8000b2c <__aeabi_dcmpun>
 800b732:	bb88      	cbnz	r0, 800b798 <_printf_float+0xd0>
 800b734:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b738:	4b9a      	ldr	r3, [pc, #616]	; (800b9a4 <_printf_float+0x2dc>)
 800b73a:	f04f 32ff 	mov.w	r2, #4294967295
 800b73e:	f7f5 f9d7 	bl	8000af0 <__aeabi_dcmple>
 800b742:	bb48      	cbnz	r0, 800b798 <_printf_float+0xd0>
 800b744:	2200      	movs	r2, #0
 800b746:	2300      	movs	r3, #0
 800b748:	4640      	mov	r0, r8
 800b74a:	4649      	mov	r1, r9
 800b74c:	f7f5 f9c6 	bl	8000adc <__aeabi_dcmplt>
 800b750:	b110      	cbz	r0, 800b758 <_printf_float+0x90>
 800b752:	232d      	movs	r3, #45	; 0x2d
 800b754:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b758:	4b93      	ldr	r3, [pc, #588]	; (800b9a8 <_printf_float+0x2e0>)
 800b75a:	4894      	ldr	r0, [pc, #592]	; (800b9ac <_printf_float+0x2e4>)
 800b75c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b760:	bf94      	ite	ls
 800b762:	4698      	movls	r8, r3
 800b764:	4680      	movhi	r8, r0
 800b766:	2303      	movs	r3, #3
 800b768:	6123      	str	r3, [r4, #16]
 800b76a:	9b05      	ldr	r3, [sp, #20]
 800b76c:	f023 0204 	bic.w	r2, r3, #4
 800b770:	6022      	str	r2, [r4, #0]
 800b772:	f04f 0900 	mov.w	r9, #0
 800b776:	9700      	str	r7, [sp, #0]
 800b778:	4633      	mov	r3, r6
 800b77a:	aa0b      	add	r2, sp, #44	; 0x2c
 800b77c:	4621      	mov	r1, r4
 800b77e:	4628      	mov	r0, r5
 800b780:	f000 f9d8 	bl	800bb34 <_printf_common>
 800b784:	3001      	adds	r0, #1
 800b786:	f040 8090 	bne.w	800b8aa <_printf_float+0x1e2>
 800b78a:	f04f 30ff 	mov.w	r0, #4294967295
 800b78e:	b00d      	add	sp, #52	; 0x34
 800b790:	ecbd 8b02 	vpop	{d8}
 800b794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b798:	4642      	mov	r2, r8
 800b79a:	464b      	mov	r3, r9
 800b79c:	4640      	mov	r0, r8
 800b79e:	4649      	mov	r1, r9
 800b7a0:	f7f5 f9c4 	bl	8000b2c <__aeabi_dcmpun>
 800b7a4:	b140      	cbz	r0, 800b7b8 <_printf_float+0xf0>
 800b7a6:	464b      	mov	r3, r9
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	bfbc      	itt	lt
 800b7ac:	232d      	movlt	r3, #45	; 0x2d
 800b7ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b7b2:	487f      	ldr	r0, [pc, #508]	; (800b9b0 <_printf_float+0x2e8>)
 800b7b4:	4b7f      	ldr	r3, [pc, #508]	; (800b9b4 <_printf_float+0x2ec>)
 800b7b6:	e7d1      	b.n	800b75c <_printf_float+0x94>
 800b7b8:	6863      	ldr	r3, [r4, #4]
 800b7ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b7be:	9206      	str	r2, [sp, #24]
 800b7c0:	1c5a      	adds	r2, r3, #1
 800b7c2:	d13f      	bne.n	800b844 <_printf_float+0x17c>
 800b7c4:	2306      	movs	r3, #6
 800b7c6:	6063      	str	r3, [r4, #4]
 800b7c8:	9b05      	ldr	r3, [sp, #20]
 800b7ca:	6861      	ldr	r1, [r4, #4]
 800b7cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	9303      	str	r3, [sp, #12]
 800b7d4:	ab0a      	add	r3, sp, #40	; 0x28
 800b7d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b7da:	ab09      	add	r3, sp, #36	; 0x24
 800b7dc:	ec49 8b10 	vmov	d0, r8, r9
 800b7e0:	9300      	str	r3, [sp, #0]
 800b7e2:	6022      	str	r2, [r4, #0]
 800b7e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b7e8:	4628      	mov	r0, r5
 800b7ea:	f7ff fecd 	bl	800b588 <__cvt>
 800b7ee:	9b06      	ldr	r3, [sp, #24]
 800b7f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b7f2:	2b47      	cmp	r3, #71	; 0x47
 800b7f4:	4680      	mov	r8, r0
 800b7f6:	d108      	bne.n	800b80a <_printf_float+0x142>
 800b7f8:	1cc8      	adds	r0, r1, #3
 800b7fa:	db02      	blt.n	800b802 <_printf_float+0x13a>
 800b7fc:	6863      	ldr	r3, [r4, #4]
 800b7fe:	4299      	cmp	r1, r3
 800b800:	dd41      	ble.n	800b886 <_printf_float+0x1be>
 800b802:	f1ab 0b02 	sub.w	fp, fp, #2
 800b806:	fa5f fb8b 	uxtb.w	fp, fp
 800b80a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b80e:	d820      	bhi.n	800b852 <_printf_float+0x18a>
 800b810:	3901      	subs	r1, #1
 800b812:	465a      	mov	r2, fp
 800b814:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b818:	9109      	str	r1, [sp, #36]	; 0x24
 800b81a:	f7ff ff17 	bl	800b64c <__exponent>
 800b81e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b820:	1813      	adds	r3, r2, r0
 800b822:	2a01      	cmp	r2, #1
 800b824:	4681      	mov	r9, r0
 800b826:	6123      	str	r3, [r4, #16]
 800b828:	dc02      	bgt.n	800b830 <_printf_float+0x168>
 800b82a:	6822      	ldr	r2, [r4, #0]
 800b82c:	07d2      	lsls	r2, r2, #31
 800b82e:	d501      	bpl.n	800b834 <_printf_float+0x16c>
 800b830:	3301      	adds	r3, #1
 800b832:	6123      	str	r3, [r4, #16]
 800b834:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d09c      	beq.n	800b776 <_printf_float+0xae>
 800b83c:	232d      	movs	r3, #45	; 0x2d
 800b83e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b842:	e798      	b.n	800b776 <_printf_float+0xae>
 800b844:	9a06      	ldr	r2, [sp, #24]
 800b846:	2a47      	cmp	r2, #71	; 0x47
 800b848:	d1be      	bne.n	800b7c8 <_printf_float+0x100>
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d1bc      	bne.n	800b7c8 <_printf_float+0x100>
 800b84e:	2301      	movs	r3, #1
 800b850:	e7b9      	b.n	800b7c6 <_printf_float+0xfe>
 800b852:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b856:	d118      	bne.n	800b88a <_printf_float+0x1c2>
 800b858:	2900      	cmp	r1, #0
 800b85a:	6863      	ldr	r3, [r4, #4]
 800b85c:	dd0b      	ble.n	800b876 <_printf_float+0x1ae>
 800b85e:	6121      	str	r1, [r4, #16]
 800b860:	b913      	cbnz	r3, 800b868 <_printf_float+0x1a0>
 800b862:	6822      	ldr	r2, [r4, #0]
 800b864:	07d0      	lsls	r0, r2, #31
 800b866:	d502      	bpl.n	800b86e <_printf_float+0x1a6>
 800b868:	3301      	adds	r3, #1
 800b86a:	440b      	add	r3, r1
 800b86c:	6123      	str	r3, [r4, #16]
 800b86e:	65a1      	str	r1, [r4, #88]	; 0x58
 800b870:	f04f 0900 	mov.w	r9, #0
 800b874:	e7de      	b.n	800b834 <_printf_float+0x16c>
 800b876:	b913      	cbnz	r3, 800b87e <_printf_float+0x1b6>
 800b878:	6822      	ldr	r2, [r4, #0]
 800b87a:	07d2      	lsls	r2, r2, #31
 800b87c:	d501      	bpl.n	800b882 <_printf_float+0x1ba>
 800b87e:	3302      	adds	r3, #2
 800b880:	e7f4      	b.n	800b86c <_printf_float+0x1a4>
 800b882:	2301      	movs	r3, #1
 800b884:	e7f2      	b.n	800b86c <_printf_float+0x1a4>
 800b886:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b88a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b88c:	4299      	cmp	r1, r3
 800b88e:	db05      	blt.n	800b89c <_printf_float+0x1d4>
 800b890:	6823      	ldr	r3, [r4, #0]
 800b892:	6121      	str	r1, [r4, #16]
 800b894:	07d8      	lsls	r0, r3, #31
 800b896:	d5ea      	bpl.n	800b86e <_printf_float+0x1a6>
 800b898:	1c4b      	adds	r3, r1, #1
 800b89a:	e7e7      	b.n	800b86c <_printf_float+0x1a4>
 800b89c:	2900      	cmp	r1, #0
 800b89e:	bfd4      	ite	le
 800b8a0:	f1c1 0202 	rsble	r2, r1, #2
 800b8a4:	2201      	movgt	r2, #1
 800b8a6:	4413      	add	r3, r2
 800b8a8:	e7e0      	b.n	800b86c <_printf_float+0x1a4>
 800b8aa:	6823      	ldr	r3, [r4, #0]
 800b8ac:	055a      	lsls	r2, r3, #21
 800b8ae:	d407      	bmi.n	800b8c0 <_printf_float+0x1f8>
 800b8b0:	6923      	ldr	r3, [r4, #16]
 800b8b2:	4642      	mov	r2, r8
 800b8b4:	4631      	mov	r1, r6
 800b8b6:	4628      	mov	r0, r5
 800b8b8:	47b8      	blx	r7
 800b8ba:	3001      	adds	r0, #1
 800b8bc:	d12c      	bne.n	800b918 <_printf_float+0x250>
 800b8be:	e764      	b.n	800b78a <_printf_float+0xc2>
 800b8c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b8c4:	f240 80e0 	bls.w	800ba88 <_printf_float+0x3c0>
 800b8c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	f7f5 f8fa 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8d4:	2800      	cmp	r0, #0
 800b8d6:	d034      	beq.n	800b942 <_printf_float+0x27a>
 800b8d8:	4a37      	ldr	r2, [pc, #220]	; (800b9b8 <_printf_float+0x2f0>)
 800b8da:	2301      	movs	r3, #1
 800b8dc:	4631      	mov	r1, r6
 800b8de:	4628      	mov	r0, r5
 800b8e0:	47b8      	blx	r7
 800b8e2:	3001      	adds	r0, #1
 800b8e4:	f43f af51 	beq.w	800b78a <_printf_float+0xc2>
 800b8e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	db02      	blt.n	800b8f6 <_printf_float+0x22e>
 800b8f0:	6823      	ldr	r3, [r4, #0]
 800b8f2:	07d8      	lsls	r0, r3, #31
 800b8f4:	d510      	bpl.n	800b918 <_printf_float+0x250>
 800b8f6:	ee18 3a10 	vmov	r3, s16
 800b8fa:	4652      	mov	r2, sl
 800b8fc:	4631      	mov	r1, r6
 800b8fe:	4628      	mov	r0, r5
 800b900:	47b8      	blx	r7
 800b902:	3001      	adds	r0, #1
 800b904:	f43f af41 	beq.w	800b78a <_printf_float+0xc2>
 800b908:	f04f 0800 	mov.w	r8, #0
 800b90c:	f104 091a 	add.w	r9, r4, #26
 800b910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b912:	3b01      	subs	r3, #1
 800b914:	4543      	cmp	r3, r8
 800b916:	dc09      	bgt.n	800b92c <_printf_float+0x264>
 800b918:	6823      	ldr	r3, [r4, #0]
 800b91a:	079b      	lsls	r3, r3, #30
 800b91c:	f100 8105 	bmi.w	800bb2a <_printf_float+0x462>
 800b920:	68e0      	ldr	r0, [r4, #12]
 800b922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b924:	4298      	cmp	r0, r3
 800b926:	bfb8      	it	lt
 800b928:	4618      	movlt	r0, r3
 800b92a:	e730      	b.n	800b78e <_printf_float+0xc6>
 800b92c:	2301      	movs	r3, #1
 800b92e:	464a      	mov	r2, r9
 800b930:	4631      	mov	r1, r6
 800b932:	4628      	mov	r0, r5
 800b934:	47b8      	blx	r7
 800b936:	3001      	adds	r0, #1
 800b938:	f43f af27 	beq.w	800b78a <_printf_float+0xc2>
 800b93c:	f108 0801 	add.w	r8, r8, #1
 800b940:	e7e6      	b.n	800b910 <_printf_float+0x248>
 800b942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b944:	2b00      	cmp	r3, #0
 800b946:	dc39      	bgt.n	800b9bc <_printf_float+0x2f4>
 800b948:	4a1b      	ldr	r2, [pc, #108]	; (800b9b8 <_printf_float+0x2f0>)
 800b94a:	2301      	movs	r3, #1
 800b94c:	4631      	mov	r1, r6
 800b94e:	4628      	mov	r0, r5
 800b950:	47b8      	blx	r7
 800b952:	3001      	adds	r0, #1
 800b954:	f43f af19 	beq.w	800b78a <_printf_float+0xc2>
 800b958:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b95c:	4313      	orrs	r3, r2
 800b95e:	d102      	bne.n	800b966 <_printf_float+0x29e>
 800b960:	6823      	ldr	r3, [r4, #0]
 800b962:	07d9      	lsls	r1, r3, #31
 800b964:	d5d8      	bpl.n	800b918 <_printf_float+0x250>
 800b966:	ee18 3a10 	vmov	r3, s16
 800b96a:	4652      	mov	r2, sl
 800b96c:	4631      	mov	r1, r6
 800b96e:	4628      	mov	r0, r5
 800b970:	47b8      	blx	r7
 800b972:	3001      	adds	r0, #1
 800b974:	f43f af09 	beq.w	800b78a <_printf_float+0xc2>
 800b978:	f04f 0900 	mov.w	r9, #0
 800b97c:	f104 0a1a 	add.w	sl, r4, #26
 800b980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b982:	425b      	negs	r3, r3
 800b984:	454b      	cmp	r3, r9
 800b986:	dc01      	bgt.n	800b98c <_printf_float+0x2c4>
 800b988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b98a:	e792      	b.n	800b8b2 <_printf_float+0x1ea>
 800b98c:	2301      	movs	r3, #1
 800b98e:	4652      	mov	r2, sl
 800b990:	4631      	mov	r1, r6
 800b992:	4628      	mov	r0, r5
 800b994:	47b8      	blx	r7
 800b996:	3001      	adds	r0, #1
 800b998:	f43f aef7 	beq.w	800b78a <_printf_float+0xc2>
 800b99c:	f109 0901 	add.w	r9, r9, #1
 800b9a0:	e7ee      	b.n	800b980 <_printf_float+0x2b8>
 800b9a2:	bf00      	nop
 800b9a4:	7fefffff 	.word	0x7fefffff
 800b9a8:	0800fd20 	.word	0x0800fd20
 800b9ac:	0800fd24 	.word	0x0800fd24
 800b9b0:	0800fd2c 	.word	0x0800fd2c
 800b9b4:	0800fd28 	.word	0x0800fd28
 800b9b8:	0800fd30 	.word	0x0800fd30
 800b9bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b9be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	bfa8      	it	ge
 800b9c4:	461a      	movge	r2, r3
 800b9c6:	2a00      	cmp	r2, #0
 800b9c8:	4691      	mov	r9, r2
 800b9ca:	dc37      	bgt.n	800ba3c <_printf_float+0x374>
 800b9cc:	f04f 0b00 	mov.w	fp, #0
 800b9d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b9d4:	f104 021a 	add.w	r2, r4, #26
 800b9d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b9da:	9305      	str	r3, [sp, #20]
 800b9dc:	eba3 0309 	sub.w	r3, r3, r9
 800b9e0:	455b      	cmp	r3, fp
 800b9e2:	dc33      	bgt.n	800ba4c <_printf_float+0x384>
 800b9e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	db3b      	blt.n	800ba64 <_printf_float+0x39c>
 800b9ec:	6823      	ldr	r3, [r4, #0]
 800b9ee:	07da      	lsls	r2, r3, #31
 800b9f0:	d438      	bmi.n	800ba64 <_printf_float+0x39c>
 800b9f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9f4:	9a05      	ldr	r2, [sp, #20]
 800b9f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b9f8:	1a9a      	subs	r2, r3, r2
 800b9fa:	eba3 0901 	sub.w	r9, r3, r1
 800b9fe:	4591      	cmp	r9, r2
 800ba00:	bfa8      	it	ge
 800ba02:	4691      	movge	r9, r2
 800ba04:	f1b9 0f00 	cmp.w	r9, #0
 800ba08:	dc35      	bgt.n	800ba76 <_printf_float+0x3ae>
 800ba0a:	f04f 0800 	mov.w	r8, #0
 800ba0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ba12:	f104 0a1a 	add.w	sl, r4, #26
 800ba16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ba1a:	1a9b      	subs	r3, r3, r2
 800ba1c:	eba3 0309 	sub.w	r3, r3, r9
 800ba20:	4543      	cmp	r3, r8
 800ba22:	f77f af79 	ble.w	800b918 <_printf_float+0x250>
 800ba26:	2301      	movs	r3, #1
 800ba28:	4652      	mov	r2, sl
 800ba2a:	4631      	mov	r1, r6
 800ba2c:	4628      	mov	r0, r5
 800ba2e:	47b8      	blx	r7
 800ba30:	3001      	adds	r0, #1
 800ba32:	f43f aeaa 	beq.w	800b78a <_printf_float+0xc2>
 800ba36:	f108 0801 	add.w	r8, r8, #1
 800ba3a:	e7ec      	b.n	800ba16 <_printf_float+0x34e>
 800ba3c:	4613      	mov	r3, r2
 800ba3e:	4631      	mov	r1, r6
 800ba40:	4642      	mov	r2, r8
 800ba42:	4628      	mov	r0, r5
 800ba44:	47b8      	blx	r7
 800ba46:	3001      	adds	r0, #1
 800ba48:	d1c0      	bne.n	800b9cc <_printf_float+0x304>
 800ba4a:	e69e      	b.n	800b78a <_printf_float+0xc2>
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	4631      	mov	r1, r6
 800ba50:	4628      	mov	r0, r5
 800ba52:	9205      	str	r2, [sp, #20]
 800ba54:	47b8      	blx	r7
 800ba56:	3001      	adds	r0, #1
 800ba58:	f43f ae97 	beq.w	800b78a <_printf_float+0xc2>
 800ba5c:	9a05      	ldr	r2, [sp, #20]
 800ba5e:	f10b 0b01 	add.w	fp, fp, #1
 800ba62:	e7b9      	b.n	800b9d8 <_printf_float+0x310>
 800ba64:	ee18 3a10 	vmov	r3, s16
 800ba68:	4652      	mov	r2, sl
 800ba6a:	4631      	mov	r1, r6
 800ba6c:	4628      	mov	r0, r5
 800ba6e:	47b8      	blx	r7
 800ba70:	3001      	adds	r0, #1
 800ba72:	d1be      	bne.n	800b9f2 <_printf_float+0x32a>
 800ba74:	e689      	b.n	800b78a <_printf_float+0xc2>
 800ba76:	9a05      	ldr	r2, [sp, #20]
 800ba78:	464b      	mov	r3, r9
 800ba7a:	4442      	add	r2, r8
 800ba7c:	4631      	mov	r1, r6
 800ba7e:	4628      	mov	r0, r5
 800ba80:	47b8      	blx	r7
 800ba82:	3001      	adds	r0, #1
 800ba84:	d1c1      	bne.n	800ba0a <_printf_float+0x342>
 800ba86:	e680      	b.n	800b78a <_printf_float+0xc2>
 800ba88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba8a:	2a01      	cmp	r2, #1
 800ba8c:	dc01      	bgt.n	800ba92 <_printf_float+0x3ca>
 800ba8e:	07db      	lsls	r3, r3, #31
 800ba90:	d538      	bpl.n	800bb04 <_printf_float+0x43c>
 800ba92:	2301      	movs	r3, #1
 800ba94:	4642      	mov	r2, r8
 800ba96:	4631      	mov	r1, r6
 800ba98:	4628      	mov	r0, r5
 800ba9a:	47b8      	blx	r7
 800ba9c:	3001      	adds	r0, #1
 800ba9e:	f43f ae74 	beq.w	800b78a <_printf_float+0xc2>
 800baa2:	ee18 3a10 	vmov	r3, s16
 800baa6:	4652      	mov	r2, sl
 800baa8:	4631      	mov	r1, r6
 800baaa:	4628      	mov	r0, r5
 800baac:	47b8      	blx	r7
 800baae:	3001      	adds	r0, #1
 800bab0:	f43f ae6b 	beq.w	800b78a <_printf_float+0xc2>
 800bab4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bab8:	2200      	movs	r2, #0
 800baba:	2300      	movs	r3, #0
 800babc:	f7f5 f804 	bl	8000ac8 <__aeabi_dcmpeq>
 800bac0:	b9d8      	cbnz	r0, 800bafa <_printf_float+0x432>
 800bac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bac4:	f108 0201 	add.w	r2, r8, #1
 800bac8:	3b01      	subs	r3, #1
 800baca:	4631      	mov	r1, r6
 800bacc:	4628      	mov	r0, r5
 800bace:	47b8      	blx	r7
 800bad0:	3001      	adds	r0, #1
 800bad2:	d10e      	bne.n	800baf2 <_printf_float+0x42a>
 800bad4:	e659      	b.n	800b78a <_printf_float+0xc2>
 800bad6:	2301      	movs	r3, #1
 800bad8:	4652      	mov	r2, sl
 800bada:	4631      	mov	r1, r6
 800badc:	4628      	mov	r0, r5
 800bade:	47b8      	blx	r7
 800bae0:	3001      	adds	r0, #1
 800bae2:	f43f ae52 	beq.w	800b78a <_printf_float+0xc2>
 800bae6:	f108 0801 	add.w	r8, r8, #1
 800baea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800baec:	3b01      	subs	r3, #1
 800baee:	4543      	cmp	r3, r8
 800baf0:	dcf1      	bgt.n	800bad6 <_printf_float+0x40e>
 800baf2:	464b      	mov	r3, r9
 800baf4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800baf8:	e6dc      	b.n	800b8b4 <_printf_float+0x1ec>
 800bafa:	f04f 0800 	mov.w	r8, #0
 800bafe:	f104 0a1a 	add.w	sl, r4, #26
 800bb02:	e7f2      	b.n	800baea <_printf_float+0x422>
 800bb04:	2301      	movs	r3, #1
 800bb06:	4642      	mov	r2, r8
 800bb08:	e7df      	b.n	800baca <_printf_float+0x402>
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	464a      	mov	r2, r9
 800bb0e:	4631      	mov	r1, r6
 800bb10:	4628      	mov	r0, r5
 800bb12:	47b8      	blx	r7
 800bb14:	3001      	adds	r0, #1
 800bb16:	f43f ae38 	beq.w	800b78a <_printf_float+0xc2>
 800bb1a:	f108 0801 	add.w	r8, r8, #1
 800bb1e:	68e3      	ldr	r3, [r4, #12]
 800bb20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bb22:	1a5b      	subs	r3, r3, r1
 800bb24:	4543      	cmp	r3, r8
 800bb26:	dcf0      	bgt.n	800bb0a <_printf_float+0x442>
 800bb28:	e6fa      	b.n	800b920 <_printf_float+0x258>
 800bb2a:	f04f 0800 	mov.w	r8, #0
 800bb2e:	f104 0919 	add.w	r9, r4, #25
 800bb32:	e7f4      	b.n	800bb1e <_printf_float+0x456>

0800bb34 <_printf_common>:
 800bb34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb38:	4616      	mov	r6, r2
 800bb3a:	4699      	mov	r9, r3
 800bb3c:	688a      	ldr	r2, [r1, #8]
 800bb3e:	690b      	ldr	r3, [r1, #16]
 800bb40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bb44:	4293      	cmp	r3, r2
 800bb46:	bfb8      	it	lt
 800bb48:	4613      	movlt	r3, r2
 800bb4a:	6033      	str	r3, [r6, #0]
 800bb4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bb50:	4607      	mov	r7, r0
 800bb52:	460c      	mov	r4, r1
 800bb54:	b10a      	cbz	r2, 800bb5a <_printf_common+0x26>
 800bb56:	3301      	adds	r3, #1
 800bb58:	6033      	str	r3, [r6, #0]
 800bb5a:	6823      	ldr	r3, [r4, #0]
 800bb5c:	0699      	lsls	r1, r3, #26
 800bb5e:	bf42      	ittt	mi
 800bb60:	6833      	ldrmi	r3, [r6, #0]
 800bb62:	3302      	addmi	r3, #2
 800bb64:	6033      	strmi	r3, [r6, #0]
 800bb66:	6825      	ldr	r5, [r4, #0]
 800bb68:	f015 0506 	ands.w	r5, r5, #6
 800bb6c:	d106      	bne.n	800bb7c <_printf_common+0x48>
 800bb6e:	f104 0a19 	add.w	sl, r4, #25
 800bb72:	68e3      	ldr	r3, [r4, #12]
 800bb74:	6832      	ldr	r2, [r6, #0]
 800bb76:	1a9b      	subs	r3, r3, r2
 800bb78:	42ab      	cmp	r3, r5
 800bb7a:	dc26      	bgt.n	800bbca <_printf_common+0x96>
 800bb7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bb80:	1e13      	subs	r3, r2, #0
 800bb82:	6822      	ldr	r2, [r4, #0]
 800bb84:	bf18      	it	ne
 800bb86:	2301      	movne	r3, #1
 800bb88:	0692      	lsls	r2, r2, #26
 800bb8a:	d42b      	bmi.n	800bbe4 <_printf_common+0xb0>
 800bb8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb90:	4649      	mov	r1, r9
 800bb92:	4638      	mov	r0, r7
 800bb94:	47c0      	blx	r8
 800bb96:	3001      	adds	r0, #1
 800bb98:	d01e      	beq.n	800bbd8 <_printf_common+0xa4>
 800bb9a:	6823      	ldr	r3, [r4, #0]
 800bb9c:	68e5      	ldr	r5, [r4, #12]
 800bb9e:	6832      	ldr	r2, [r6, #0]
 800bba0:	f003 0306 	and.w	r3, r3, #6
 800bba4:	2b04      	cmp	r3, #4
 800bba6:	bf08      	it	eq
 800bba8:	1aad      	subeq	r5, r5, r2
 800bbaa:	68a3      	ldr	r3, [r4, #8]
 800bbac:	6922      	ldr	r2, [r4, #16]
 800bbae:	bf0c      	ite	eq
 800bbb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bbb4:	2500      	movne	r5, #0
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	bfc4      	itt	gt
 800bbba:	1a9b      	subgt	r3, r3, r2
 800bbbc:	18ed      	addgt	r5, r5, r3
 800bbbe:	2600      	movs	r6, #0
 800bbc0:	341a      	adds	r4, #26
 800bbc2:	42b5      	cmp	r5, r6
 800bbc4:	d11a      	bne.n	800bbfc <_printf_common+0xc8>
 800bbc6:	2000      	movs	r0, #0
 800bbc8:	e008      	b.n	800bbdc <_printf_common+0xa8>
 800bbca:	2301      	movs	r3, #1
 800bbcc:	4652      	mov	r2, sl
 800bbce:	4649      	mov	r1, r9
 800bbd0:	4638      	mov	r0, r7
 800bbd2:	47c0      	blx	r8
 800bbd4:	3001      	adds	r0, #1
 800bbd6:	d103      	bne.n	800bbe0 <_printf_common+0xac>
 800bbd8:	f04f 30ff 	mov.w	r0, #4294967295
 800bbdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbe0:	3501      	adds	r5, #1
 800bbe2:	e7c6      	b.n	800bb72 <_printf_common+0x3e>
 800bbe4:	18e1      	adds	r1, r4, r3
 800bbe6:	1c5a      	adds	r2, r3, #1
 800bbe8:	2030      	movs	r0, #48	; 0x30
 800bbea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bbee:	4422      	add	r2, r4
 800bbf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bbf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bbf8:	3302      	adds	r3, #2
 800bbfa:	e7c7      	b.n	800bb8c <_printf_common+0x58>
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	4622      	mov	r2, r4
 800bc00:	4649      	mov	r1, r9
 800bc02:	4638      	mov	r0, r7
 800bc04:	47c0      	blx	r8
 800bc06:	3001      	adds	r0, #1
 800bc08:	d0e6      	beq.n	800bbd8 <_printf_common+0xa4>
 800bc0a:	3601      	adds	r6, #1
 800bc0c:	e7d9      	b.n	800bbc2 <_printf_common+0x8e>
	...

0800bc10 <_printf_i>:
 800bc10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc14:	7e0f      	ldrb	r7, [r1, #24]
 800bc16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bc18:	2f78      	cmp	r7, #120	; 0x78
 800bc1a:	4691      	mov	r9, r2
 800bc1c:	4680      	mov	r8, r0
 800bc1e:	460c      	mov	r4, r1
 800bc20:	469a      	mov	sl, r3
 800bc22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bc26:	d807      	bhi.n	800bc38 <_printf_i+0x28>
 800bc28:	2f62      	cmp	r7, #98	; 0x62
 800bc2a:	d80a      	bhi.n	800bc42 <_printf_i+0x32>
 800bc2c:	2f00      	cmp	r7, #0
 800bc2e:	f000 80d8 	beq.w	800bde2 <_printf_i+0x1d2>
 800bc32:	2f58      	cmp	r7, #88	; 0x58
 800bc34:	f000 80a3 	beq.w	800bd7e <_printf_i+0x16e>
 800bc38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bc40:	e03a      	b.n	800bcb8 <_printf_i+0xa8>
 800bc42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bc46:	2b15      	cmp	r3, #21
 800bc48:	d8f6      	bhi.n	800bc38 <_printf_i+0x28>
 800bc4a:	a101      	add	r1, pc, #4	; (adr r1, 800bc50 <_printf_i+0x40>)
 800bc4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bc50:	0800bca9 	.word	0x0800bca9
 800bc54:	0800bcbd 	.word	0x0800bcbd
 800bc58:	0800bc39 	.word	0x0800bc39
 800bc5c:	0800bc39 	.word	0x0800bc39
 800bc60:	0800bc39 	.word	0x0800bc39
 800bc64:	0800bc39 	.word	0x0800bc39
 800bc68:	0800bcbd 	.word	0x0800bcbd
 800bc6c:	0800bc39 	.word	0x0800bc39
 800bc70:	0800bc39 	.word	0x0800bc39
 800bc74:	0800bc39 	.word	0x0800bc39
 800bc78:	0800bc39 	.word	0x0800bc39
 800bc7c:	0800bdc9 	.word	0x0800bdc9
 800bc80:	0800bced 	.word	0x0800bced
 800bc84:	0800bdab 	.word	0x0800bdab
 800bc88:	0800bc39 	.word	0x0800bc39
 800bc8c:	0800bc39 	.word	0x0800bc39
 800bc90:	0800bdeb 	.word	0x0800bdeb
 800bc94:	0800bc39 	.word	0x0800bc39
 800bc98:	0800bced 	.word	0x0800bced
 800bc9c:	0800bc39 	.word	0x0800bc39
 800bca0:	0800bc39 	.word	0x0800bc39
 800bca4:	0800bdb3 	.word	0x0800bdb3
 800bca8:	682b      	ldr	r3, [r5, #0]
 800bcaa:	1d1a      	adds	r2, r3, #4
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	602a      	str	r2, [r5, #0]
 800bcb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bcb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bcb8:	2301      	movs	r3, #1
 800bcba:	e0a3      	b.n	800be04 <_printf_i+0x1f4>
 800bcbc:	6820      	ldr	r0, [r4, #0]
 800bcbe:	6829      	ldr	r1, [r5, #0]
 800bcc0:	0606      	lsls	r6, r0, #24
 800bcc2:	f101 0304 	add.w	r3, r1, #4
 800bcc6:	d50a      	bpl.n	800bcde <_printf_i+0xce>
 800bcc8:	680e      	ldr	r6, [r1, #0]
 800bcca:	602b      	str	r3, [r5, #0]
 800bccc:	2e00      	cmp	r6, #0
 800bcce:	da03      	bge.n	800bcd8 <_printf_i+0xc8>
 800bcd0:	232d      	movs	r3, #45	; 0x2d
 800bcd2:	4276      	negs	r6, r6
 800bcd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcd8:	485e      	ldr	r0, [pc, #376]	; (800be54 <_printf_i+0x244>)
 800bcda:	230a      	movs	r3, #10
 800bcdc:	e019      	b.n	800bd12 <_printf_i+0x102>
 800bcde:	680e      	ldr	r6, [r1, #0]
 800bce0:	602b      	str	r3, [r5, #0]
 800bce2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bce6:	bf18      	it	ne
 800bce8:	b236      	sxthne	r6, r6
 800bcea:	e7ef      	b.n	800bccc <_printf_i+0xbc>
 800bcec:	682b      	ldr	r3, [r5, #0]
 800bcee:	6820      	ldr	r0, [r4, #0]
 800bcf0:	1d19      	adds	r1, r3, #4
 800bcf2:	6029      	str	r1, [r5, #0]
 800bcf4:	0601      	lsls	r1, r0, #24
 800bcf6:	d501      	bpl.n	800bcfc <_printf_i+0xec>
 800bcf8:	681e      	ldr	r6, [r3, #0]
 800bcfa:	e002      	b.n	800bd02 <_printf_i+0xf2>
 800bcfc:	0646      	lsls	r6, r0, #25
 800bcfe:	d5fb      	bpl.n	800bcf8 <_printf_i+0xe8>
 800bd00:	881e      	ldrh	r6, [r3, #0]
 800bd02:	4854      	ldr	r0, [pc, #336]	; (800be54 <_printf_i+0x244>)
 800bd04:	2f6f      	cmp	r7, #111	; 0x6f
 800bd06:	bf0c      	ite	eq
 800bd08:	2308      	moveq	r3, #8
 800bd0a:	230a      	movne	r3, #10
 800bd0c:	2100      	movs	r1, #0
 800bd0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bd12:	6865      	ldr	r5, [r4, #4]
 800bd14:	60a5      	str	r5, [r4, #8]
 800bd16:	2d00      	cmp	r5, #0
 800bd18:	bfa2      	ittt	ge
 800bd1a:	6821      	ldrge	r1, [r4, #0]
 800bd1c:	f021 0104 	bicge.w	r1, r1, #4
 800bd20:	6021      	strge	r1, [r4, #0]
 800bd22:	b90e      	cbnz	r6, 800bd28 <_printf_i+0x118>
 800bd24:	2d00      	cmp	r5, #0
 800bd26:	d04d      	beq.n	800bdc4 <_printf_i+0x1b4>
 800bd28:	4615      	mov	r5, r2
 800bd2a:	fbb6 f1f3 	udiv	r1, r6, r3
 800bd2e:	fb03 6711 	mls	r7, r3, r1, r6
 800bd32:	5dc7      	ldrb	r7, [r0, r7]
 800bd34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bd38:	4637      	mov	r7, r6
 800bd3a:	42bb      	cmp	r3, r7
 800bd3c:	460e      	mov	r6, r1
 800bd3e:	d9f4      	bls.n	800bd2a <_printf_i+0x11a>
 800bd40:	2b08      	cmp	r3, #8
 800bd42:	d10b      	bne.n	800bd5c <_printf_i+0x14c>
 800bd44:	6823      	ldr	r3, [r4, #0]
 800bd46:	07de      	lsls	r6, r3, #31
 800bd48:	d508      	bpl.n	800bd5c <_printf_i+0x14c>
 800bd4a:	6923      	ldr	r3, [r4, #16]
 800bd4c:	6861      	ldr	r1, [r4, #4]
 800bd4e:	4299      	cmp	r1, r3
 800bd50:	bfde      	ittt	le
 800bd52:	2330      	movle	r3, #48	; 0x30
 800bd54:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bd58:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bd5c:	1b52      	subs	r2, r2, r5
 800bd5e:	6122      	str	r2, [r4, #16]
 800bd60:	f8cd a000 	str.w	sl, [sp]
 800bd64:	464b      	mov	r3, r9
 800bd66:	aa03      	add	r2, sp, #12
 800bd68:	4621      	mov	r1, r4
 800bd6a:	4640      	mov	r0, r8
 800bd6c:	f7ff fee2 	bl	800bb34 <_printf_common>
 800bd70:	3001      	adds	r0, #1
 800bd72:	d14c      	bne.n	800be0e <_printf_i+0x1fe>
 800bd74:	f04f 30ff 	mov.w	r0, #4294967295
 800bd78:	b004      	add	sp, #16
 800bd7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd7e:	4835      	ldr	r0, [pc, #212]	; (800be54 <_printf_i+0x244>)
 800bd80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bd84:	6829      	ldr	r1, [r5, #0]
 800bd86:	6823      	ldr	r3, [r4, #0]
 800bd88:	f851 6b04 	ldr.w	r6, [r1], #4
 800bd8c:	6029      	str	r1, [r5, #0]
 800bd8e:	061d      	lsls	r5, r3, #24
 800bd90:	d514      	bpl.n	800bdbc <_printf_i+0x1ac>
 800bd92:	07df      	lsls	r7, r3, #31
 800bd94:	bf44      	itt	mi
 800bd96:	f043 0320 	orrmi.w	r3, r3, #32
 800bd9a:	6023      	strmi	r3, [r4, #0]
 800bd9c:	b91e      	cbnz	r6, 800bda6 <_printf_i+0x196>
 800bd9e:	6823      	ldr	r3, [r4, #0]
 800bda0:	f023 0320 	bic.w	r3, r3, #32
 800bda4:	6023      	str	r3, [r4, #0]
 800bda6:	2310      	movs	r3, #16
 800bda8:	e7b0      	b.n	800bd0c <_printf_i+0xfc>
 800bdaa:	6823      	ldr	r3, [r4, #0]
 800bdac:	f043 0320 	orr.w	r3, r3, #32
 800bdb0:	6023      	str	r3, [r4, #0]
 800bdb2:	2378      	movs	r3, #120	; 0x78
 800bdb4:	4828      	ldr	r0, [pc, #160]	; (800be58 <_printf_i+0x248>)
 800bdb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bdba:	e7e3      	b.n	800bd84 <_printf_i+0x174>
 800bdbc:	0659      	lsls	r1, r3, #25
 800bdbe:	bf48      	it	mi
 800bdc0:	b2b6      	uxthmi	r6, r6
 800bdc2:	e7e6      	b.n	800bd92 <_printf_i+0x182>
 800bdc4:	4615      	mov	r5, r2
 800bdc6:	e7bb      	b.n	800bd40 <_printf_i+0x130>
 800bdc8:	682b      	ldr	r3, [r5, #0]
 800bdca:	6826      	ldr	r6, [r4, #0]
 800bdcc:	6961      	ldr	r1, [r4, #20]
 800bdce:	1d18      	adds	r0, r3, #4
 800bdd0:	6028      	str	r0, [r5, #0]
 800bdd2:	0635      	lsls	r5, r6, #24
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	d501      	bpl.n	800bddc <_printf_i+0x1cc>
 800bdd8:	6019      	str	r1, [r3, #0]
 800bdda:	e002      	b.n	800bde2 <_printf_i+0x1d2>
 800bddc:	0670      	lsls	r0, r6, #25
 800bdde:	d5fb      	bpl.n	800bdd8 <_printf_i+0x1c8>
 800bde0:	8019      	strh	r1, [r3, #0]
 800bde2:	2300      	movs	r3, #0
 800bde4:	6123      	str	r3, [r4, #16]
 800bde6:	4615      	mov	r5, r2
 800bde8:	e7ba      	b.n	800bd60 <_printf_i+0x150>
 800bdea:	682b      	ldr	r3, [r5, #0]
 800bdec:	1d1a      	adds	r2, r3, #4
 800bdee:	602a      	str	r2, [r5, #0]
 800bdf0:	681d      	ldr	r5, [r3, #0]
 800bdf2:	6862      	ldr	r2, [r4, #4]
 800bdf4:	2100      	movs	r1, #0
 800bdf6:	4628      	mov	r0, r5
 800bdf8:	f7f4 f9f2 	bl	80001e0 <memchr>
 800bdfc:	b108      	cbz	r0, 800be02 <_printf_i+0x1f2>
 800bdfe:	1b40      	subs	r0, r0, r5
 800be00:	6060      	str	r0, [r4, #4]
 800be02:	6863      	ldr	r3, [r4, #4]
 800be04:	6123      	str	r3, [r4, #16]
 800be06:	2300      	movs	r3, #0
 800be08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be0c:	e7a8      	b.n	800bd60 <_printf_i+0x150>
 800be0e:	6923      	ldr	r3, [r4, #16]
 800be10:	462a      	mov	r2, r5
 800be12:	4649      	mov	r1, r9
 800be14:	4640      	mov	r0, r8
 800be16:	47d0      	blx	sl
 800be18:	3001      	adds	r0, #1
 800be1a:	d0ab      	beq.n	800bd74 <_printf_i+0x164>
 800be1c:	6823      	ldr	r3, [r4, #0]
 800be1e:	079b      	lsls	r3, r3, #30
 800be20:	d413      	bmi.n	800be4a <_printf_i+0x23a>
 800be22:	68e0      	ldr	r0, [r4, #12]
 800be24:	9b03      	ldr	r3, [sp, #12]
 800be26:	4298      	cmp	r0, r3
 800be28:	bfb8      	it	lt
 800be2a:	4618      	movlt	r0, r3
 800be2c:	e7a4      	b.n	800bd78 <_printf_i+0x168>
 800be2e:	2301      	movs	r3, #1
 800be30:	4632      	mov	r2, r6
 800be32:	4649      	mov	r1, r9
 800be34:	4640      	mov	r0, r8
 800be36:	47d0      	blx	sl
 800be38:	3001      	adds	r0, #1
 800be3a:	d09b      	beq.n	800bd74 <_printf_i+0x164>
 800be3c:	3501      	adds	r5, #1
 800be3e:	68e3      	ldr	r3, [r4, #12]
 800be40:	9903      	ldr	r1, [sp, #12]
 800be42:	1a5b      	subs	r3, r3, r1
 800be44:	42ab      	cmp	r3, r5
 800be46:	dcf2      	bgt.n	800be2e <_printf_i+0x21e>
 800be48:	e7eb      	b.n	800be22 <_printf_i+0x212>
 800be4a:	2500      	movs	r5, #0
 800be4c:	f104 0619 	add.w	r6, r4, #25
 800be50:	e7f5      	b.n	800be3e <_printf_i+0x22e>
 800be52:	bf00      	nop
 800be54:	0800fd32 	.word	0x0800fd32
 800be58:	0800fd43 	.word	0x0800fd43

0800be5c <_scanf_float>:
 800be5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be60:	b087      	sub	sp, #28
 800be62:	4617      	mov	r7, r2
 800be64:	9303      	str	r3, [sp, #12]
 800be66:	688b      	ldr	r3, [r1, #8]
 800be68:	1e5a      	subs	r2, r3, #1
 800be6a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800be6e:	bf83      	ittte	hi
 800be70:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800be74:	195b      	addhi	r3, r3, r5
 800be76:	9302      	strhi	r3, [sp, #8]
 800be78:	2300      	movls	r3, #0
 800be7a:	bf86      	itte	hi
 800be7c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800be80:	608b      	strhi	r3, [r1, #8]
 800be82:	9302      	strls	r3, [sp, #8]
 800be84:	680b      	ldr	r3, [r1, #0]
 800be86:	468b      	mov	fp, r1
 800be88:	2500      	movs	r5, #0
 800be8a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800be8e:	f84b 3b1c 	str.w	r3, [fp], #28
 800be92:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800be96:	4680      	mov	r8, r0
 800be98:	460c      	mov	r4, r1
 800be9a:	465e      	mov	r6, fp
 800be9c:	46aa      	mov	sl, r5
 800be9e:	46a9      	mov	r9, r5
 800bea0:	9501      	str	r5, [sp, #4]
 800bea2:	68a2      	ldr	r2, [r4, #8]
 800bea4:	b152      	cbz	r2, 800bebc <_scanf_float+0x60>
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	781b      	ldrb	r3, [r3, #0]
 800beaa:	2b4e      	cmp	r3, #78	; 0x4e
 800beac:	d864      	bhi.n	800bf78 <_scanf_float+0x11c>
 800beae:	2b40      	cmp	r3, #64	; 0x40
 800beb0:	d83c      	bhi.n	800bf2c <_scanf_float+0xd0>
 800beb2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800beb6:	b2c8      	uxtb	r0, r1
 800beb8:	280e      	cmp	r0, #14
 800beba:	d93a      	bls.n	800bf32 <_scanf_float+0xd6>
 800bebc:	f1b9 0f00 	cmp.w	r9, #0
 800bec0:	d003      	beq.n	800beca <_scanf_float+0x6e>
 800bec2:	6823      	ldr	r3, [r4, #0]
 800bec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bec8:	6023      	str	r3, [r4, #0]
 800beca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bece:	f1ba 0f01 	cmp.w	sl, #1
 800bed2:	f200 8113 	bhi.w	800c0fc <_scanf_float+0x2a0>
 800bed6:	455e      	cmp	r6, fp
 800bed8:	f200 8105 	bhi.w	800c0e6 <_scanf_float+0x28a>
 800bedc:	2501      	movs	r5, #1
 800bede:	4628      	mov	r0, r5
 800bee0:	b007      	add	sp, #28
 800bee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bee6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800beea:	2a0d      	cmp	r2, #13
 800beec:	d8e6      	bhi.n	800bebc <_scanf_float+0x60>
 800beee:	a101      	add	r1, pc, #4	; (adr r1, 800bef4 <_scanf_float+0x98>)
 800bef0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bef4:	0800c033 	.word	0x0800c033
 800bef8:	0800bebd 	.word	0x0800bebd
 800befc:	0800bebd 	.word	0x0800bebd
 800bf00:	0800bebd 	.word	0x0800bebd
 800bf04:	0800c093 	.word	0x0800c093
 800bf08:	0800c06b 	.word	0x0800c06b
 800bf0c:	0800bebd 	.word	0x0800bebd
 800bf10:	0800bebd 	.word	0x0800bebd
 800bf14:	0800c041 	.word	0x0800c041
 800bf18:	0800bebd 	.word	0x0800bebd
 800bf1c:	0800bebd 	.word	0x0800bebd
 800bf20:	0800bebd 	.word	0x0800bebd
 800bf24:	0800bebd 	.word	0x0800bebd
 800bf28:	0800bff9 	.word	0x0800bff9
 800bf2c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800bf30:	e7db      	b.n	800beea <_scanf_float+0x8e>
 800bf32:	290e      	cmp	r1, #14
 800bf34:	d8c2      	bhi.n	800bebc <_scanf_float+0x60>
 800bf36:	a001      	add	r0, pc, #4	; (adr r0, 800bf3c <_scanf_float+0xe0>)
 800bf38:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800bf3c:	0800bfeb 	.word	0x0800bfeb
 800bf40:	0800bebd 	.word	0x0800bebd
 800bf44:	0800bfeb 	.word	0x0800bfeb
 800bf48:	0800c07f 	.word	0x0800c07f
 800bf4c:	0800bebd 	.word	0x0800bebd
 800bf50:	0800bf99 	.word	0x0800bf99
 800bf54:	0800bfd5 	.word	0x0800bfd5
 800bf58:	0800bfd5 	.word	0x0800bfd5
 800bf5c:	0800bfd5 	.word	0x0800bfd5
 800bf60:	0800bfd5 	.word	0x0800bfd5
 800bf64:	0800bfd5 	.word	0x0800bfd5
 800bf68:	0800bfd5 	.word	0x0800bfd5
 800bf6c:	0800bfd5 	.word	0x0800bfd5
 800bf70:	0800bfd5 	.word	0x0800bfd5
 800bf74:	0800bfd5 	.word	0x0800bfd5
 800bf78:	2b6e      	cmp	r3, #110	; 0x6e
 800bf7a:	d809      	bhi.n	800bf90 <_scanf_float+0x134>
 800bf7c:	2b60      	cmp	r3, #96	; 0x60
 800bf7e:	d8b2      	bhi.n	800bee6 <_scanf_float+0x8a>
 800bf80:	2b54      	cmp	r3, #84	; 0x54
 800bf82:	d077      	beq.n	800c074 <_scanf_float+0x218>
 800bf84:	2b59      	cmp	r3, #89	; 0x59
 800bf86:	d199      	bne.n	800bebc <_scanf_float+0x60>
 800bf88:	2d07      	cmp	r5, #7
 800bf8a:	d197      	bne.n	800bebc <_scanf_float+0x60>
 800bf8c:	2508      	movs	r5, #8
 800bf8e:	e029      	b.n	800bfe4 <_scanf_float+0x188>
 800bf90:	2b74      	cmp	r3, #116	; 0x74
 800bf92:	d06f      	beq.n	800c074 <_scanf_float+0x218>
 800bf94:	2b79      	cmp	r3, #121	; 0x79
 800bf96:	e7f6      	b.n	800bf86 <_scanf_float+0x12a>
 800bf98:	6821      	ldr	r1, [r4, #0]
 800bf9a:	05c8      	lsls	r0, r1, #23
 800bf9c:	d51a      	bpl.n	800bfd4 <_scanf_float+0x178>
 800bf9e:	9b02      	ldr	r3, [sp, #8]
 800bfa0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bfa4:	6021      	str	r1, [r4, #0]
 800bfa6:	f109 0901 	add.w	r9, r9, #1
 800bfaa:	b11b      	cbz	r3, 800bfb4 <_scanf_float+0x158>
 800bfac:	3b01      	subs	r3, #1
 800bfae:	3201      	adds	r2, #1
 800bfb0:	9302      	str	r3, [sp, #8]
 800bfb2:	60a2      	str	r2, [r4, #8]
 800bfb4:	68a3      	ldr	r3, [r4, #8]
 800bfb6:	3b01      	subs	r3, #1
 800bfb8:	60a3      	str	r3, [r4, #8]
 800bfba:	6923      	ldr	r3, [r4, #16]
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	6123      	str	r3, [r4, #16]
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	3b01      	subs	r3, #1
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	607b      	str	r3, [r7, #4]
 800bfc8:	f340 8084 	ble.w	800c0d4 <_scanf_float+0x278>
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	3301      	adds	r3, #1
 800bfd0:	603b      	str	r3, [r7, #0]
 800bfd2:	e766      	b.n	800bea2 <_scanf_float+0x46>
 800bfd4:	eb1a 0f05 	cmn.w	sl, r5
 800bfd8:	f47f af70 	bne.w	800bebc <_scanf_float+0x60>
 800bfdc:	6822      	ldr	r2, [r4, #0]
 800bfde:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800bfe2:	6022      	str	r2, [r4, #0]
 800bfe4:	f806 3b01 	strb.w	r3, [r6], #1
 800bfe8:	e7e4      	b.n	800bfb4 <_scanf_float+0x158>
 800bfea:	6822      	ldr	r2, [r4, #0]
 800bfec:	0610      	lsls	r0, r2, #24
 800bfee:	f57f af65 	bpl.w	800bebc <_scanf_float+0x60>
 800bff2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bff6:	e7f4      	b.n	800bfe2 <_scanf_float+0x186>
 800bff8:	f1ba 0f00 	cmp.w	sl, #0
 800bffc:	d10e      	bne.n	800c01c <_scanf_float+0x1c0>
 800bffe:	f1b9 0f00 	cmp.w	r9, #0
 800c002:	d10e      	bne.n	800c022 <_scanf_float+0x1c6>
 800c004:	6822      	ldr	r2, [r4, #0]
 800c006:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c00a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c00e:	d108      	bne.n	800c022 <_scanf_float+0x1c6>
 800c010:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c014:	6022      	str	r2, [r4, #0]
 800c016:	f04f 0a01 	mov.w	sl, #1
 800c01a:	e7e3      	b.n	800bfe4 <_scanf_float+0x188>
 800c01c:	f1ba 0f02 	cmp.w	sl, #2
 800c020:	d055      	beq.n	800c0ce <_scanf_float+0x272>
 800c022:	2d01      	cmp	r5, #1
 800c024:	d002      	beq.n	800c02c <_scanf_float+0x1d0>
 800c026:	2d04      	cmp	r5, #4
 800c028:	f47f af48 	bne.w	800bebc <_scanf_float+0x60>
 800c02c:	3501      	adds	r5, #1
 800c02e:	b2ed      	uxtb	r5, r5
 800c030:	e7d8      	b.n	800bfe4 <_scanf_float+0x188>
 800c032:	f1ba 0f01 	cmp.w	sl, #1
 800c036:	f47f af41 	bne.w	800bebc <_scanf_float+0x60>
 800c03a:	f04f 0a02 	mov.w	sl, #2
 800c03e:	e7d1      	b.n	800bfe4 <_scanf_float+0x188>
 800c040:	b97d      	cbnz	r5, 800c062 <_scanf_float+0x206>
 800c042:	f1b9 0f00 	cmp.w	r9, #0
 800c046:	f47f af3c 	bne.w	800bec2 <_scanf_float+0x66>
 800c04a:	6822      	ldr	r2, [r4, #0]
 800c04c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c050:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c054:	f47f af39 	bne.w	800beca <_scanf_float+0x6e>
 800c058:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c05c:	6022      	str	r2, [r4, #0]
 800c05e:	2501      	movs	r5, #1
 800c060:	e7c0      	b.n	800bfe4 <_scanf_float+0x188>
 800c062:	2d03      	cmp	r5, #3
 800c064:	d0e2      	beq.n	800c02c <_scanf_float+0x1d0>
 800c066:	2d05      	cmp	r5, #5
 800c068:	e7de      	b.n	800c028 <_scanf_float+0x1cc>
 800c06a:	2d02      	cmp	r5, #2
 800c06c:	f47f af26 	bne.w	800bebc <_scanf_float+0x60>
 800c070:	2503      	movs	r5, #3
 800c072:	e7b7      	b.n	800bfe4 <_scanf_float+0x188>
 800c074:	2d06      	cmp	r5, #6
 800c076:	f47f af21 	bne.w	800bebc <_scanf_float+0x60>
 800c07a:	2507      	movs	r5, #7
 800c07c:	e7b2      	b.n	800bfe4 <_scanf_float+0x188>
 800c07e:	6822      	ldr	r2, [r4, #0]
 800c080:	0591      	lsls	r1, r2, #22
 800c082:	f57f af1b 	bpl.w	800bebc <_scanf_float+0x60>
 800c086:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c08a:	6022      	str	r2, [r4, #0]
 800c08c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c090:	e7a8      	b.n	800bfe4 <_scanf_float+0x188>
 800c092:	6822      	ldr	r2, [r4, #0]
 800c094:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c098:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c09c:	d006      	beq.n	800c0ac <_scanf_float+0x250>
 800c09e:	0550      	lsls	r0, r2, #21
 800c0a0:	f57f af0c 	bpl.w	800bebc <_scanf_float+0x60>
 800c0a4:	f1b9 0f00 	cmp.w	r9, #0
 800c0a8:	f43f af0f 	beq.w	800beca <_scanf_float+0x6e>
 800c0ac:	0591      	lsls	r1, r2, #22
 800c0ae:	bf58      	it	pl
 800c0b0:	9901      	ldrpl	r1, [sp, #4]
 800c0b2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c0b6:	bf58      	it	pl
 800c0b8:	eba9 0101 	subpl.w	r1, r9, r1
 800c0bc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c0c0:	bf58      	it	pl
 800c0c2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c0c6:	6022      	str	r2, [r4, #0]
 800c0c8:	f04f 0900 	mov.w	r9, #0
 800c0cc:	e78a      	b.n	800bfe4 <_scanf_float+0x188>
 800c0ce:	f04f 0a03 	mov.w	sl, #3
 800c0d2:	e787      	b.n	800bfe4 <_scanf_float+0x188>
 800c0d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c0d8:	4639      	mov	r1, r7
 800c0da:	4640      	mov	r0, r8
 800c0dc:	4798      	blx	r3
 800c0de:	2800      	cmp	r0, #0
 800c0e0:	f43f aedf 	beq.w	800bea2 <_scanf_float+0x46>
 800c0e4:	e6ea      	b.n	800bebc <_scanf_float+0x60>
 800c0e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c0ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c0ee:	463a      	mov	r2, r7
 800c0f0:	4640      	mov	r0, r8
 800c0f2:	4798      	blx	r3
 800c0f4:	6923      	ldr	r3, [r4, #16]
 800c0f6:	3b01      	subs	r3, #1
 800c0f8:	6123      	str	r3, [r4, #16]
 800c0fa:	e6ec      	b.n	800bed6 <_scanf_float+0x7a>
 800c0fc:	1e6b      	subs	r3, r5, #1
 800c0fe:	2b06      	cmp	r3, #6
 800c100:	d825      	bhi.n	800c14e <_scanf_float+0x2f2>
 800c102:	2d02      	cmp	r5, #2
 800c104:	d836      	bhi.n	800c174 <_scanf_float+0x318>
 800c106:	455e      	cmp	r6, fp
 800c108:	f67f aee8 	bls.w	800bedc <_scanf_float+0x80>
 800c10c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c110:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c114:	463a      	mov	r2, r7
 800c116:	4640      	mov	r0, r8
 800c118:	4798      	blx	r3
 800c11a:	6923      	ldr	r3, [r4, #16]
 800c11c:	3b01      	subs	r3, #1
 800c11e:	6123      	str	r3, [r4, #16]
 800c120:	e7f1      	b.n	800c106 <_scanf_float+0x2aa>
 800c122:	9802      	ldr	r0, [sp, #8]
 800c124:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c128:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c12c:	9002      	str	r0, [sp, #8]
 800c12e:	463a      	mov	r2, r7
 800c130:	4640      	mov	r0, r8
 800c132:	4798      	blx	r3
 800c134:	6923      	ldr	r3, [r4, #16]
 800c136:	3b01      	subs	r3, #1
 800c138:	6123      	str	r3, [r4, #16]
 800c13a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c13e:	fa5f fa8a 	uxtb.w	sl, sl
 800c142:	f1ba 0f02 	cmp.w	sl, #2
 800c146:	d1ec      	bne.n	800c122 <_scanf_float+0x2c6>
 800c148:	3d03      	subs	r5, #3
 800c14a:	b2ed      	uxtb	r5, r5
 800c14c:	1b76      	subs	r6, r6, r5
 800c14e:	6823      	ldr	r3, [r4, #0]
 800c150:	05da      	lsls	r2, r3, #23
 800c152:	d52f      	bpl.n	800c1b4 <_scanf_float+0x358>
 800c154:	055b      	lsls	r3, r3, #21
 800c156:	d510      	bpl.n	800c17a <_scanf_float+0x31e>
 800c158:	455e      	cmp	r6, fp
 800c15a:	f67f aebf 	bls.w	800bedc <_scanf_float+0x80>
 800c15e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c162:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c166:	463a      	mov	r2, r7
 800c168:	4640      	mov	r0, r8
 800c16a:	4798      	blx	r3
 800c16c:	6923      	ldr	r3, [r4, #16]
 800c16e:	3b01      	subs	r3, #1
 800c170:	6123      	str	r3, [r4, #16]
 800c172:	e7f1      	b.n	800c158 <_scanf_float+0x2fc>
 800c174:	46aa      	mov	sl, r5
 800c176:	9602      	str	r6, [sp, #8]
 800c178:	e7df      	b.n	800c13a <_scanf_float+0x2de>
 800c17a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c17e:	6923      	ldr	r3, [r4, #16]
 800c180:	2965      	cmp	r1, #101	; 0x65
 800c182:	f103 33ff 	add.w	r3, r3, #4294967295
 800c186:	f106 35ff 	add.w	r5, r6, #4294967295
 800c18a:	6123      	str	r3, [r4, #16]
 800c18c:	d00c      	beq.n	800c1a8 <_scanf_float+0x34c>
 800c18e:	2945      	cmp	r1, #69	; 0x45
 800c190:	d00a      	beq.n	800c1a8 <_scanf_float+0x34c>
 800c192:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c196:	463a      	mov	r2, r7
 800c198:	4640      	mov	r0, r8
 800c19a:	4798      	blx	r3
 800c19c:	6923      	ldr	r3, [r4, #16]
 800c19e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c1a2:	3b01      	subs	r3, #1
 800c1a4:	1eb5      	subs	r5, r6, #2
 800c1a6:	6123      	str	r3, [r4, #16]
 800c1a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c1ac:	463a      	mov	r2, r7
 800c1ae:	4640      	mov	r0, r8
 800c1b0:	4798      	blx	r3
 800c1b2:	462e      	mov	r6, r5
 800c1b4:	6825      	ldr	r5, [r4, #0]
 800c1b6:	f015 0510 	ands.w	r5, r5, #16
 800c1ba:	d159      	bne.n	800c270 <_scanf_float+0x414>
 800c1bc:	7035      	strb	r5, [r6, #0]
 800c1be:	6823      	ldr	r3, [r4, #0]
 800c1c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c1c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1c8:	d11b      	bne.n	800c202 <_scanf_float+0x3a6>
 800c1ca:	9b01      	ldr	r3, [sp, #4]
 800c1cc:	454b      	cmp	r3, r9
 800c1ce:	eba3 0209 	sub.w	r2, r3, r9
 800c1d2:	d123      	bne.n	800c21c <_scanf_float+0x3c0>
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	4659      	mov	r1, fp
 800c1d8:	4640      	mov	r0, r8
 800c1da:	f000 fea7 	bl	800cf2c <_strtod_r>
 800c1de:	6822      	ldr	r2, [r4, #0]
 800c1e0:	9b03      	ldr	r3, [sp, #12]
 800c1e2:	f012 0f02 	tst.w	r2, #2
 800c1e6:	ec57 6b10 	vmov	r6, r7, d0
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	d021      	beq.n	800c232 <_scanf_float+0x3d6>
 800c1ee:	9903      	ldr	r1, [sp, #12]
 800c1f0:	1d1a      	adds	r2, r3, #4
 800c1f2:	600a      	str	r2, [r1, #0]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	e9c3 6700 	strd	r6, r7, [r3]
 800c1fa:	68e3      	ldr	r3, [r4, #12]
 800c1fc:	3301      	adds	r3, #1
 800c1fe:	60e3      	str	r3, [r4, #12]
 800c200:	e66d      	b.n	800bede <_scanf_float+0x82>
 800c202:	9b04      	ldr	r3, [sp, #16]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d0e5      	beq.n	800c1d4 <_scanf_float+0x378>
 800c208:	9905      	ldr	r1, [sp, #20]
 800c20a:	230a      	movs	r3, #10
 800c20c:	462a      	mov	r2, r5
 800c20e:	3101      	adds	r1, #1
 800c210:	4640      	mov	r0, r8
 800c212:	f000 ff13 	bl	800d03c <_strtol_r>
 800c216:	9b04      	ldr	r3, [sp, #16]
 800c218:	9e05      	ldr	r6, [sp, #20]
 800c21a:	1ac2      	subs	r2, r0, r3
 800c21c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c220:	429e      	cmp	r6, r3
 800c222:	bf28      	it	cs
 800c224:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c228:	4912      	ldr	r1, [pc, #72]	; (800c274 <_scanf_float+0x418>)
 800c22a:	4630      	mov	r0, r6
 800c22c:	f000 f83c 	bl	800c2a8 <siprintf>
 800c230:	e7d0      	b.n	800c1d4 <_scanf_float+0x378>
 800c232:	9903      	ldr	r1, [sp, #12]
 800c234:	f012 0f04 	tst.w	r2, #4
 800c238:	f103 0204 	add.w	r2, r3, #4
 800c23c:	600a      	str	r2, [r1, #0]
 800c23e:	d1d9      	bne.n	800c1f4 <_scanf_float+0x398>
 800c240:	f8d3 8000 	ldr.w	r8, [r3]
 800c244:	ee10 2a10 	vmov	r2, s0
 800c248:	ee10 0a10 	vmov	r0, s0
 800c24c:	463b      	mov	r3, r7
 800c24e:	4639      	mov	r1, r7
 800c250:	f7f4 fc6c 	bl	8000b2c <__aeabi_dcmpun>
 800c254:	b128      	cbz	r0, 800c262 <_scanf_float+0x406>
 800c256:	4808      	ldr	r0, [pc, #32]	; (800c278 <_scanf_float+0x41c>)
 800c258:	f000 f820 	bl	800c29c <nanf>
 800c25c:	ed88 0a00 	vstr	s0, [r8]
 800c260:	e7cb      	b.n	800c1fa <_scanf_float+0x39e>
 800c262:	4630      	mov	r0, r6
 800c264:	4639      	mov	r1, r7
 800c266:	f7f4 fcbf 	bl	8000be8 <__aeabi_d2f>
 800c26a:	f8c8 0000 	str.w	r0, [r8]
 800c26e:	e7c4      	b.n	800c1fa <_scanf_float+0x39e>
 800c270:	2500      	movs	r5, #0
 800c272:	e634      	b.n	800bede <_scanf_float+0x82>
 800c274:	0800fd54 	.word	0x0800fd54
 800c278:	08010160 	.word	0x08010160

0800c27c <_sbrk_r>:
 800c27c:	b538      	push	{r3, r4, r5, lr}
 800c27e:	4d06      	ldr	r5, [pc, #24]	; (800c298 <_sbrk_r+0x1c>)
 800c280:	2300      	movs	r3, #0
 800c282:	4604      	mov	r4, r0
 800c284:	4608      	mov	r0, r1
 800c286:	602b      	str	r3, [r5, #0]
 800c288:	f7f6 f88e 	bl	80023a8 <_sbrk>
 800c28c:	1c43      	adds	r3, r0, #1
 800c28e:	d102      	bne.n	800c296 <_sbrk_r+0x1a>
 800c290:	682b      	ldr	r3, [r5, #0]
 800c292:	b103      	cbz	r3, 800c296 <_sbrk_r+0x1a>
 800c294:	6023      	str	r3, [r4, #0]
 800c296:	bd38      	pop	{r3, r4, r5, pc}
 800c298:	20000bc4 	.word	0x20000bc4

0800c29c <nanf>:
 800c29c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c2a4 <nanf+0x8>
 800c2a0:	4770      	bx	lr
 800c2a2:	bf00      	nop
 800c2a4:	7fc00000 	.word	0x7fc00000

0800c2a8 <siprintf>:
 800c2a8:	b40e      	push	{r1, r2, r3}
 800c2aa:	b500      	push	{lr}
 800c2ac:	b09c      	sub	sp, #112	; 0x70
 800c2ae:	ab1d      	add	r3, sp, #116	; 0x74
 800c2b0:	9002      	str	r0, [sp, #8]
 800c2b2:	9006      	str	r0, [sp, #24]
 800c2b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c2b8:	4809      	ldr	r0, [pc, #36]	; (800c2e0 <siprintf+0x38>)
 800c2ba:	9107      	str	r1, [sp, #28]
 800c2bc:	9104      	str	r1, [sp, #16]
 800c2be:	4909      	ldr	r1, [pc, #36]	; (800c2e4 <siprintf+0x3c>)
 800c2c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2c4:	9105      	str	r1, [sp, #20]
 800c2c6:	6800      	ldr	r0, [r0, #0]
 800c2c8:	9301      	str	r3, [sp, #4]
 800c2ca:	a902      	add	r1, sp, #8
 800c2cc:	f002 fe04 	bl	800eed8 <_svfiprintf_r>
 800c2d0:	9b02      	ldr	r3, [sp, #8]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	701a      	strb	r2, [r3, #0]
 800c2d6:	b01c      	add	sp, #112	; 0x70
 800c2d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2dc:	b003      	add	sp, #12
 800c2de:	4770      	bx	lr
 800c2e0:	2000002c 	.word	0x2000002c
 800c2e4:	ffff0208 	.word	0xffff0208

0800c2e8 <sulp>:
 800c2e8:	b570      	push	{r4, r5, r6, lr}
 800c2ea:	4604      	mov	r4, r0
 800c2ec:	460d      	mov	r5, r1
 800c2ee:	ec45 4b10 	vmov	d0, r4, r5
 800c2f2:	4616      	mov	r6, r2
 800c2f4:	f002 fc30 	bl	800eb58 <__ulp>
 800c2f8:	ec51 0b10 	vmov	r0, r1, d0
 800c2fc:	b17e      	cbz	r6, 800c31e <sulp+0x36>
 800c2fe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c302:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c306:	2b00      	cmp	r3, #0
 800c308:	dd09      	ble.n	800c31e <sulp+0x36>
 800c30a:	051b      	lsls	r3, r3, #20
 800c30c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c310:	2400      	movs	r4, #0
 800c312:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c316:	4622      	mov	r2, r4
 800c318:	462b      	mov	r3, r5
 800c31a:	f7f4 f96d 	bl	80005f8 <__aeabi_dmul>
 800c31e:	bd70      	pop	{r4, r5, r6, pc}

0800c320 <_strtod_l>:
 800c320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c324:	ed2d 8b02 	vpush	{d8}
 800c328:	b09d      	sub	sp, #116	; 0x74
 800c32a:	461f      	mov	r7, r3
 800c32c:	2300      	movs	r3, #0
 800c32e:	9318      	str	r3, [sp, #96]	; 0x60
 800c330:	4ba2      	ldr	r3, [pc, #648]	; (800c5bc <_strtod_l+0x29c>)
 800c332:	9213      	str	r2, [sp, #76]	; 0x4c
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	9305      	str	r3, [sp, #20]
 800c338:	4604      	mov	r4, r0
 800c33a:	4618      	mov	r0, r3
 800c33c:	4688      	mov	r8, r1
 800c33e:	f7f3 ff47 	bl	80001d0 <strlen>
 800c342:	f04f 0a00 	mov.w	sl, #0
 800c346:	4605      	mov	r5, r0
 800c348:	f04f 0b00 	mov.w	fp, #0
 800c34c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c350:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c352:	781a      	ldrb	r2, [r3, #0]
 800c354:	2a2b      	cmp	r2, #43	; 0x2b
 800c356:	d04e      	beq.n	800c3f6 <_strtod_l+0xd6>
 800c358:	d83b      	bhi.n	800c3d2 <_strtod_l+0xb2>
 800c35a:	2a0d      	cmp	r2, #13
 800c35c:	d834      	bhi.n	800c3c8 <_strtod_l+0xa8>
 800c35e:	2a08      	cmp	r2, #8
 800c360:	d834      	bhi.n	800c3cc <_strtod_l+0xac>
 800c362:	2a00      	cmp	r2, #0
 800c364:	d03e      	beq.n	800c3e4 <_strtod_l+0xc4>
 800c366:	2300      	movs	r3, #0
 800c368:	930a      	str	r3, [sp, #40]	; 0x28
 800c36a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c36c:	7833      	ldrb	r3, [r6, #0]
 800c36e:	2b30      	cmp	r3, #48	; 0x30
 800c370:	f040 80b0 	bne.w	800c4d4 <_strtod_l+0x1b4>
 800c374:	7873      	ldrb	r3, [r6, #1]
 800c376:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c37a:	2b58      	cmp	r3, #88	; 0x58
 800c37c:	d168      	bne.n	800c450 <_strtod_l+0x130>
 800c37e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c380:	9301      	str	r3, [sp, #4]
 800c382:	ab18      	add	r3, sp, #96	; 0x60
 800c384:	9702      	str	r7, [sp, #8]
 800c386:	9300      	str	r3, [sp, #0]
 800c388:	4a8d      	ldr	r2, [pc, #564]	; (800c5c0 <_strtod_l+0x2a0>)
 800c38a:	ab19      	add	r3, sp, #100	; 0x64
 800c38c:	a917      	add	r1, sp, #92	; 0x5c
 800c38e:	4620      	mov	r0, r4
 800c390:	f001 fd38 	bl	800de04 <__gethex>
 800c394:	f010 0707 	ands.w	r7, r0, #7
 800c398:	4605      	mov	r5, r0
 800c39a:	d005      	beq.n	800c3a8 <_strtod_l+0x88>
 800c39c:	2f06      	cmp	r7, #6
 800c39e:	d12c      	bne.n	800c3fa <_strtod_l+0xda>
 800c3a0:	3601      	adds	r6, #1
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	9617      	str	r6, [sp, #92]	; 0x5c
 800c3a6:	930a      	str	r3, [sp, #40]	; 0x28
 800c3a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	f040 8590 	bne.w	800ced0 <_strtod_l+0xbb0>
 800c3b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3b2:	b1eb      	cbz	r3, 800c3f0 <_strtod_l+0xd0>
 800c3b4:	4652      	mov	r2, sl
 800c3b6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c3ba:	ec43 2b10 	vmov	d0, r2, r3
 800c3be:	b01d      	add	sp, #116	; 0x74
 800c3c0:	ecbd 8b02 	vpop	{d8}
 800c3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3c8:	2a20      	cmp	r2, #32
 800c3ca:	d1cc      	bne.n	800c366 <_strtod_l+0x46>
 800c3cc:	3301      	adds	r3, #1
 800c3ce:	9317      	str	r3, [sp, #92]	; 0x5c
 800c3d0:	e7be      	b.n	800c350 <_strtod_l+0x30>
 800c3d2:	2a2d      	cmp	r2, #45	; 0x2d
 800c3d4:	d1c7      	bne.n	800c366 <_strtod_l+0x46>
 800c3d6:	2201      	movs	r2, #1
 800c3d8:	920a      	str	r2, [sp, #40]	; 0x28
 800c3da:	1c5a      	adds	r2, r3, #1
 800c3dc:	9217      	str	r2, [sp, #92]	; 0x5c
 800c3de:	785b      	ldrb	r3, [r3, #1]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d1c2      	bne.n	800c36a <_strtod_l+0x4a>
 800c3e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c3e6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	f040 856e 	bne.w	800cecc <_strtod_l+0xbac>
 800c3f0:	4652      	mov	r2, sl
 800c3f2:	465b      	mov	r3, fp
 800c3f4:	e7e1      	b.n	800c3ba <_strtod_l+0x9a>
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	e7ee      	b.n	800c3d8 <_strtod_l+0xb8>
 800c3fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c3fc:	b13a      	cbz	r2, 800c40e <_strtod_l+0xee>
 800c3fe:	2135      	movs	r1, #53	; 0x35
 800c400:	a81a      	add	r0, sp, #104	; 0x68
 800c402:	f002 fcb4 	bl	800ed6e <__copybits>
 800c406:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c408:	4620      	mov	r0, r4
 800c40a:	f002 f873 	bl	800e4f4 <_Bfree>
 800c40e:	3f01      	subs	r7, #1
 800c410:	2f04      	cmp	r7, #4
 800c412:	d806      	bhi.n	800c422 <_strtod_l+0x102>
 800c414:	e8df f007 	tbb	[pc, r7]
 800c418:	1714030a 	.word	0x1714030a
 800c41c:	0a          	.byte	0x0a
 800c41d:	00          	.byte	0x00
 800c41e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800c422:	0728      	lsls	r0, r5, #28
 800c424:	d5c0      	bpl.n	800c3a8 <_strtod_l+0x88>
 800c426:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c42a:	e7bd      	b.n	800c3a8 <_strtod_l+0x88>
 800c42c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800c430:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c432:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c436:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c43a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c43e:	e7f0      	b.n	800c422 <_strtod_l+0x102>
 800c440:	f8df b180 	ldr.w	fp, [pc, #384]	; 800c5c4 <_strtod_l+0x2a4>
 800c444:	e7ed      	b.n	800c422 <_strtod_l+0x102>
 800c446:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c44a:	f04f 3aff 	mov.w	sl, #4294967295
 800c44e:	e7e8      	b.n	800c422 <_strtod_l+0x102>
 800c450:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c452:	1c5a      	adds	r2, r3, #1
 800c454:	9217      	str	r2, [sp, #92]	; 0x5c
 800c456:	785b      	ldrb	r3, [r3, #1]
 800c458:	2b30      	cmp	r3, #48	; 0x30
 800c45a:	d0f9      	beq.n	800c450 <_strtod_l+0x130>
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d0a3      	beq.n	800c3a8 <_strtod_l+0x88>
 800c460:	2301      	movs	r3, #1
 800c462:	f04f 0900 	mov.w	r9, #0
 800c466:	9304      	str	r3, [sp, #16]
 800c468:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c46a:	9308      	str	r3, [sp, #32]
 800c46c:	f8cd 901c 	str.w	r9, [sp, #28]
 800c470:	464f      	mov	r7, r9
 800c472:	220a      	movs	r2, #10
 800c474:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c476:	7806      	ldrb	r6, [r0, #0]
 800c478:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c47c:	b2d9      	uxtb	r1, r3
 800c47e:	2909      	cmp	r1, #9
 800c480:	d92a      	bls.n	800c4d8 <_strtod_l+0x1b8>
 800c482:	9905      	ldr	r1, [sp, #20]
 800c484:	462a      	mov	r2, r5
 800c486:	f002 fe2f 	bl	800f0e8 <strncmp>
 800c48a:	b398      	cbz	r0, 800c4f4 <_strtod_l+0x1d4>
 800c48c:	2000      	movs	r0, #0
 800c48e:	4632      	mov	r2, r6
 800c490:	463d      	mov	r5, r7
 800c492:	9005      	str	r0, [sp, #20]
 800c494:	4603      	mov	r3, r0
 800c496:	2a65      	cmp	r2, #101	; 0x65
 800c498:	d001      	beq.n	800c49e <_strtod_l+0x17e>
 800c49a:	2a45      	cmp	r2, #69	; 0x45
 800c49c:	d118      	bne.n	800c4d0 <_strtod_l+0x1b0>
 800c49e:	b91d      	cbnz	r5, 800c4a8 <_strtod_l+0x188>
 800c4a0:	9a04      	ldr	r2, [sp, #16]
 800c4a2:	4302      	orrs	r2, r0
 800c4a4:	d09e      	beq.n	800c3e4 <_strtod_l+0xc4>
 800c4a6:	2500      	movs	r5, #0
 800c4a8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800c4ac:	f108 0201 	add.w	r2, r8, #1
 800c4b0:	9217      	str	r2, [sp, #92]	; 0x5c
 800c4b2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c4b6:	2a2b      	cmp	r2, #43	; 0x2b
 800c4b8:	d075      	beq.n	800c5a6 <_strtod_l+0x286>
 800c4ba:	2a2d      	cmp	r2, #45	; 0x2d
 800c4bc:	d07b      	beq.n	800c5b6 <_strtod_l+0x296>
 800c4be:	f04f 0c00 	mov.w	ip, #0
 800c4c2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c4c6:	2909      	cmp	r1, #9
 800c4c8:	f240 8082 	bls.w	800c5d0 <_strtod_l+0x2b0>
 800c4cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c4d0:	2600      	movs	r6, #0
 800c4d2:	e09d      	b.n	800c610 <_strtod_l+0x2f0>
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	e7c4      	b.n	800c462 <_strtod_l+0x142>
 800c4d8:	2f08      	cmp	r7, #8
 800c4da:	bfd8      	it	le
 800c4dc:	9907      	ldrle	r1, [sp, #28]
 800c4de:	f100 0001 	add.w	r0, r0, #1
 800c4e2:	bfda      	itte	le
 800c4e4:	fb02 3301 	mlale	r3, r2, r1, r3
 800c4e8:	9307      	strle	r3, [sp, #28]
 800c4ea:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c4ee:	3701      	adds	r7, #1
 800c4f0:	9017      	str	r0, [sp, #92]	; 0x5c
 800c4f2:	e7bf      	b.n	800c474 <_strtod_l+0x154>
 800c4f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c4f6:	195a      	adds	r2, r3, r5
 800c4f8:	9217      	str	r2, [sp, #92]	; 0x5c
 800c4fa:	5d5a      	ldrb	r2, [r3, r5]
 800c4fc:	2f00      	cmp	r7, #0
 800c4fe:	d037      	beq.n	800c570 <_strtod_l+0x250>
 800c500:	9005      	str	r0, [sp, #20]
 800c502:	463d      	mov	r5, r7
 800c504:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c508:	2b09      	cmp	r3, #9
 800c50a:	d912      	bls.n	800c532 <_strtod_l+0x212>
 800c50c:	2301      	movs	r3, #1
 800c50e:	e7c2      	b.n	800c496 <_strtod_l+0x176>
 800c510:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c512:	1c5a      	adds	r2, r3, #1
 800c514:	9217      	str	r2, [sp, #92]	; 0x5c
 800c516:	785a      	ldrb	r2, [r3, #1]
 800c518:	3001      	adds	r0, #1
 800c51a:	2a30      	cmp	r2, #48	; 0x30
 800c51c:	d0f8      	beq.n	800c510 <_strtod_l+0x1f0>
 800c51e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c522:	2b08      	cmp	r3, #8
 800c524:	f200 84d9 	bhi.w	800ceda <_strtod_l+0xbba>
 800c528:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c52a:	9005      	str	r0, [sp, #20]
 800c52c:	2000      	movs	r0, #0
 800c52e:	9308      	str	r3, [sp, #32]
 800c530:	4605      	mov	r5, r0
 800c532:	3a30      	subs	r2, #48	; 0x30
 800c534:	f100 0301 	add.w	r3, r0, #1
 800c538:	d014      	beq.n	800c564 <_strtod_l+0x244>
 800c53a:	9905      	ldr	r1, [sp, #20]
 800c53c:	4419      	add	r1, r3
 800c53e:	9105      	str	r1, [sp, #20]
 800c540:	462b      	mov	r3, r5
 800c542:	eb00 0e05 	add.w	lr, r0, r5
 800c546:	210a      	movs	r1, #10
 800c548:	4573      	cmp	r3, lr
 800c54a:	d113      	bne.n	800c574 <_strtod_l+0x254>
 800c54c:	182b      	adds	r3, r5, r0
 800c54e:	2b08      	cmp	r3, #8
 800c550:	f105 0501 	add.w	r5, r5, #1
 800c554:	4405      	add	r5, r0
 800c556:	dc1c      	bgt.n	800c592 <_strtod_l+0x272>
 800c558:	9907      	ldr	r1, [sp, #28]
 800c55a:	230a      	movs	r3, #10
 800c55c:	fb03 2301 	mla	r3, r3, r1, r2
 800c560:	9307      	str	r3, [sp, #28]
 800c562:	2300      	movs	r3, #0
 800c564:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c566:	1c51      	adds	r1, r2, #1
 800c568:	9117      	str	r1, [sp, #92]	; 0x5c
 800c56a:	7852      	ldrb	r2, [r2, #1]
 800c56c:	4618      	mov	r0, r3
 800c56e:	e7c9      	b.n	800c504 <_strtod_l+0x1e4>
 800c570:	4638      	mov	r0, r7
 800c572:	e7d2      	b.n	800c51a <_strtod_l+0x1fa>
 800c574:	2b08      	cmp	r3, #8
 800c576:	dc04      	bgt.n	800c582 <_strtod_l+0x262>
 800c578:	9e07      	ldr	r6, [sp, #28]
 800c57a:	434e      	muls	r6, r1
 800c57c:	9607      	str	r6, [sp, #28]
 800c57e:	3301      	adds	r3, #1
 800c580:	e7e2      	b.n	800c548 <_strtod_l+0x228>
 800c582:	f103 0c01 	add.w	ip, r3, #1
 800c586:	f1bc 0f10 	cmp.w	ip, #16
 800c58a:	bfd8      	it	le
 800c58c:	fb01 f909 	mulle.w	r9, r1, r9
 800c590:	e7f5      	b.n	800c57e <_strtod_l+0x25e>
 800c592:	2d10      	cmp	r5, #16
 800c594:	bfdc      	itt	le
 800c596:	230a      	movle	r3, #10
 800c598:	fb03 2909 	mlale	r9, r3, r9, r2
 800c59c:	e7e1      	b.n	800c562 <_strtod_l+0x242>
 800c59e:	2300      	movs	r3, #0
 800c5a0:	9305      	str	r3, [sp, #20]
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	e77c      	b.n	800c4a0 <_strtod_l+0x180>
 800c5a6:	f04f 0c00 	mov.w	ip, #0
 800c5aa:	f108 0202 	add.w	r2, r8, #2
 800c5ae:	9217      	str	r2, [sp, #92]	; 0x5c
 800c5b0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c5b4:	e785      	b.n	800c4c2 <_strtod_l+0x1a2>
 800c5b6:	f04f 0c01 	mov.w	ip, #1
 800c5ba:	e7f6      	b.n	800c5aa <_strtod_l+0x28a>
 800c5bc:	0800ffa8 	.word	0x0800ffa8
 800c5c0:	0800fd5c 	.word	0x0800fd5c
 800c5c4:	7ff00000 	.word	0x7ff00000
 800c5c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c5ca:	1c51      	adds	r1, r2, #1
 800c5cc:	9117      	str	r1, [sp, #92]	; 0x5c
 800c5ce:	7852      	ldrb	r2, [r2, #1]
 800c5d0:	2a30      	cmp	r2, #48	; 0x30
 800c5d2:	d0f9      	beq.n	800c5c8 <_strtod_l+0x2a8>
 800c5d4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c5d8:	2908      	cmp	r1, #8
 800c5da:	f63f af79 	bhi.w	800c4d0 <_strtod_l+0x1b0>
 800c5de:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c5e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c5e4:	9206      	str	r2, [sp, #24]
 800c5e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c5e8:	1c51      	adds	r1, r2, #1
 800c5ea:	9117      	str	r1, [sp, #92]	; 0x5c
 800c5ec:	7852      	ldrb	r2, [r2, #1]
 800c5ee:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c5f2:	2e09      	cmp	r6, #9
 800c5f4:	d937      	bls.n	800c666 <_strtod_l+0x346>
 800c5f6:	9e06      	ldr	r6, [sp, #24]
 800c5f8:	1b89      	subs	r1, r1, r6
 800c5fa:	2908      	cmp	r1, #8
 800c5fc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c600:	dc02      	bgt.n	800c608 <_strtod_l+0x2e8>
 800c602:	4576      	cmp	r6, lr
 800c604:	bfa8      	it	ge
 800c606:	4676      	movge	r6, lr
 800c608:	f1bc 0f00 	cmp.w	ip, #0
 800c60c:	d000      	beq.n	800c610 <_strtod_l+0x2f0>
 800c60e:	4276      	negs	r6, r6
 800c610:	2d00      	cmp	r5, #0
 800c612:	d14d      	bne.n	800c6b0 <_strtod_l+0x390>
 800c614:	9904      	ldr	r1, [sp, #16]
 800c616:	4301      	orrs	r1, r0
 800c618:	f47f aec6 	bne.w	800c3a8 <_strtod_l+0x88>
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	f47f aee1 	bne.w	800c3e4 <_strtod_l+0xc4>
 800c622:	2a69      	cmp	r2, #105	; 0x69
 800c624:	d027      	beq.n	800c676 <_strtod_l+0x356>
 800c626:	dc24      	bgt.n	800c672 <_strtod_l+0x352>
 800c628:	2a49      	cmp	r2, #73	; 0x49
 800c62a:	d024      	beq.n	800c676 <_strtod_l+0x356>
 800c62c:	2a4e      	cmp	r2, #78	; 0x4e
 800c62e:	f47f aed9 	bne.w	800c3e4 <_strtod_l+0xc4>
 800c632:	499f      	ldr	r1, [pc, #636]	; (800c8b0 <_strtod_l+0x590>)
 800c634:	a817      	add	r0, sp, #92	; 0x5c
 800c636:	f001 fe3d 	bl	800e2b4 <__match>
 800c63a:	2800      	cmp	r0, #0
 800c63c:	f43f aed2 	beq.w	800c3e4 <_strtod_l+0xc4>
 800c640:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c642:	781b      	ldrb	r3, [r3, #0]
 800c644:	2b28      	cmp	r3, #40	; 0x28
 800c646:	d12d      	bne.n	800c6a4 <_strtod_l+0x384>
 800c648:	499a      	ldr	r1, [pc, #616]	; (800c8b4 <_strtod_l+0x594>)
 800c64a:	aa1a      	add	r2, sp, #104	; 0x68
 800c64c:	a817      	add	r0, sp, #92	; 0x5c
 800c64e:	f001 fe45 	bl	800e2dc <__hexnan>
 800c652:	2805      	cmp	r0, #5
 800c654:	d126      	bne.n	800c6a4 <_strtod_l+0x384>
 800c656:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c658:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c65c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c660:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c664:	e6a0      	b.n	800c3a8 <_strtod_l+0x88>
 800c666:	210a      	movs	r1, #10
 800c668:	fb01 2e0e 	mla	lr, r1, lr, r2
 800c66c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c670:	e7b9      	b.n	800c5e6 <_strtod_l+0x2c6>
 800c672:	2a6e      	cmp	r2, #110	; 0x6e
 800c674:	e7db      	b.n	800c62e <_strtod_l+0x30e>
 800c676:	4990      	ldr	r1, [pc, #576]	; (800c8b8 <_strtod_l+0x598>)
 800c678:	a817      	add	r0, sp, #92	; 0x5c
 800c67a:	f001 fe1b 	bl	800e2b4 <__match>
 800c67e:	2800      	cmp	r0, #0
 800c680:	f43f aeb0 	beq.w	800c3e4 <_strtod_l+0xc4>
 800c684:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c686:	498d      	ldr	r1, [pc, #564]	; (800c8bc <_strtod_l+0x59c>)
 800c688:	3b01      	subs	r3, #1
 800c68a:	a817      	add	r0, sp, #92	; 0x5c
 800c68c:	9317      	str	r3, [sp, #92]	; 0x5c
 800c68e:	f001 fe11 	bl	800e2b4 <__match>
 800c692:	b910      	cbnz	r0, 800c69a <_strtod_l+0x37a>
 800c694:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c696:	3301      	adds	r3, #1
 800c698:	9317      	str	r3, [sp, #92]	; 0x5c
 800c69a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800c8cc <_strtod_l+0x5ac>
 800c69e:	f04f 0a00 	mov.w	sl, #0
 800c6a2:	e681      	b.n	800c3a8 <_strtod_l+0x88>
 800c6a4:	4886      	ldr	r0, [pc, #536]	; (800c8c0 <_strtod_l+0x5a0>)
 800c6a6:	f002 fd17 	bl	800f0d8 <nan>
 800c6aa:	ec5b ab10 	vmov	sl, fp, d0
 800c6ae:	e67b      	b.n	800c3a8 <_strtod_l+0x88>
 800c6b0:	9b05      	ldr	r3, [sp, #20]
 800c6b2:	9807      	ldr	r0, [sp, #28]
 800c6b4:	1af3      	subs	r3, r6, r3
 800c6b6:	2f00      	cmp	r7, #0
 800c6b8:	bf08      	it	eq
 800c6ba:	462f      	moveq	r7, r5
 800c6bc:	2d10      	cmp	r5, #16
 800c6be:	9306      	str	r3, [sp, #24]
 800c6c0:	46a8      	mov	r8, r5
 800c6c2:	bfa8      	it	ge
 800c6c4:	f04f 0810 	movge.w	r8, #16
 800c6c8:	f7f3 ff1c 	bl	8000504 <__aeabi_ui2d>
 800c6cc:	2d09      	cmp	r5, #9
 800c6ce:	4682      	mov	sl, r0
 800c6d0:	468b      	mov	fp, r1
 800c6d2:	dd13      	ble.n	800c6fc <_strtod_l+0x3dc>
 800c6d4:	4b7b      	ldr	r3, [pc, #492]	; (800c8c4 <_strtod_l+0x5a4>)
 800c6d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c6da:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c6de:	f7f3 ff8b 	bl	80005f8 <__aeabi_dmul>
 800c6e2:	4682      	mov	sl, r0
 800c6e4:	4648      	mov	r0, r9
 800c6e6:	468b      	mov	fp, r1
 800c6e8:	f7f3 ff0c 	bl	8000504 <__aeabi_ui2d>
 800c6ec:	4602      	mov	r2, r0
 800c6ee:	460b      	mov	r3, r1
 800c6f0:	4650      	mov	r0, sl
 800c6f2:	4659      	mov	r1, fp
 800c6f4:	f7f3 fdca 	bl	800028c <__adddf3>
 800c6f8:	4682      	mov	sl, r0
 800c6fa:	468b      	mov	fp, r1
 800c6fc:	2d0f      	cmp	r5, #15
 800c6fe:	dc38      	bgt.n	800c772 <_strtod_l+0x452>
 800c700:	9b06      	ldr	r3, [sp, #24]
 800c702:	2b00      	cmp	r3, #0
 800c704:	f43f ae50 	beq.w	800c3a8 <_strtod_l+0x88>
 800c708:	dd24      	ble.n	800c754 <_strtod_l+0x434>
 800c70a:	2b16      	cmp	r3, #22
 800c70c:	dc0b      	bgt.n	800c726 <_strtod_l+0x406>
 800c70e:	496d      	ldr	r1, [pc, #436]	; (800c8c4 <_strtod_l+0x5a4>)
 800c710:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c714:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c718:	4652      	mov	r2, sl
 800c71a:	465b      	mov	r3, fp
 800c71c:	f7f3 ff6c 	bl	80005f8 <__aeabi_dmul>
 800c720:	4682      	mov	sl, r0
 800c722:	468b      	mov	fp, r1
 800c724:	e640      	b.n	800c3a8 <_strtod_l+0x88>
 800c726:	9a06      	ldr	r2, [sp, #24]
 800c728:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c72c:	4293      	cmp	r3, r2
 800c72e:	db20      	blt.n	800c772 <_strtod_l+0x452>
 800c730:	4c64      	ldr	r4, [pc, #400]	; (800c8c4 <_strtod_l+0x5a4>)
 800c732:	f1c5 050f 	rsb	r5, r5, #15
 800c736:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c73a:	4652      	mov	r2, sl
 800c73c:	465b      	mov	r3, fp
 800c73e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c742:	f7f3 ff59 	bl	80005f8 <__aeabi_dmul>
 800c746:	9b06      	ldr	r3, [sp, #24]
 800c748:	1b5d      	subs	r5, r3, r5
 800c74a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c74e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c752:	e7e3      	b.n	800c71c <_strtod_l+0x3fc>
 800c754:	9b06      	ldr	r3, [sp, #24]
 800c756:	3316      	adds	r3, #22
 800c758:	db0b      	blt.n	800c772 <_strtod_l+0x452>
 800c75a:	9b05      	ldr	r3, [sp, #20]
 800c75c:	1b9e      	subs	r6, r3, r6
 800c75e:	4b59      	ldr	r3, [pc, #356]	; (800c8c4 <_strtod_l+0x5a4>)
 800c760:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c764:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c768:	4650      	mov	r0, sl
 800c76a:	4659      	mov	r1, fp
 800c76c:	f7f4 f86e 	bl	800084c <__aeabi_ddiv>
 800c770:	e7d6      	b.n	800c720 <_strtod_l+0x400>
 800c772:	9b06      	ldr	r3, [sp, #24]
 800c774:	eba5 0808 	sub.w	r8, r5, r8
 800c778:	4498      	add	r8, r3
 800c77a:	f1b8 0f00 	cmp.w	r8, #0
 800c77e:	dd74      	ble.n	800c86a <_strtod_l+0x54a>
 800c780:	f018 030f 	ands.w	r3, r8, #15
 800c784:	d00a      	beq.n	800c79c <_strtod_l+0x47c>
 800c786:	494f      	ldr	r1, [pc, #316]	; (800c8c4 <_strtod_l+0x5a4>)
 800c788:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c78c:	4652      	mov	r2, sl
 800c78e:	465b      	mov	r3, fp
 800c790:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c794:	f7f3 ff30 	bl	80005f8 <__aeabi_dmul>
 800c798:	4682      	mov	sl, r0
 800c79a:	468b      	mov	fp, r1
 800c79c:	f038 080f 	bics.w	r8, r8, #15
 800c7a0:	d04f      	beq.n	800c842 <_strtod_l+0x522>
 800c7a2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c7a6:	dd22      	ble.n	800c7ee <_strtod_l+0x4ce>
 800c7a8:	2500      	movs	r5, #0
 800c7aa:	462e      	mov	r6, r5
 800c7ac:	9507      	str	r5, [sp, #28]
 800c7ae:	9505      	str	r5, [sp, #20]
 800c7b0:	2322      	movs	r3, #34	; 0x22
 800c7b2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800c8cc <_strtod_l+0x5ac>
 800c7b6:	6023      	str	r3, [r4, #0]
 800c7b8:	f04f 0a00 	mov.w	sl, #0
 800c7bc:	9b07      	ldr	r3, [sp, #28]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	f43f adf2 	beq.w	800c3a8 <_strtod_l+0x88>
 800c7c4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c7c6:	4620      	mov	r0, r4
 800c7c8:	f001 fe94 	bl	800e4f4 <_Bfree>
 800c7cc:	9905      	ldr	r1, [sp, #20]
 800c7ce:	4620      	mov	r0, r4
 800c7d0:	f001 fe90 	bl	800e4f4 <_Bfree>
 800c7d4:	4631      	mov	r1, r6
 800c7d6:	4620      	mov	r0, r4
 800c7d8:	f001 fe8c 	bl	800e4f4 <_Bfree>
 800c7dc:	9907      	ldr	r1, [sp, #28]
 800c7de:	4620      	mov	r0, r4
 800c7e0:	f001 fe88 	bl	800e4f4 <_Bfree>
 800c7e4:	4629      	mov	r1, r5
 800c7e6:	4620      	mov	r0, r4
 800c7e8:	f001 fe84 	bl	800e4f4 <_Bfree>
 800c7ec:	e5dc      	b.n	800c3a8 <_strtod_l+0x88>
 800c7ee:	4b36      	ldr	r3, [pc, #216]	; (800c8c8 <_strtod_l+0x5a8>)
 800c7f0:	9304      	str	r3, [sp, #16]
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c7f8:	4650      	mov	r0, sl
 800c7fa:	4659      	mov	r1, fp
 800c7fc:	4699      	mov	r9, r3
 800c7fe:	f1b8 0f01 	cmp.w	r8, #1
 800c802:	dc21      	bgt.n	800c848 <_strtod_l+0x528>
 800c804:	b10b      	cbz	r3, 800c80a <_strtod_l+0x4ea>
 800c806:	4682      	mov	sl, r0
 800c808:	468b      	mov	fp, r1
 800c80a:	4b2f      	ldr	r3, [pc, #188]	; (800c8c8 <_strtod_l+0x5a8>)
 800c80c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c810:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c814:	4652      	mov	r2, sl
 800c816:	465b      	mov	r3, fp
 800c818:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c81c:	f7f3 feec 	bl	80005f8 <__aeabi_dmul>
 800c820:	4b2a      	ldr	r3, [pc, #168]	; (800c8cc <_strtod_l+0x5ac>)
 800c822:	460a      	mov	r2, r1
 800c824:	400b      	ands	r3, r1
 800c826:	492a      	ldr	r1, [pc, #168]	; (800c8d0 <_strtod_l+0x5b0>)
 800c828:	428b      	cmp	r3, r1
 800c82a:	4682      	mov	sl, r0
 800c82c:	d8bc      	bhi.n	800c7a8 <_strtod_l+0x488>
 800c82e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c832:	428b      	cmp	r3, r1
 800c834:	bf86      	itte	hi
 800c836:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800c8d4 <_strtod_l+0x5b4>
 800c83a:	f04f 3aff 	movhi.w	sl, #4294967295
 800c83e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c842:	2300      	movs	r3, #0
 800c844:	9304      	str	r3, [sp, #16]
 800c846:	e084      	b.n	800c952 <_strtod_l+0x632>
 800c848:	f018 0f01 	tst.w	r8, #1
 800c84c:	d005      	beq.n	800c85a <_strtod_l+0x53a>
 800c84e:	9b04      	ldr	r3, [sp, #16]
 800c850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c854:	f7f3 fed0 	bl	80005f8 <__aeabi_dmul>
 800c858:	2301      	movs	r3, #1
 800c85a:	9a04      	ldr	r2, [sp, #16]
 800c85c:	3208      	adds	r2, #8
 800c85e:	f109 0901 	add.w	r9, r9, #1
 800c862:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c866:	9204      	str	r2, [sp, #16]
 800c868:	e7c9      	b.n	800c7fe <_strtod_l+0x4de>
 800c86a:	d0ea      	beq.n	800c842 <_strtod_l+0x522>
 800c86c:	f1c8 0800 	rsb	r8, r8, #0
 800c870:	f018 020f 	ands.w	r2, r8, #15
 800c874:	d00a      	beq.n	800c88c <_strtod_l+0x56c>
 800c876:	4b13      	ldr	r3, [pc, #76]	; (800c8c4 <_strtod_l+0x5a4>)
 800c878:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c87c:	4650      	mov	r0, sl
 800c87e:	4659      	mov	r1, fp
 800c880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c884:	f7f3 ffe2 	bl	800084c <__aeabi_ddiv>
 800c888:	4682      	mov	sl, r0
 800c88a:	468b      	mov	fp, r1
 800c88c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c890:	d0d7      	beq.n	800c842 <_strtod_l+0x522>
 800c892:	f1b8 0f1f 	cmp.w	r8, #31
 800c896:	dd1f      	ble.n	800c8d8 <_strtod_l+0x5b8>
 800c898:	2500      	movs	r5, #0
 800c89a:	462e      	mov	r6, r5
 800c89c:	9507      	str	r5, [sp, #28]
 800c89e:	9505      	str	r5, [sp, #20]
 800c8a0:	2322      	movs	r3, #34	; 0x22
 800c8a2:	f04f 0a00 	mov.w	sl, #0
 800c8a6:	f04f 0b00 	mov.w	fp, #0
 800c8aa:	6023      	str	r3, [r4, #0]
 800c8ac:	e786      	b.n	800c7bc <_strtod_l+0x49c>
 800c8ae:	bf00      	nop
 800c8b0:	0800fd2d 	.word	0x0800fd2d
 800c8b4:	0800fd70 	.word	0x0800fd70
 800c8b8:	0800fd25 	.word	0x0800fd25
 800c8bc:	0800feb4 	.word	0x0800feb4
 800c8c0:	08010160 	.word	0x08010160
 800c8c4:	08010040 	.word	0x08010040
 800c8c8:	08010018 	.word	0x08010018
 800c8cc:	7ff00000 	.word	0x7ff00000
 800c8d0:	7ca00000 	.word	0x7ca00000
 800c8d4:	7fefffff 	.word	0x7fefffff
 800c8d8:	f018 0310 	ands.w	r3, r8, #16
 800c8dc:	bf18      	it	ne
 800c8de:	236a      	movne	r3, #106	; 0x6a
 800c8e0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800cc90 <_strtod_l+0x970>
 800c8e4:	9304      	str	r3, [sp, #16]
 800c8e6:	4650      	mov	r0, sl
 800c8e8:	4659      	mov	r1, fp
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	f018 0f01 	tst.w	r8, #1
 800c8f0:	d004      	beq.n	800c8fc <_strtod_l+0x5dc>
 800c8f2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c8f6:	f7f3 fe7f 	bl	80005f8 <__aeabi_dmul>
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c900:	f109 0908 	add.w	r9, r9, #8
 800c904:	d1f2      	bne.n	800c8ec <_strtod_l+0x5cc>
 800c906:	b10b      	cbz	r3, 800c90c <_strtod_l+0x5ec>
 800c908:	4682      	mov	sl, r0
 800c90a:	468b      	mov	fp, r1
 800c90c:	9b04      	ldr	r3, [sp, #16]
 800c90e:	b1c3      	cbz	r3, 800c942 <_strtod_l+0x622>
 800c910:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c914:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c918:	2b00      	cmp	r3, #0
 800c91a:	4659      	mov	r1, fp
 800c91c:	dd11      	ble.n	800c942 <_strtod_l+0x622>
 800c91e:	2b1f      	cmp	r3, #31
 800c920:	f340 8124 	ble.w	800cb6c <_strtod_l+0x84c>
 800c924:	2b34      	cmp	r3, #52	; 0x34
 800c926:	bfde      	ittt	le
 800c928:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c92c:	f04f 33ff 	movle.w	r3, #4294967295
 800c930:	fa03 f202 	lslle.w	r2, r3, r2
 800c934:	f04f 0a00 	mov.w	sl, #0
 800c938:	bfcc      	ite	gt
 800c93a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c93e:	ea02 0b01 	andle.w	fp, r2, r1
 800c942:	2200      	movs	r2, #0
 800c944:	2300      	movs	r3, #0
 800c946:	4650      	mov	r0, sl
 800c948:	4659      	mov	r1, fp
 800c94a:	f7f4 f8bd 	bl	8000ac8 <__aeabi_dcmpeq>
 800c94e:	2800      	cmp	r0, #0
 800c950:	d1a2      	bne.n	800c898 <_strtod_l+0x578>
 800c952:	9b07      	ldr	r3, [sp, #28]
 800c954:	9300      	str	r3, [sp, #0]
 800c956:	9908      	ldr	r1, [sp, #32]
 800c958:	462b      	mov	r3, r5
 800c95a:	463a      	mov	r2, r7
 800c95c:	4620      	mov	r0, r4
 800c95e:	f001 fe31 	bl	800e5c4 <__s2b>
 800c962:	9007      	str	r0, [sp, #28]
 800c964:	2800      	cmp	r0, #0
 800c966:	f43f af1f 	beq.w	800c7a8 <_strtod_l+0x488>
 800c96a:	9b05      	ldr	r3, [sp, #20]
 800c96c:	1b9e      	subs	r6, r3, r6
 800c96e:	9b06      	ldr	r3, [sp, #24]
 800c970:	2b00      	cmp	r3, #0
 800c972:	bfb4      	ite	lt
 800c974:	4633      	movlt	r3, r6
 800c976:	2300      	movge	r3, #0
 800c978:	930c      	str	r3, [sp, #48]	; 0x30
 800c97a:	9b06      	ldr	r3, [sp, #24]
 800c97c:	2500      	movs	r5, #0
 800c97e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c982:	9312      	str	r3, [sp, #72]	; 0x48
 800c984:	462e      	mov	r6, r5
 800c986:	9b07      	ldr	r3, [sp, #28]
 800c988:	4620      	mov	r0, r4
 800c98a:	6859      	ldr	r1, [r3, #4]
 800c98c:	f001 fd72 	bl	800e474 <_Balloc>
 800c990:	9005      	str	r0, [sp, #20]
 800c992:	2800      	cmp	r0, #0
 800c994:	f43f af0c 	beq.w	800c7b0 <_strtod_l+0x490>
 800c998:	9b07      	ldr	r3, [sp, #28]
 800c99a:	691a      	ldr	r2, [r3, #16]
 800c99c:	3202      	adds	r2, #2
 800c99e:	f103 010c 	add.w	r1, r3, #12
 800c9a2:	0092      	lsls	r2, r2, #2
 800c9a4:	300c      	adds	r0, #12
 800c9a6:	f001 fd4b 	bl	800e440 <memcpy>
 800c9aa:	ec4b ab10 	vmov	d0, sl, fp
 800c9ae:	aa1a      	add	r2, sp, #104	; 0x68
 800c9b0:	a919      	add	r1, sp, #100	; 0x64
 800c9b2:	4620      	mov	r0, r4
 800c9b4:	f002 f94c 	bl	800ec50 <__d2b>
 800c9b8:	ec4b ab18 	vmov	d8, sl, fp
 800c9bc:	9018      	str	r0, [sp, #96]	; 0x60
 800c9be:	2800      	cmp	r0, #0
 800c9c0:	f43f aef6 	beq.w	800c7b0 <_strtod_l+0x490>
 800c9c4:	2101      	movs	r1, #1
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	f001 fe96 	bl	800e6f8 <__i2b>
 800c9cc:	4606      	mov	r6, r0
 800c9ce:	2800      	cmp	r0, #0
 800c9d0:	f43f aeee 	beq.w	800c7b0 <_strtod_l+0x490>
 800c9d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c9d6:	9904      	ldr	r1, [sp, #16]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	bfab      	itete	ge
 800c9dc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800c9de:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800c9e0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c9e2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800c9e6:	bfac      	ite	ge
 800c9e8:	eb03 0902 	addge.w	r9, r3, r2
 800c9ec:	1ad7      	sublt	r7, r2, r3
 800c9ee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c9f0:	eba3 0801 	sub.w	r8, r3, r1
 800c9f4:	4490      	add	r8, r2
 800c9f6:	4ba1      	ldr	r3, [pc, #644]	; (800cc7c <_strtod_l+0x95c>)
 800c9f8:	f108 38ff 	add.w	r8, r8, #4294967295
 800c9fc:	4598      	cmp	r8, r3
 800c9fe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ca02:	f280 80c7 	bge.w	800cb94 <_strtod_l+0x874>
 800ca06:	eba3 0308 	sub.w	r3, r3, r8
 800ca0a:	2b1f      	cmp	r3, #31
 800ca0c:	eba2 0203 	sub.w	r2, r2, r3
 800ca10:	f04f 0101 	mov.w	r1, #1
 800ca14:	f300 80b1 	bgt.w	800cb7a <_strtod_l+0x85a>
 800ca18:	fa01 f303 	lsl.w	r3, r1, r3
 800ca1c:	930d      	str	r3, [sp, #52]	; 0x34
 800ca1e:	2300      	movs	r3, #0
 800ca20:	9308      	str	r3, [sp, #32]
 800ca22:	eb09 0802 	add.w	r8, r9, r2
 800ca26:	9b04      	ldr	r3, [sp, #16]
 800ca28:	45c1      	cmp	r9, r8
 800ca2a:	4417      	add	r7, r2
 800ca2c:	441f      	add	r7, r3
 800ca2e:	464b      	mov	r3, r9
 800ca30:	bfa8      	it	ge
 800ca32:	4643      	movge	r3, r8
 800ca34:	42bb      	cmp	r3, r7
 800ca36:	bfa8      	it	ge
 800ca38:	463b      	movge	r3, r7
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	bfc2      	ittt	gt
 800ca3e:	eba8 0803 	subgt.w	r8, r8, r3
 800ca42:	1aff      	subgt	r7, r7, r3
 800ca44:	eba9 0903 	subgt.w	r9, r9, r3
 800ca48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	dd17      	ble.n	800ca7e <_strtod_l+0x75e>
 800ca4e:	4631      	mov	r1, r6
 800ca50:	461a      	mov	r2, r3
 800ca52:	4620      	mov	r0, r4
 800ca54:	f001 ff10 	bl	800e878 <__pow5mult>
 800ca58:	4606      	mov	r6, r0
 800ca5a:	2800      	cmp	r0, #0
 800ca5c:	f43f aea8 	beq.w	800c7b0 <_strtod_l+0x490>
 800ca60:	4601      	mov	r1, r0
 800ca62:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ca64:	4620      	mov	r0, r4
 800ca66:	f001 fe5d 	bl	800e724 <__multiply>
 800ca6a:	900b      	str	r0, [sp, #44]	; 0x2c
 800ca6c:	2800      	cmp	r0, #0
 800ca6e:	f43f ae9f 	beq.w	800c7b0 <_strtod_l+0x490>
 800ca72:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ca74:	4620      	mov	r0, r4
 800ca76:	f001 fd3d 	bl	800e4f4 <_Bfree>
 800ca7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca7c:	9318      	str	r3, [sp, #96]	; 0x60
 800ca7e:	f1b8 0f00 	cmp.w	r8, #0
 800ca82:	f300 808c 	bgt.w	800cb9e <_strtod_l+0x87e>
 800ca86:	9b06      	ldr	r3, [sp, #24]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	dd08      	ble.n	800ca9e <_strtod_l+0x77e>
 800ca8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ca8e:	9905      	ldr	r1, [sp, #20]
 800ca90:	4620      	mov	r0, r4
 800ca92:	f001 fef1 	bl	800e878 <__pow5mult>
 800ca96:	9005      	str	r0, [sp, #20]
 800ca98:	2800      	cmp	r0, #0
 800ca9a:	f43f ae89 	beq.w	800c7b0 <_strtod_l+0x490>
 800ca9e:	2f00      	cmp	r7, #0
 800caa0:	dd08      	ble.n	800cab4 <_strtod_l+0x794>
 800caa2:	9905      	ldr	r1, [sp, #20]
 800caa4:	463a      	mov	r2, r7
 800caa6:	4620      	mov	r0, r4
 800caa8:	f001 ff40 	bl	800e92c <__lshift>
 800caac:	9005      	str	r0, [sp, #20]
 800caae:	2800      	cmp	r0, #0
 800cab0:	f43f ae7e 	beq.w	800c7b0 <_strtod_l+0x490>
 800cab4:	f1b9 0f00 	cmp.w	r9, #0
 800cab8:	dd08      	ble.n	800cacc <_strtod_l+0x7ac>
 800caba:	4631      	mov	r1, r6
 800cabc:	464a      	mov	r2, r9
 800cabe:	4620      	mov	r0, r4
 800cac0:	f001 ff34 	bl	800e92c <__lshift>
 800cac4:	4606      	mov	r6, r0
 800cac6:	2800      	cmp	r0, #0
 800cac8:	f43f ae72 	beq.w	800c7b0 <_strtod_l+0x490>
 800cacc:	9a05      	ldr	r2, [sp, #20]
 800cace:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cad0:	4620      	mov	r0, r4
 800cad2:	f001 ffb7 	bl	800ea44 <__mdiff>
 800cad6:	4605      	mov	r5, r0
 800cad8:	2800      	cmp	r0, #0
 800cada:	f43f ae69 	beq.w	800c7b0 <_strtod_l+0x490>
 800cade:	68c3      	ldr	r3, [r0, #12]
 800cae0:	930b      	str	r3, [sp, #44]	; 0x2c
 800cae2:	2300      	movs	r3, #0
 800cae4:	60c3      	str	r3, [r0, #12]
 800cae6:	4631      	mov	r1, r6
 800cae8:	f001 ff90 	bl	800ea0c <__mcmp>
 800caec:	2800      	cmp	r0, #0
 800caee:	da60      	bge.n	800cbb2 <_strtod_l+0x892>
 800caf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800caf2:	ea53 030a 	orrs.w	r3, r3, sl
 800caf6:	f040 8082 	bne.w	800cbfe <_strtod_l+0x8de>
 800cafa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d17d      	bne.n	800cbfe <_strtod_l+0x8de>
 800cb02:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cb06:	0d1b      	lsrs	r3, r3, #20
 800cb08:	051b      	lsls	r3, r3, #20
 800cb0a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800cb0e:	d976      	bls.n	800cbfe <_strtod_l+0x8de>
 800cb10:	696b      	ldr	r3, [r5, #20]
 800cb12:	b913      	cbnz	r3, 800cb1a <_strtod_l+0x7fa>
 800cb14:	692b      	ldr	r3, [r5, #16]
 800cb16:	2b01      	cmp	r3, #1
 800cb18:	dd71      	ble.n	800cbfe <_strtod_l+0x8de>
 800cb1a:	4629      	mov	r1, r5
 800cb1c:	2201      	movs	r2, #1
 800cb1e:	4620      	mov	r0, r4
 800cb20:	f001 ff04 	bl	800e92c <__lshift>
 800cb24:	4631      	mov	r1, r6
 800cb26:	4605      	mov	r5, r0
 800cb28:	f001 ff70 	bl	800ea0c <__mcmp>
 800cb2c:	2800      	cmp	r0, #0
 800cb2e:	dd66      	ble.n	800cbfe <_strtod_l+0x8de>
 800cb30:	9904      	ldr	r1, [sp, #16]
 800cb32:	4a53      	ldr	r2, [pc, #332]	; (800cc80 <_strtod_l+0x960>)
 800cb34:	465b      	mov	r3, fp
 800cb36:	2900      	cmp	r1, #0
 800cb38:	f000 8081 	beq.w	800cc3e <_strtod_l+0x91e>
 800cb3c:	ea02 010b 	and.w	r1, r2, fp
 800cb40:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800cb44:	dc7b      	bgt.n	800cc3e <_strtod_l+0x91e>
 800cb46:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800cb4a:	f77f aea9 	ble.w	800c8a0 <_strtod_l+0x580>
 800cb4e:	4b4d      	ldr	r3, [pc, #308]	; (800cc84 <_strtod_l+0x964>)
 800cb50:	4650      	mov	r0, sl
 800cb52:	4659      	mov	r1, fp
 800cb54:	2200      	movs	r2, #0
 800cb56:	f7f3 fd4f 	bl	80005f8 <__aeabi_dmul>
 800cb5a:	460b      	mov	r3, r1
 800cb5c:	4303      	orrs	r3, r0
 800cb5e:	bf08      	it	eq
 800cb60:	2322      	moveq	r3, #34	; 0x22
 800cb62:	4682      	mov	sl, r0
 800cb64:	468b      	mov	fp, r1
 800cb66:	bf08      	it	eq
 800cb68:	6023      	streq	r3, [r4, #0]
 800cb6a:	e62b      	b.n	800c7c4 <_strtod_l+0x4a4>
 800cb6c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb70:	fa02 f303 	lsl.w	r3, r2, r3
 800cb74:	ea03 0a0a 	and.w	sl, r3, sl
 800cb78:	e6e3      	b.n	800c942 <_strtod_l+0x622>
 800cb7a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800cb7e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800cb82:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800cb86:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800cb8a:	fa01 f308 	lsl.w	r3, r1, r8
 800cb8e:	9308      	str	r3, [sp, #32]
 800cb90:	910d      	str	r1, [sp, #52]	; 0x34
 800cb92:	e746      	b.n	800ca22 <_strtod_l+0x702>
 800cb94:	2300      	movs	r3, #0
 800cb96:	9308      	str	r3, [sp, #32]
 800cb98:	2301      	movs	r3, #1
 800cb9a:	930d      	str	r3, [sp, #52]	; 0x34
 800cb9c:	e741      	b.n	800ca22 <_strtod_l+0x702>
 800cb9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cba0:	4642      	mov	r2, r8
 800cba2:	4620      	mov	r0, r4
 800cba4:	f001 fec2 	bl	800e92c <__lshift>
 800cba8:	9018      	str	r0, [sp, #96]	; 0x60
 800cbaa:	2800      	cmp	r0, #0
 800cbac:	f47f af6b 	bne.w	800ca86 <_strtod_l+0x766>
 800cbb0:	e5fe      	b.n	800c7b0 <_strtod_l+0x490>
 800cbb2:	465f      	mov	r7, fp
 800cbb4:	d16e      	bne.n	800cc94 <_strtod_l+0x974>
 800cbb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cbb8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cbbc:	b342      	cbz	r2, 800cc10 <_strtod_l+0x8f0>
 800cbbe:	4a32      	ldr	r2, [pc, #200]	; (800cc88 <_strtod_l+0x968>)
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	d128      	bne.n	800cc16 <_strtod_l+0x8f6>
 800cbc4:	9b04      	ldr	r3, [sp, #16]
 800cbc6:	4651      	mov	r1, sl
 800cbc8:	b1eb      	cbz	r3, 800cc06 <_strtod_l+0x8e6>
 800cbca:	4b2d      	ldr	r3, [pc, #180]	; (800cc80 <_strtod_l+0x960>)
 800cbcc:	403b      	ands	r3, r7
 800cbce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cbd2:	f04f 32ff 	mov.w	r2, #4294967295
 800cbd6:	d819      	bhi.n	800cc0c <_strtod_l+0x8ec>
 800cbd8:	0d1b      	lsrs	r3, r3, #20
 800cbda:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cbde:	fa02 f303 	lsl.w	r3, r2, r3
 800cbe2:	4299      	cmp	r1, r3
 800cbe4:	d117      	bne.n	800cc16 <_strtod_l+0x8f6>
 800cbe6:	4b29      	ldr	r3, [pc, #164]	; (800cc8c <_strtod_l+0x96c>)
 800cbe8:	429f      	cmp	r7, r3
 800cbea:	d102      	bne.n	800cbf2 <_strtod_l+0x8d2>
 800cbec:	3101      	adds	r1, #1
 800cbee:	f43f addf 	beq.w	800c7b0 <_strtod_l+0x490>
 800cbf2:	4b23      	ldr	r3, [pc, #140]	; (800cc80 <_strtod_l+0x960>)
 800cbf4:	403b      	ands	r3, r7
 800cbf6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800cbfa:	f04f 0a00 	mov.w	sl, #0
 800cbfe:	9b04      	ldr	r3, [sp, #16]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d1a4      	bne.n	800cb4e <_strtod_l+0x82e>
 800cc04:	e5de      	b.n	800c7c4 <_strtod_l+0x4a4>
 800cc06:	f04f 33ff 	mov.w	r3, #4294967295
 800cc0a:	e7ea      	b.n	800cbe2 <_strtod_l+0x8c2>
 800cc0c:	4613      	mov	r3, r2
 800cc0e:	e7e8      	b.n	800cbe2 <_strtod_l+0x8c2>
 800cc10:	ea53 030a 	orrs.w	r3, r3, sl
 800cc14:	d08c      	beq.n	800cb30 <_strtod_l+0x810>
 800cc16:	9b08      	ldr	r3, [sp, #32]
 800cc18:	b1db      	cbz	r3, 800cc52 <_strtod_l+0x932>
 800cc1a:	423b      	tst	r3, r7
 800cc1c:	d0ef      	beq.n	800cbfe <_strtod_l+0x8de>
 800cc1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc20:	9a04      	ldr	r2, [sp, #16]
 800cc22:	4650      	mov	r0, sl
 800cc24:	4659      	mov	r1, fp
 800cc26:	b1c3      	cbz	r3, 800cc5a <_strtod_l+0x93a>
 800cc28:	f7ff fb5e 	bl	800c2e8 <sulp>
 800cc2c:	4602      	mov	r2, r0
 800cc2e:	460b      	mov	r3, r1
 800cc30:	ec51 0b18 	vmov	r0, r1, d8
 800cc34:	f7f3 fb2a 	bl	800028c <__adddf3>
 800cc38:	4682      	mov	sl, r0
 800cc3a:	468b      	mov	fp, r1
 800cc3c:	e7df      	b.n	800cbfe <_strtod_l+0x8de>
 800cc3e:	4013      	ands	r3, r2
 800cc40:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cc44:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cc48:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cc4c:	f04f 3aff 	mov.w	sl, #4294967295
 800cc50:	e7d5      	b.n	800cbfe <_strtod_l+0x8de>
 800cc52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc54:	ea13 0f0a 	tst.w	r3, sl
 800cc58:	e7e0      	b.n	800cc1c <_strtod_l+0x8fc>
 800cc5a:	f7ff fb45 	bl	800c2e8 <sulp>
 800cc5e:	4602      	mov	r2, r0
 800cc60:	460b      	mov	r3, r1
 800cc62:	ec51 0b18 	vmov	r0, r1, d8
 800cc66:	f7f3 fb0f 	bl	8000288 <__aeabi_dsub>
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	4682      	mov	sl, r0
 800cc70:	468b      	mov	fp, r1
 800cc72:	f7f3 ff29 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc76:	2800      	cmp	r0, #0
 800cc78:	d0c1      	beq.n	800cbfe <_strtod_l+0x8de>
 800cc7a:	e611      	b.n	800c8a0 <_strtod_l+0x580>
 800cc7c:	fffffc02 	.word	0xfffffc02
 800cc80:	7ff00000 	.word	0x7ff00000
 800cc84:	39500000 	.word	0x39500000
 800cc88:	000fffff 	.word	0x000fffff
 800cc8c:	7fefffff 	.word	0x7fefffff
 800cc90:	0800fd88 	.word	0x0800fd88
 800cc94:	4631      	mov	r1, r6
 800cc96:	4628      	mov	r0, r5
 800cc98:	f002 f836 	bl	800ed08 <__ratio>
 800cc9c:	ec59 8b10 	vmov	r8, r9, d0
 800cca0:	ee10 0a10 	vmov	r0, s0
 800cca4:	2200      	movs	r2, #0
 800cca6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ccaa:	4649      	mov	r1, r9
 800ccac:	f7f3 ff20 	bl	8000af0 <__aeabi_dcmple>
 800ccb0:	2800      	cmp	r0, #0
 800ccb2:	d07a      	beq.n	800cdaa <_strtod_l+0xa8a>
 800ccb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d04a      	beq.n	800cd50 <_strtod_l+0xa30>
 800ccba:	4b95      	ldr	r3, [pc, #596]	; (800cf10 <_strtod_l+0xbf0>)
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ccc2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800cf10 <_strtod_l+0xbf0>
 800ccc6:	f04f 0800 	mov.w	r8, #0
 800ccca:	4b92      	ldr	r3, [pc, #584]	; (800cf14 <_strtod_l+0xbf4>)
 800cccc:	403b      	ands	r3, r7
 800ccce:	930d      	str	r3, [sp, #52]	; 0x34
 800ccd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ccd2:	4b91      	ldr	r3, [pc, #580]	; (800cf18 <_strtod_l+0xbf8>)
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	f040 80b0 	bne.w	800ce3a <_strtod_l+0xb1a>
 800ccda:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ccde:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800cce2:	ec4b ab10 	vmov	d0, sl, fp
 800cce6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ccea:	f001 ff35 	bl	800eb58 <__ulp>
 800ccee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ccf2:	ec53 2b10 	vmov	r2, r3, d0
 800ccf6:	f7f3 fc7f 	bl	80005f8 <__aeabi_dmul>
 800ccfa:	4652      	mov	r2, sl
 800ccfc:	465b      	mov	r3, fp
 800ccfe:	f7f3 fac5 	bl	800028c <__adddf3>
 800cd02:	460b      	mov	r3, r1
 800cd04:	4983      	ldr	r1, [pc, #524]	; (800cf14 <_strtod_l+0xbf4>)
 800cd06:	4a85      	ldr	r2, [pc, #532]	; (800cf1c <_strtod_l+0xbfc>)
 800cd08:	4019      	ands	r1, r3
 800cd0a:	4291      	cmp	r1, r2
 800cd0c:	4682      	mov	sl, r0
 800cd0e:	d960      	bls.n	800cdd2 <_strtod_l+0xab2>
 800cd10:	ee18 3a90 	vmov	r3, s17
 800cd14:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800cd18:	4293      	cmp	r3, r2
 800cd1a:	d104      	bne.n	800cd26 <_strtod_l+0xa06>
 800cd1c:	ee18 3a10 	vmov	r3, s16
 800cd20:	3301      	adds	r3, #1
 800cd22:	f43f ad45 	beq.w	800c7b0 <_strtod_l+0x490>
 800cd26:	f8df b200 	ldr.w	fp, [pc, #512]	; 800cf28 <_strtod_l+0xc08>
 800cd2a:	f04f 3aff 	mov.w	sl, #4294967295
 800cd2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cd30:	4620      	mov	r0, r4
 800cd32:	f001 fbdf 	bl	800e4f4 <_Bfree>
 800cd36:	9905      	ldr	r1, [sp, #20]
 800cd38:	4620      	mov	r0, r4
 800cd3a:	f001 fbdb 	bl	800e4f4 <_Bfree>
 800cd3e:	4631      	mov	r1, r6
 800cd40:	4620      	mov	r0, r4
 800cd42:	f001 fbd7 	bl	800e4f4 <_Bfree>
 800cd46:	4629      	mov	r1, r5
 800cd48:	4620      	mov	r0, r4
 800cd4a:	f001 fbd3 	bl	800e4f4 <_Bfree>
 800cd4e:	e61a      	b.n	800c986 <_strtod_l+0x666>
 800cd50:	f1ba 0f00 	cmp.w	sl, #0
 800cd54:	d11b      	bne.n	800cd8e <_strtod_l+0xa6e>
 800cd56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cd5a:	b9f3      	cbnz	r3, 800cd9a <_strtod_l+0xa7a>
 800cd5c:	4b6c      	ldr	r3, [pc, #432]	; (800cf10 <_strtod_l+0xbf0>)
 800cd5e:	2200      	movs	r2, #0
 800cd60:	4640      	mov	r0, r8
 800cd62:	4649      	mov	r1, r9
 800cd64:	f7f3 feba 	bl	8000adc <__aeabi_dcmplt>
 800cd68:	b9d0      	cbnz	r0, 800cda0 <_strtod_l+0xa80>
 800cd6a:	4640      	mov	r0, r8
 800cd6c:	4649      	mov	r1, r9
 800cd6e:	4b6c      	ldr	r3, [pc, #432]	; (800cf20 <_strtod_l+0xc00>)
 800cd70:	2200      	movs	r2, #0
 800cd72:	f7f3 fc41 	bl	80005f8 <__aeabi_dmul>
 800cd76:	4680      	mov	r8, r0
 800cd78:	4689      	mov	r9, r1
 800cd7a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cd7e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800cd82:	9315      	str	r3, [sp, #84]	; 0x54
 800cd84:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800cd88:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cd8c:	e79d      	b.n	800ccca <_strtod_l+0x9aa>
 800cd8e:	f1ba 0f01 	cmp.w	sl, #1
 800cd92:	d102      	bne.n	800cd9a <_strtod_l+0xa7a>
 800cd94:	2f00      	cmp	r7, #0
 800cd96:	f43f ad83 	beq.w	800c8a0 <_strtod_l+0x580>
 800cd9a:	4b62      	ldr	r3, [pc, #392]	; (800cf24 <_strtod_l+0xc04>)
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	e78e      	b.n	800ccbe <_strtod_l+0x99e>
 800cda0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800cf20 <_strtod_l+0xc00>
 800cda4:	f04f 0800 	mov.w	r8, #0
 800cda8:	e7e7      	b.n	800cd7a <_strtod_l+0xa5a>
 800cdaa:	4b5d      	ldr	r3, [pc, #372]	; (800cf20 <_strtod_l+0xc00>)
 800cdac:	4640      	mov	r0, r8
 800cdae:	4649      	mov	r1, r9
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	f7f3 fc21 	bl	80005f8 <__aeabi_dmul>
 800cdb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdb8:	4680      	mov	r8, r0
 800cdba:	4689      	mov	r9, r1
 800cdbc:	b933      	cbnz	r3, 800cdcc <_strtod_l+0xaac>
 800cdbe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cdc2:	900e      	str	r0, [sp, #56]	; 0x38
 800cdc4:	930f      	str	r3, [sp, #60]	; 0x3c
 800cdc6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800cdca:	e7dd      	b.n	800cd88 <_strtod_l+0xa68>
 800cdcc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800cdd0:	e7f9      	b.n	800cdc6 <_strtod_l+0xaa6>
 800cdd2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800cdd6:	9b04      	ldr	r3, [sp, #16]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d1a8      	bne.n	800cd2e <_strtod_l+0xa0e>
 800cddc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cde0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cde2:	0d1b      	lsrs	r3, r3, #20
 800cde4:	051b      	lsls	r3, r3, #20
 800cde6:	429a      	cmp	r2, r3
 800cde8:	d1a1      	bne.n	800cd2e <_strtod_l+0xa0e>
 800cdea:	4640      	mov	r0, r8
 800cdec:	4649      	mov	r1, r9
 800cdee:	f7f3 ff63 	bl	8000cb8 <__aeabi_d2lz>
 800cdf2:	f7f3 fbd3 	bl	800059c <__aeabi_l2d>
 800cdf6:	4602      	mov	r2, r0
 800cdf8:	460b      	mov	r3, r1
 800cdfa:	4640      	mov	r0, r8
 800cdfc:	4649      	mov	r1, r9
 800cdfe:	f7f3 fa43 	bl	8000288 <__aeabi_dsub>
 800ce02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ce04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ce08:	ea43 030a 	orr.w	r3, r3, sl
 800ce0c:	4313      	orrs	r3, r2
 800ce0e:	4680      	mov	r8, r0
 800ce10:	4689      	mov	r9, r1
 800ce12:	d055      	beq.n	800cec0 <_strtod_l+0xba0>
 800ce14:	a336      	add	r3, pc, #216	; (adr r3, 800cef0 <_strtod_l+0xbd0>)
 800ce16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce1a:	f7f3 fe5f 	bl	8000adc <__aeabi_dcmplt>
 800ce1e:	2800      	cmp	r0, #0
 800ce20:	f47f acd0 	bne.w	800c7c4 <_strtod_l+0x4a4>
 800ce24:	a334      	add	r3, pc, #208	; (adr r3, 800cef8 <_strtod_l+0xbd8>)
 800ce26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce2a:	4640      	mov	r0, r8
 800ce2c:	4649      	mov	r1, r9
 800ce2e:	f7f3 fe73 	bl	8000b18 <__aeabi_dcmpgt>
 800ce32:	2800      	cmp	r0, #0
 800ce34:	f43f af7b 	beq.w	800cd2e <_strtod_l+0xa0e>
 800ce38:	e4c4      	b.n	800c7c4 <_strtod_l+0x4a4>
 800ce3a:	9b04      	ldr	r3, [sp, #16]
 800ce3c:	b333      	cbz	r3, 800ce8c <_strtod_l+0xb6c>
 800ce3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce40:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ce44:	d822      	bhi.n	800ce8c <_strtod_l+0xb6c>
 800ce46:	a32e      	add	r3, pc, #184	; (adr r3, 800cf00 <_strtod_l+0xbe0>)
 800ce48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce4c:	4640      	mov	r0, r8
 800ce4e:	4649      	mov	r1, r9
 800ce50:	f7f3 fe4e 	bl	8000af0 <__aeabi_dcmple>
 800ce54:	b1a0      	cbz	r0, 800ce80 <_strtod_l+0xb60>
 800ce56:	4649      	mov	r1, r9
 800ce58:	4640      	mov	r0, r8
 800ce5a:	f7f3 fea5 	bl	8000ba8 <__aeabi_d2uiz>
 800ce5e:	2801      	cmp	r0, #1
 800ce60:	bf38      	it	cc
 800ce62:	2001      	movcc	r0, #1
 800ce64:	f7f3 fb4e 	bl	8000504 <__aeabi_ui2d>
 800ce68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce6a:	4680      	mov	r8, r0
 800ce6c:	4689      	mov	r9, r1
 800ce6e:	bb23      	cbnz	r3, 800ceba <_strtod_l+0xb9a>
 800ce70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ce74:	9010      	str	r0, [sp, #64]	; 0x40
 800ce76:	9311      	str	r3, [sp, #68]	; 0x44
 800ce78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ce7c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ce80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ce84:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ce88:	1a9b      	subs	r3, r3, r2
 800ce8a:	9309      	str	r3, [sp, #36]	; 0x24
 800ce8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ce90:	eeb0 0a48 	vmov.f32	s0, s16
 800ce94:	eef0 0a68 	vmov.f32	s1, s17
 800ce98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ce9c:	f001 fe5c 	bl	800eb58 <__ulp>
 800cea0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cea4:	ec53 2b10 	vmov	r2, r3, d0
 800cea8:	f7f3 fba6 	bl	80005f8 <__aeabi_dmul>
 800ceac:	ec53 2b18 	vmov	r2, r3, d8
 800ceb0:	f7f3 f9ec 	bl	800028c <__adddf3>
 800ceb4:	4682      	mov	sl, r0
 800ceb6:	468b      	mov	fp, r1
 800ceb8:	e78d      	b.n	800cdd6 <_strtod_l+0xab6>
 800ceba:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800cebe:	e7db      	b.n	800ce78 <_strtod_l+0xb58>
 800cec0:	a311      	add	r3, pc, #68	; (adr r3, 800cf08 <_strtod_l+0xbe8>)
 800cec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec6:	f7f3 fe09 	bl	8000adc <__aeabi_dcmplt>
 800ceca:	e7b2      	b.n	800ce32 <_strtod_l+0xb12>
 800cecc:	2300      	movs	r3, #0
 800cece:	930a      	str	r3, [sp, #40]	; 0x28
 800ced0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ced2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ced4:	6013      	str	r3, [r2, #0]
 800ced6:	f7ff ba6b 	b.w	800c3b0 <_strtod_l+0x90>
 800ceda:	2a65      	cmp	r2, #101	; 0x65
 800cedc:	f43f ab5f 	beq.w	800c59e <_strtod_l+0x27e>
 800cee0:	2a45      	cmp	r2, #69	; 0x45
 800cee2:	f43f ab5c 	beq.w	800c59e <_strtod_l+0x27e>
 800cee6:	2301      	movs	r3, #1
 800cee8:	f7ff bb94 	b.w	800c614 <_strtod_l+0x2f4>
 800ceec:	f3af 8000 	nop.w
 800cef0:	94a03595 	.word	0x94a03595
 800cef4:	3fdfffff 	.word	0x3fdfffff
 800cef8:	35afe535 	.word	0x35afe535
 800cefc:	3fe00000 	.word	0x3fe00000
 800cf00:	ffc00000 	.word	0xffc00000
 800cf04:	41dfffff 	.word	0x41dfffff
 800cf08:	94a03595 	.word	0x94a03595
 800cf0c:	3fcfffff 	.word	0x3fcfffff
 800cf10:	3ff00000 	.word	0x3ff00000
 800cf14:	7ff00000 	.word	0x7ff00000
 800cf18:	7fe00000 	.word	0x7fe00000
 800cf1c:	7c9fffff 	.word	0x7c9fffff
 800cf20:	3fe00000 	.word	0x3fe00000
 800cf24:	bff00000 	.word	0xbff00000
 800cf28:	7fefffff 	.word	0x7fefffff

0800cf2c <_strtod_r>:
 800cf2c:	4b01      	ldr	r3, [pc, #4]	; (800cf34 <_strtod_r+0x8>)
 800cf2e:	f7ff b9f7 	b.w	800c320 <_strtod_l>
 800cf32:	bf00      	nop
 800cf34:	20000094 	.word	0x20000094

0800cf38 <_strtol_l.constprop.0>:
 800cf38:	2b01      	cmp	r3, #1
 800cf3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf3e:	d001      	beq.n	800cf44 <_strtol_l.constprop.0+0xc>
 800cf40:	2b24      	cmp	r3, #36	; 0x24
 800cf42:	d906      	bls.n	800cf52 <_strtol_l.constprop.0+0x1a>
 800cf44:	f7fe f9fe 	bl	800b344 <__errno>
 800cf48:	2316      	movs	r3, #22
 800cf4a:	6003      	str	r3, [r0, #0]
 800cf4c:	2000      	movs	r0, #0
 800cf4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf52:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d038 <_strtol_l.constprop.0+0x100>
 800cf56:	460d      	mov	r5, r1
 800cf58:	462e      	mov	r6, r5
 800cf5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf5e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800cf62:	f017 0708 	ands.w	r7, r7, #8
 800cf66:	d1f7      	bne.n	800cf58 <_strtol_l.constprop.0+0x20>
 800cf68:	2c2d      	cmp	r4, #45	; 0x2d
 800cf6a:	d132      	bne.n	800cfd2 <_strtol_l.constprop.0+0x9a>
 800cf6c:	782c      	ldrb	r4, [r5, #0]
 800cf6e:	2701      	movs	r7, #1
 800cf70:	1cb5      	adds	r5, r6, #2
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d05b      	beq.n	800d02e <_strtol_l.constprop.0+0xf6>
 800cf76:	2b10      	cmp	r3, #16
 800cf78:	d109      	bne.n	800cf8e <_strtol_l.constprop.0+0x56>
 800cf7a:	2c30      	cmp	r4, #48	; 0x30
 800cf7c:	d107      	bne.n	800cf8e <_strtol_l.constprop.0+0x56>
 800cf7e:	782c      	ldrb	r4, [r5, #0]
 800cf80:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cf84:	2c58      	cmp	r4, #88	; 0x58
 800cf86:	d14d      	bne.n	800d024 <_strtol_l.constprop.0+0xec>
 800cf88:	786c      	ldrb	r4, [r5, #1]
 800cf8a:	2310      	movs	r3, #16
 800cf8c:	3502      	adds	r5, #2
 800cf8e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cf92:	f108 38ff 	add.w	r8, r8, #4294967295
 800cf96:	f04f 0c00 	mov.w	ip, #0
 800cf9a:	fbb8 f9f3 	udiv	r9, r8, r3
 800cf9e:	4666      	mov	r6, ip
 800cfa0:	fb03 8a19 	mls	sl, r3, r9, r8
 800cfa4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800cfa8:	f1be 0f09 	cmp.w	lr, #9
 800cfac:	d816      	bhi.n	800cfdc <_strtol_l.constprop.0+0xa4>
 800cfae:	4674      	mov	r4, lr
 800cfb0:	42a3      	cmp	r3, r4
 800cfb2:	dd24      	ble.n	800cffe <_strtol_l.constprop.0+0xc6>
 800cfb4:	f1bc 0f00 	cmp.w	ip, #0
 800cfb8:	db1e      	blt.n	800cff8 <_strtol_l.constprop.0+0xc0>
 800cfba:	45b1      	cmp	r9, r6
 800cfbc:	d31c      	bcc.n	800cff8 <_strtol_l.constprop.0+0xc0>
 800cfbe:	d101      	bne.n	800cfc4 <_strtol_l.constprop.0+0x8c>
 800cfc0:	45a2      	cmp	sl, r4
 800cfc2:	db19      	blt.n	800cff8 <_strtol_l.constprop.0+0xc0>
 800cfc4:	fb06 4603 	mla	r6, r6, r3, r4
 800cfc8:	f04f 0c01 	mov.w	ip, #1
 800cfcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cfd0:	e7e8      	b.n	800cfa4 <_strtol_l.constprop.0+0x6c>
 800cfd2:	2c2b      	cmp	r4, #43	; 0x2b
 800cfd4:	bf04      	itt	eq
 800cfd6:	782c      	ldrbeq	r4, [r5, #0]
 800cfd8:	1cb5      	addeq	r5, r6, #2
 800cfda:	e7ca      	b.n	800cf72 <_strtol_l.constprop.0+0x3a>
 800cfdc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800cfe0:	f1be 0f19 	cmp.w	lr, #25
 800cfe4:	d801      	bhi.n	800cfea <_strtol_l.constprop.0+0xb2>
 800cfe6:	3c37      	subs	r4, #55	; 0x37
 800cfe8:	e7e2      	b.n	800cfb0 <_strtol_l.constprop.0+0x78>
 800cfea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800cfee:	f1be 0f19 	cmp.w	lr, #25
 800cff2:	d804      	bhi.n	800cffe <_strtol_l.constprop.0+0xc6>
 800cff4:	3c57      	subs	r4, #87	; 0x57
 800cff6:	e7db      	b.n	800cfb0 <_strtol_l.constprop.0+0x78>
 800cff8:	f04f 3cff 	mov.w	ip, #4294967295
 800cffc:	e7e6      	b.n	800cfcc <_strtol_l.constprop.0+0x94>
 800cffe:	f1bc 0f00 	cmp.w	ip, #0
 800d002:	da05      	bge.n	800d010 <_strtol_l.constprop.0+0xd8>
 800d004:	2322      	movs	r3, #34	; 0x22
 800d006:	6003      	str	r3, [r0, #0]
 800d008:	4646      	mov	r6, r8
 800d00a:	b942      	cbnz	r2, 800d01e <_strtol_l.constprop.0+0xe6>
 800d00c:	4630      	mov	r0, r6
 800d00e:	e79e      	b.n	800cf4e <_strtol_l.constprop.0+0x16>
 800d010:	b107      	cbz	r7, 800d014 <_strtol_l.constprop.0+0xdc>
 800d012:	4276      	negs	r6, r6
 800d014:	2a00      	cmp	r2, #0
 800d016:	d0f9      	beq.n	800d00c <_strtol_l.constprop.0+0xd4>
 800d018:	f1bc 0f00 	cmp.w	ip, #0
 800d01c:	d000      	beq.n	800d020 <_strtol_l.constprop.0+0xe8>
 800d01e:	1e69      	subs	r1, r5, #1
 800d020:	6011      	str	r1, [r2, #0]
 800d022:	e7f3      	b.n	800d00c <_strtol_l.constprop.0+0xd4>
 800d024:	2430      	movs	r4, #48	; 0x30
 800d026:	2b00      	cmp	r3, #0
 800d028:	d1b1      	bne.n	800cf8e <_strtol_l.constprop.0+0x56>
 800d02a:	2308      	movs	r3, #8
 800d02c:	e7af      	b.n	800cf8e <_strtol_l.constprop.0+0x56>
 800d02e:	2c30      	cmp	r4, #48	; 0x30
 800d030:	d0a5      	beq.n	800cf7e <_strtol_l.constprop.0+0x46>
 800d032:	230a      	movs	r3, #10
 800d034:	e7ab      	b.n	800cf8e <_strtol_l.constprop.0+0x56>
 800d036:	bf00      	nop
 800d038:	0800fdb1 	.word	0x0800fdb1

0800d03c <_strtol_r>:
 800d03c:	f7ff bf7c 	b.w	800cf38 <_strtol_l.constprop.0>

0800d040 <quorem>:
 800d040:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d044:	6903      	ldr	r3, [r0, #16]
 800d046:	690c      	ldr	r4, [r1, #16]
 800d048:	42a3      	cmp	r3, r4
 800d04a:	4607      	mov	r7, r0
 800d04c:	f2c0 8081 	blt.w	800d152 <quorem+0x112>
 800d050:	3c01      	subs	r4, #1
 800d052:	f101 0814 	add.w	r8, r1, #20
 800d056:	f100 0514 	add.w	r5, r0, #20
 800d05a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d05e:	9301      	str	r3, [sp, #4]
 800d060:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d064:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d068:	3301      	adds	r3, #1
 800d06a:	429a      	cmp	r2, r3
 800d06c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d070:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d074:	fbb2 f6f3 	udiv	r6, r2, r3
 800d078:	d331      	bcc.n	800d0de <quorem+0x9e>
 800d07a:	f04f 0e00 	mov.w	lr, #0
 800d07e:	4640      	mov	r0, r8
 800d080:	46ac      	mov	ip, r5
 800d082:	46f2      	mov	sl, lr
 800d084:	f850 2b04 	ldr.w	r2, [r0], #4
 800d088:	b293      	uxth	r3, r2
 800d08a:	fb06 e303 	mla	r3, r6, r3, lr
 800d08e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d092:	b29b      	uxth	r3, r3
 800d094:	ebaa 0303 	sub.w	r3, sl, r3
 800d098:	f8dc a000 	ldr.w	sl, [ip]
 800d09c:	0c12      	lsrs	r2, r2, #16
 800d09e:	fa13 f38a 	uxtah	r3, r3, sl
 800d0a2:	fb06 e202 	mla	r2, r6, r2, lr
 800d0a6:	9300      	str	r3, [sp, #0]
 800d0a8:	9b00      	ldr	r3, [sp, #0]
 800d0aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d0ae:	b292      	uxth	r2, r2
 800d0b0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d0b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d0b8:	f8bd 3000 	ldrh.w	r3, [sp]
 800d0bc:	4581      	cmp	r9, r0
 800d0be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d0c2:	f84c 3b04 	str.w	r3, [ip], #4
 800d0c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d0ca:	d2db      	bcs.n	800d084 <quorem+0x44>
 800d0cc:	f855 300b 	ldr.w	r3, [r5, fp]
 800d0d0:	b92b      	cbnz	r3, 800d0de <quorem+0x9e>
 800d0d2:	9b01      	ldr	r3, [sp, #4]
 800d0d4:	3b04      	subs	r3, #4
 800d0d6:	429d      	cmp	r5, r3
 800d0d8:	461a      	mov	r2, r3
 800d0da:	d32e      	bcc.n	800d13a <quorem+0xfa>
 800d0dc:	613c      	str	r4, [r7, #16]
 800d0de:	4638      	mov	r0, r7
 800d0e0:	f001 fc94 	bl	800ea0c <__mcmp>
 800d0e4:	2800      	cmp	r0, #0
 800d0e6:	db24      	blt.n	800d132 <quorem+0xf2>
 800d0e8:	3601      	adds	r6, #1
 800d0ea:	4628      	mov	r0, r5
 800d0ec:	f04f 0c00 	mov.w	ip, #0
 800d0f0:	f858 2b04 	ldr.w	r2, [r8], #4
 800d0f4:	f8d0 e000 	ldr.w	lr, [r0]
 800d0f8:	b293      	uxth	r3, r2
 800d0fa:	ebac 0303 	sub.w	r3, ip, r3
 800d0fe:	0c12      	lsrs	r2, r2, #16
 800d100:	fa13 f38e 	uxtah	r3, r3, lr
 800d104:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d108:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d10c:	b29b      	uxth	r3, r3
 800d10e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d112:	45c1      	cmp	r9, r8
 800d114:	f840 3b04 	str.w	r3, [r0], #4
 800d118:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d11c:	d2e8      	bcs.n	800d0f0 <quorem+0xb0>
 800d11e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d122:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d126:	b922      	cbnz	r2, 800d132 <quorem+0xf2>
 800d128:	3b04      	subs	r3, #4
 800d12a:	429d      	cmp	r5, r3
 800d12c:	461a      	mov	r2, r3
 800d12e:	d30a      	bcc.n	800d146 <quorem+0x106>
 800d130:	613c      	str	r4, [r7, #16]
 800d132:	4630      	mov	r0, r6
 800d134:	b003      	add	sp, #12
 800d136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d13a:	6812      	ldr	r2, [r2, #0]
 800d13c:	3b04      	subs	r3, #4
 800d13e:	2a00      	cmp	r2, #0
 800d140:	d1cc      	bne.n	800d0dc <quorem+0x9c>
 800d142:	3c01      	subs	r4, #1
 800d144:	e7c7      	b.n	800d0d6 <quorem+0x96>
 800d146:	6812      	ldr	r2, [r2, #0]
 800d148:	3b04      	subs	r3, #4
 800d14a:	2a00      	cmp	r2, #0
 800d14c:	d1f0      	bne.n	800d130 <quorem+0xf0>
 800d14e:	3c01      	subs	r4, #1
 800d150:	e7eb      	b.n	800d12a <quorem+0xea>
 800d152:	2000      	movs	r0, #0
 800d154:	e7ee      	b.n	800d134 <quorem+0xf4>
	...

0800d158 <_dtoa_r>:
 800d158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d15c:	ed2d 8b04 	vpush	{d8-d9}
 800d160:	ec57 6b10 	vmov	r6, r7, d0
 800d164:	b093      	sub	sp, #76	; 0x4c
 800d166:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d168:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d16c:	9106      	str	r1, [sp, #24]
 800d16e:	ee10 aa10 	vmov	sl, s0
 800d172:	4604      	mov	r4, r0
 800d174:	9209      	str	r2, [sp, #36]	; 0x24
 800d176:	930c      	str	r3, [sp, #48]	; 0x30
 800d178:	46bb      	mov	fp, r7
 800d17a:	b975      	cbnz	r5, 800d19a <_dtoa_r+0x42>
 800d17c:	2010      	movs	r0, #16
 800d17e:	f7fe f90b 	bl	800b398 <malloc>
 800d182:	4602      	mov	r2, r0
 800d184:	6260      	str	r0, [r4, #36]	; 0x24
 800d186:	b920      	cbnz	r0, 800d192 <_dtoa_r+0x3a>
 800d188:	4ba7      	ldr	r3, [pc, #668]	; (800d428 <_dtoa_r+0x2d0>)
 800d18a:	21ea      	movs	r1, #234	; 0xea
 800d18c:	48a7      	ldr	r0, [pc, #668]	; (800d42c <_dtoa_r+0x2d4>)
 800d18e:	f001 ffcd 	bl	800f12c <__assert_func>
 800d192:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d196:	6005      	str	r5, [r0, #0]
 800d198:	60c5      	str	r5, [r0, #12]
 800d19a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d19c:	6819      	ldr	r1, [r3, #0]
 800d19e:	b151      	cbz	r1, 800d1b6 <_dtoa_r+0x5e>
 800d1a0:	685a      	ldr	r2, [r3, #4]
 800d1a2:	604a      	str	r2, [r1, #4]
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	4093      	lsls	r3, r2
 800d1a8:	608b      	str	r3, [r1, #8]
 800d1aa:	4620      	mov	r0, r4
 800d1ac:	f001 f9a2 	bl	800e4f4 <_Bfree>
 800d1b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	601a      	str	r2, [r3, #0]
 800d1b6:	1e3b      	subs	r3, r7, #0
 800d1b8:	bfaa      	itet	ge
 800d1ba:	2300      	movge	r3, #0
 800d1bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d1c0:	f8c8 3000 	strge.w	r3, [r8]
 800d1c4:	4b9a      	ldr	r3, [pc, #616]	; (800d430 <_dtoa_r+0x2d8>)
 800d1c6:	bfbc      	itt	lt
 800d1c8:	2201      	movlt	r2, #1
 800d1ca:	f8c8 2000 	strlt.w	r2, [r8]
 800d1ce:	ea33 030b 	bics.w	r3, r3, fp
 800d1d2:	d11b      	bne.n	800d20c <_dtoa_r+0xb4>
 800d1d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d1d6:	f242 730f 	movw	r3, #9999	; 0x270f
 800d1da:	6013      	str	r3, [r2, #0]
 800d1dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d1e0:	4333      	orrs	r3, r6
 800d1e2:	f000 8592 	beq.w	800dd0a <_dtoa_r+0xbb2>
 800d1e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d1e8:	b963      	cbnz	r3, 800d204 <_dtoa_r+0xac>
 800d1ea:	4b92      	ldr	r3, [pc, #584]	; (800d434 <_dtoa_r+0x2dc>)
 800d1ec:	e022      	b.n	800d234 <_dtoa_r+0xdc>
 800d1ee:	4b92      	ldr	r3, [pc, #584]	; (800d438 <_dtoa_r+0x2e0>)
 800d1f0:	9301      	str	r3, [sp, #4]
 800d1f2:	3308      	adds	r3, #8
 800d1f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d1f6:	6013      	str	r3, [r2, #0]
 800d1f8:	9801      	ldr	r0, [sp, #4]
 800d1fa:	b013      	add	sp, #76	; 0x4c
 800d1fc:	ecbd 8b04 	vpop	{d8-d9}
 800d200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d204:	4b8b      	ldr	r3, [pc, #556]	; (800d434 <_dtoa_r+0x2dc>)
 800d206:	9301      	str	r3, [sp, #4]
 800d208:	3303      	adds	r3, #3
 800d20a:	e7f3      	b.n	800d1f4 <_dtoa_r+0x9c>
 800d20c:	2200      	movs	r2, #0
 800d20e:	2300      	movs	r3, #0
 800d210:	4650      	mov	r0, sl
 800d212:	4659      	mov	r1, fp
 800d214:	f7f3 fc58 	bl	8000ac8 <__aeabi_dcmpeq>
 800d218:	ec4b ab19 	vmov	d9, sl, fp
 800d21c:	4680      	mov	r8, r0
 800d21e:	b158      	cbz	r0, 800d238 <_dtoa_r+0xe0>
 800d220:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d222:	2301      	movs	r3, #1
 800d224:	6013      	str	r3, [r2, #0]
 800d226:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d228:	2b00      	cmp	r3, #0
 800d22a:	f000 856b 	beq.w	800dd04 <_dtoa_r+0xbac>
 800d22e:	4883      	ldr	r0, [pc, #524]	; (800d43c <_dtoa_r+0x2e4>)
 800d230:	6018      	str	r0, [r3, #0]
 800d232:	1e43      	subs	r3, r0, #1
 800d234:	9301      	str	r3, [sp, #4]
 800d236:	e7df      	b.n	800d1f8 <_dtoa_r+0xa0>
 800d238:	ec4b ab10 	vmov	d0, sl, fp
 800d23c:	aa10      	add	r2, sp, #64	; 0x40
 800d23e:	a911      	add	r1, sp, #68	; 0x44
 800d240:	4620      	mov	r0, r4
 800d242:	f001 fd05 	bl	800ec50 <__d2b>
 800d246:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d24a:	ee08 0a10 	vmov	s16, r0
 800d24e:	2d00      	cmp	r5, #0
 800d250:	f000 8084 	beq.w	800d35c <_dtoa_r+0x204>
 800d254:	ee19 3a90 	vmov	r3, s19
 800d258:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d25c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d260:	4656      	mov	r6, sl
 800d262:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d266:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d26a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d26e:	4b74      	ldr	r3, [pc, #464]	; (800d440 <_dtoa_r+0x2e8>)
 800d270:	2200      	movs	r2, #0
 800d272:	4630      	mov	r0, r6
 800d274:	4639      	mov	r1, r7
 800d276:	f7f3 f807 	bl	8000288 <__aeabi_dsub>
 800d27a:	a365      	add	r3, pc, #404	; (adr r3, 800d410 <_dtoa_r+0x2b8>)
 800d27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d280:	f7f3 f9ba 	bl	80005f8 <__aeabi_dmul>
 800d284:	a364      	add	r3, pc, #400	; (adr r3, 800d418 <_dtoa_r+0x2c0>)
 800d286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d28a:	f7f2 ffff 	bl	800028c <__adddf3>
 800d28e:	4606      	mov	r6, r0
 800d290:	4628      	mov	r0, r5
 800d292:	460f      	mov	r7, r1
 800d294:	f7f3 f946 	bl	8000524 <__aeabi_i2d>
 800d298:	a361      	add	r3, pc, #388	; (adr r3, 800d420 <_dtoa_r+0x2c8>)
 800d29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d29e:	f7f3 f9ab 	bl	80005f8 <__aeabi_dmul>
 800d2a2:	4602      	mov	r2, r0
 800d2a4:	460b      	mov	r3, r1
 800d2a6:	4630      	mov	r0, r6
 800d2a8:	4639      	mov	r1, r7
 800d2aa:	f7f2 ffef 	bl	800028c <__adddf3>
 800d2ae:	4606      	mov	r6, r0
 800d2b0:	460f      	mov	r7, r1
 800d2b2:	f7f3 fc51 	bl	8000b58 <__aeabi_d2iz>
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	9000      	str	r0, [sp, #0]
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	4630      	mov	r0, r6
 800d2be:	4639      	mov	r1, r7
 800d2c0:	f7f3 fc0c 	bl	8000adc <__aeabi_dcmplt>
 800d2c4:	b150      	cbz	r0, 800d2dc <_dtoa_r+0x184>
 800d2c6:	9800      	ldr	r0, [sp, #0]
 800d2c8:	f7f3 f92c 	bl	8000524 <__aeabi_i2d>
 800d2cc:	4632      	mov	r2, r6
 800d2ce:	463b      	mov	r3, r7
 800d2d0:	f7f3 fbfa 	bl	8000ac8 <__aeabi_dcmpeq>
 800d2d4:	b910      	cbnz	r0, 800d2dc <_dtoa_r+0x184>
 800d2d6:	9b00      	ldr	r3, [sp, #0]
 800d2d8:	3b01      	subs	r3, #1
 800d2da:	9300      	str	r3, [sp, #0]
 800d2dc:	9b00      	ldr	r3, [sp, #0]
 800d2de:	2b16      	cmp	r3, #22
 800d2e0:	d85a      	bhi.n	800d398 <_dtoa_r+0x240>
 800d2e2:	9a00      	ldr	r2, [sp, #0]
 800d2e4:	4b57      	ldr	r3, [pc, #348]	; (800d444 <_dtoa_r+0x2ec>)
 800d2e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ee:	ec51 0b19 	vmov	r0, r1, d9
 800d2f2:	f7f3 fbf3 	bl	8000adc <__aeabi_dcmplt>
 800d2f6:	2800      	cmp	r0, #0
 800d2f8:	d050      	beq.n	800d39c <_dtoa_r+0x244>
 800d2fa:	9b00      	ldr	r3, [sp, #0]
 800d2fc:	3b01      	subs	r3, #1
 800d2fe:	9300      	str	r3, [sp, #0]
 800d300:	2300      	movs	r3, #0
 800d302:	930b      	str	r3, [sp, #44]	; 0x2c
 800d304:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d306:	1b5d      	subs	r5, r3, r5
 800d308:	1e6b      	subs	r3, r5, #1
 800d30a:	9305      	str	r3, [sp, #20]
 800d30c:	bf45      	ittet	mi
 800d30e:	f1c5 0301 	rsbmi	r3, r5, #1
 800d312:	9304      	strmi	r3, [sp, #16]
 800d314:	2300      	movpl	r3, #0
 800d316:	2300      	movmi	r3, #0
 800d318:	bf4c      	ite	mi
 800d31a:	9305      	strmi	r3, [sp, #20]
 800d31c:	9304      	strpl	r3, [sp, #16]
 800d31e:	9b00      	ldr	r3, [sp, #0]
 800d320:	2b00      	cmp	r3, #0
 800d322:	db3d      	blt.n	800d3a0 <_dtoa_r+0x248>
 800d324:	9b05      	ldr	r3, [sp, #20]
 800d326:	9a00      	ldr	r2, [sp, #0]
 800d328:	920a      	str	r2, [sp, #40]	; 0x28
 800d32a:	4413      	add	r3, r2
 800d32c:	9305      	str	r3, [sp, #20]
 800d32e:	2300      	movs	r3, #0
 800d330:	9307      	str	r3, [sp, #28]
 800d332:	9b06      	ldr	r3, [sp, #24]
 800d334:	2b09      	cmp	r3, #9
 800d336:	f200 8089 	bhi.w	800d44c <_dtoa_r+0x2f4>
 800d33a:	2b05      	cmp	r3, #5
 800d33c:	bfc4      	itt	gt
 800d33e:	3b04      	subgt	r3, #4
 800d340:	9306      	strgt	r3, [sp, #24]
 800d342:	9b06      	ldr	r3, [sp, #24]
 800d344:	f1a3 0302 	sub.w	r3, r3, #2
 800d348:	bfcc      	ite	gt
 800d34a:	2500      	movgt	r5, #0
 800d34c:	2501      	movle	r5, #1
 800d34e:	2b03      	cmp	r3, #3
 800d350:	f200 8087 	bhi.w	800d462 <_dtoa_r+0x30a>
 800d354:	e8df f003 	tbb	[pc, r3]
 800d358:	59383a2d 	.word	0x59383a2d
 800d35c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d360:	441d      	add	r5, r3
 800d362:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d366:	2b20      	cmp	r3, #32
 800d368:	bfc1      	itttt	gt
 800d36a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d36e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d372:	fa0b f303 	lslgt.w	r3, fp, r3
 800d376:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d37a:	bfda      	itte	le
 800d37c:	f1c3 0320 	rsble	r3, r3, #32
 800d380:	fa06 f003 	lslle.w	r0, r6, r3
 800d384:	4318      	orrgt	r0, r3
 800d386:	f7f3 f8bd 	bl	8000504 <__aeabi_ui2d>
 800d38a:	2301      	movs	r3, #1
 800d38c:	4606      	mov	r6, r0
 800d38e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d392:	3d01      	subs	r5, #1
 800d394:	930e      	str	r3, [sp, #56]	; 0x38
 800d396:	e76a      	b.n	800d26e <_dtoa_r+0x116>
 800d398:	2301      	movs	r3, #1
 800d39a:	e7b2      	b.n	800d302 <_dtoa_r+0x1aa>
 800d39c:	900b      	str	r0, [sp, #44]	; 0x2c
 800d39e:	e7b1      	b.n	800d304 <_dtoa_r+0x1ac>
 800d3a0:	9b04      	ldr	r3, [sp, #16]
 800d3a2:	9a00      	ldr	r2, [sp, #0]
 800d3a4:	1a9b      	subs	r3, r3, r2
 800d3a6:	9304      	str	r3, [sp, #16]
 800d3a8:	4253      	negs	r3, r2
 800d3aa:	9307      	str	r3, [sp, #28]
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	930a      	str	r3, [sp, #40]	; 0x28
 800d3b0:	e7bf      	b.n	800d332 <_dtoa_r+0x1da>
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	9308      	str	r3, [sp, #32]
 800d3b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	dc55      	bgt.n	800d468 <_dtoa_r+0x310>
 800d3bc:	2301      	movs	r3, #1
 800d3be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d3c2:	461a      	mov	r2, r3
 800d3c4:	9209      	str	r2, [sp, #36]	; 0x24
 800d3c6:	e00c      	b.n	800d3e2 <_dtoa_r+0x28a>
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	e7f3      	b.n	800d3b4 <_dtoa_r+0x25c>
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d3d0:	9308      	str	r3, [sp, #32]
 800d3d2:	9b00      	ldr	r3, [sp, #0]
 800d3d4:	4413      	add	r3, r2
 800d3d6:	9302      	str	r3, [sp, #8]
 800d3d8:	3301      	adds	r3, #1
 800d3da:	2b01      	cmp	r3, #1
 800d3dc:	9303      	str	r3, [sp, #12]
 800d3de:	bfb8      	it	lt
 800d3e0:	2301      	movlt	r3, #1
 800d3e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	6042      	str	r2, [r0, #4]
 800d3e8:	2204      	movs	r2, #4
 800d3ea:	f102 0614 	add.w	r6, r2, #20
 800d3ee:	429e      	cmp	r6, r3
 800d3f0:	6841      	ldr	r1, [r0, #4]
 800d3f2:	d93d      	bls.n	800d470 <_dtoa_r+0x318>
 800d3f4:	4620      	mov	r0, r4
 800d3f6:	f001 f83d 	bl	800e474 <_Balloc>
 800d3fa:	9001      	str	r0, [sp, #4]
 800d3fc:	2800      	cmp	r0, #0
 800d3fe:	d13b      	bne.n	800d478 <_dtoa_r+0x320>
 800d400:	4b11      	ldr	r3, [pc, #68]	; (800d448 <_dtoa_r+0x2f0>)
 800d402:	4602      	mov	r2, r0
 800d404:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d408:	e6c0      	b.n	800d18c <_dtoa_r+0x34>
 800d40a:	2301      	movs	r3, #1
 800d40c:	e7df      	b.n	800d3ce <_dtoa_r+0x276>
 800d40e:	bf00      	nop
 800d410:	636f4361 	.word	0x636f4361
 800d414:	3fd287a7 	.word	0x3fd287a7
 800d418:	8b60c8b3 	.word	0x8b60c8b3
 800d41c:	3fc68a28 	.word	0x3fc68a28
 800d420:	509f79fb 	.word	0x509f79fb
 800d424:	3fd34413 	.word	0x3fd34413
 800d428:	0800febe 	.word	0x0800febe
 800d42c:	0800fed5 	.word	0x0800fed5
 800d430:	7ff00000 	.word	0x7ff00000
 800d434:	0800feba 	.word	0x0800feba
 800d438:	0800feb1 	.word	0x0800feb1
 800d43c:	0800fd31 	.word	0x0800fd31
 800d440:	3ff80000 	.word	0x3ff80000
 800d444:	08010040 	.word	0x08010040
 800d448:	0800ff30 	.word	0x0800ff30
 800d44c:	2501      	movs	r5, #1
 800d44e:	2300      	movs	r3, #0
 800d450:	9306      	str	r3, [sp, #24]
 800d452:	9508      	str	r5, [sp, #32]
 800d454:	f04f 33ff 	mov.w	r3, #4294967295
 800d458:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d45c:	2200      	movs	r2, #0
 800d45e:	2312      	movs	r3, #18
 800d460:	e7b0      	b.n	800d3c4 <_dtoa_r+0x26c>
 800d462:	2301      	movs	r3, #1
 800d464:	9308      	str	r3, [sp, #32]
 800d466:	e7f5      	b.n	800d454 <_dtoa_r+0x2fc>
 800d468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d46a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d46e:	e7b8      	b.n	800d3e2 <_dtoa_r+0x28a>
 800d470:	3101      	adds	r1, #1
 800d472:	6041      	str	r1, [r0, #4]
 800d474:	0052      	lsls	r2, r2, #1
 800d476:	e7b8      	b.n	800d3ea <_dtoa_r+0x292>
 800d478:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d47a:	9a01      	ldr	r2, [sp, #4]
 800d47c:	601a      	str	r2, [r3, #0]
 800d47e:	9b03      	ldr	r3, [sp, #12]
 800d480:	2b0e      	cmp	r3, #14
 800d482:	f200 809d 	bhi.w	800d5c0 <_dtoa_r+0x468>
 800d486:	2d00      	cmp	r5, #0
 800d488:	f000 809a 	beq.w	800d5c0 <_dtoa_r+0x468>
 800d48c:	9b00      	ldr	r3, [sp, #0]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	dd32      	ble.n	800d4f8 <_dtoa_r+0x3a0>
 800d492:	4ab7      	ldr	r2, [pc, #732]	; (800d770 <_dtoa_r+0x618>)
 800d494:	f003 030f 	and.w	r3, r3, #15
 800d498:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d49c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d4a0:	9b00      	ldr	r3, [sp, #0]
 800d4a2:	05d8      	lsls	r0, r3, #23
 800d4a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d4a8:	d516      	bpl.n	800d4d8 <_dtoa_r+0x380>
 800d4aa:	4bb2      	ldr	r3, [pc, #712]	; (800d774 <_dtoa_r+0x61c>)
 800d4ac:	ec51 0b19 	vmov	r0, r1, d9
 800d4b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d4b4:	f7f3 f9ca 	bl	800084c <__aeabi_ddiv>
 800d4b8:	f007 070f 	and.w	r7, r7, #15
 800d4bc:	4682      	mov	sl, r0
 800d4be:	468b      	mov	fp, r1
 800d4c0:	2503      	movs	r5, #3
 800d4c2:	4eac      	ldr	r6, [pc, #688]	; (800d774 <_dtoa_r+0x61c>)
 800d4c4:	b957      	cbnz	r7, 800d4dc <_dtoa_r+0x384>
 800d4c6:	4642      	mov	r2, r8
 800d4c8:	464b      	mov	r3, r9
 800d4ca:	4650      	mov	r0, sl
 800d4cc:	4659      	mov	r1, fp
 800d4ce:	f7f3 f9bd 	bl	800084c <__aeabi_ddiv>
 800d4d2:	4682      	mov	sl, r0
 800d4d4:	468b      	mov	fp, r1
 800d4d6:	e028      	b.n	800d52a <_dtoa_r+0x3d2>
 800d4d8:	2502      	movs	r5, #2
 800d4da:	e7f2      	b.n	800d4c2 <_dtoa_r+0x36a>
 800d4dc:	07f9      	lsls	r1, r7, #31
 800d4de:	d508      	bpl.n	800d4f2 <_dtoa_r+0x39a>
 800d4e0:	4640      	mov	r0, r8
 800d4e2:	4649      	mov	r1, r9
 800d4e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d4e8:	f7f3 f886 	bl	80005f8 <__aeabi_dmul>
 800d4ec:	3501      	adds	r5, #1
 800d4ee:	4680      	mov	r8, r0
 800d4f0:	4689      	mov	r9, r1
 800d4f2:	107f      	asrs	r7, r7, #1
 800d4f4:	3608      	adds	r6, #8
 800d4f6:	e7e5      	b.n	800d4c4 <_dtoa_r+0x36c>
 800d4f8:	f000 809b 	beq.w	800d632 <_dtoa_r+0x4da>
 800d4fc:	9b00      	ldr	r3, [sp, #0]
 800d4fe:	4f9d      	ldr	r7, [pc, #628]	; (800d774 <_dtoa_r+0x61c>)
 800d500:	425e      	negs	r6, r3
 800d502:	4b9b      	ldr	r3, [pc, #620]	; (800d770 <_dtoa_r+0x618>)
 800d504:	f006 020f 	and.w	r2, r6, #15
 800d508:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d510:	ec51 0b19 	vmov	r0, r1, d9
 800d514:	f7f3 f870 	bl	80005f8 <__aeabi_dmul>
 800d518:	1136      	asrs	r6, r6, #4
 800d51a:	4682      	mov	sl, r0
 800d51c:	468b      	mov	fp, r1
 800d51e:	2300      	movs	r3, #0
 800d520:	2502      	movs	r5, #2
 800d522:	2e00      	cmp	r6, #0
 800d524:	d17a      	bne.n	800d61c <_dtoa_r+0x4c4>
 800d526:	2b00      	cmp	r3, #0
 800d528:	d1d3      	bne.n	800d4d2 <_dtoa_r+0x37a>
 800d52a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	f000 8082 	beq.w	800d636 <_dtoa_r+0x4de>
 800d532:	4b91      	ldr	r3, [pc, #580]	; (800d778 <_dtoa_r+0x620>)
 800d534:	2200      	movs	r2, #0
 800d536:	4650      	mov	r0, sl
 800d538:	4659      	mov	r1, fp
 800d53a:	f7f3 facf 	bl	8000adc <__aeabi_dcmplt>
 800d53e:	2800      	cmp	r0, #0
 800d540:	d079      	beq.n	800d636 <_dtoa_r+0x4de>
 800d542:	9b03      	ldr	r3, [sp, #12]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d076      	beq.n	800d636 <_dtoa_r+0x4de>
 800d548:	9b02      	ldr	r3, [sp, #8]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	dd36      	ble.n	800d5bc <_dtoa_r+0x464>
 800d54e:	9b00      	ldr	r3, [sp, #0]
 800d550:	4650      	mov	r0, sl
 800d552:	4659      	mov	r1, fp
 800d554:	1e5f      	subs	r7, r3, #1
 800d556:	2200      	movs	r2, #0
 800d558:	4b88      	ldr	r3, [pc, #544]	; (800d77c <_dtoa_r+0x624>)
 800d55a:	f7f3 f84d 	bl	80005f8 <__aeabi_dmul>
 800d55e:	9e02      	ldr	r6, [sp, #8]
 800d560:	4682      	mov	sl, r0
 800d562:	468b      	mov	fp, r1
 800d564:	3501      	adds	r5, #1
 800d566:	4628      	mov	r0, r5
 800d568:	f7f2 ffdc 	bl	8000524 <__aeabi_i2d>
 800d56c:	4652      	mov	r2, sl
 800d56e:	465b      	mov	r3, fp
 800d570:	f7f3 f842 	bl	80005f8 <__aeabi_dmul>
 800d574:	4b82      	ldr	r3, [pc, #520]	; (800d780 <_dtoa_r+0x628>)
 800d576:	2200      	movs	r2, #0
 800d578:	f7f2 fe88 	bl	800028c <__adddf3>
 800d57c:	46d0      	mov	r8, sl
 800d57e:	46d9      	mov	r9, fp
 800d580:	4682      	mov	sl, r0
 800d582:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d586:	2e00      	cmp	r6, #0
 800d588:	d158      	bne.n	800d63c <_dtoa_r+0x4e4>
 800d58a:	4b7e      	ldr	r3, [pc, #504]	; (800d784 <_dtoa_r+0x62c>)
 800d58c:	2200      	movs	r2, #0
 800d58e:	4640      	mov	r0, r8
 800d590:	4649      	mov	r1, r9
 800d592:	f7f2 fe79 	bl	8000288 <__aeabi_dsub>
 800d596:	4652      	mov	r2, sl
 800d598:	465b      	mov	r3, fp
 800d59a:	4680      	mov	r8, r0
 800d59c:	4689      	mov	r9, r1
 800d59e:	f7f3 fabb 	bl	8000b18 <__aeabi_dcmpgt>
 800d5a2:	2800      	cmp	r0, #0
 800d5a4:	f040 8295 	bne.w	800dad2 <_dtoa_r+0x97a>
 800d5a8:	4652      	mov	r2, sl
 800d5aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d5ae:	4640      	mov	r0, r8
 800d5b0:	4649      	mov	r1, r9
 800d5b2:	f7f3 fa93 	bl	8000adc <__aeabi_dcmplt>
 800d5b6:	2800      	cmp	r0, #0
 800d5b8:	f040 8289 	bne.w	800dace <_dtoa_r+0x976>
 800d5bc:	ec5b ab19 	vmov	sl, fp, d9
 800d5c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	f2c0 8148 	blt.w	800d858 <_dtoa_r+0x700>
 800d5c8:	9a00      	ldr	r2, [sp, #0]
 800d5ca:	2a0e      	cmp	r2, #14
 800d5cc:	f300 8144 	bgt.w	800d858 <_dtoa_r+0x700>
 800d5d0:	4b67      	ldr	r3, [pc, #412]	; (800d770 <_dtoa_r+0x618>)
 800d5d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d5d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d5da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	f280 80d5 	bge.w	800d78c <_dtoa_r+0x634>
 800d5e2:	9b03      	ldr	r3, [sp, #12]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	f300 80d1 	bgt.w	800d78c <_dtoa_r+0x634>
 800d5ea:	f040 826f 	bne.w	800dacc <_dtoa_r+0x974>
 800d5ee:	4b65      	ldr	r3, [pc, #404]	; (800d784 <_dtoa_r+0x62c>)
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	4640      	mov	r0, r8
 800d5f4:	4649      	mov	r1, r9
 800d5f6:	f7f2 ffff 	bl	80005f8 <__aeabi_dmul>
 800d5fa:	4652      	mov	r2, sl
 800d5fc:	465b      	mov	r3, fp
 800d5fe:	f7f3 fa81 	bl	8000b04 <__aeabi_dcmpge>
 800d602:	9e03      	ldr	r6, [sp, #12]
 800d604:	4637      	mov	r7, r6
 800d606:	2800      	cmp	r0, #0
 800d608:	f040 8245 	bne.w	800da96 <_dtoa_r+0x93e>
 800d60c:	9d01      	ldr	r5, [sp, #4]
 800d60e:	2331      	movs	r3, #49	; 0x31
 800d610:	f805 3b01 	strb.w	r3, [r5], #1
 800d614:	9b00      	ldr	r3, [sp, #0]
 800d616:	3301      	adds	r3, #1
 800d618:	9300      	str	r3, [sp, #0]
 800d61a:	e240      	b.n	800da9e <_dtoa_r+0x946>
 800d61c:	07f2      	lsls	r2, r6, #31
 800d61e:	d505      	bpl.n	800d62c <_dtoa_r+0x4d4>
 800d620:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d624:	f7f2 ffe8 	bl	80005f8 <__aeabi_dmul>
 800d628:	3501      	adds	r5, #1
 800d62a:	2301      	movs	r3, #1
 800d62c:	1076      	asrs	r6, r6, #1
 800d62e:	3708      	adds	r7, #8
 800d630:	e777      	b.n	800d522 <_dtoa_r+0x3ca>
 800d632:	2502      	movs	r5, #2
 800d634:	e779      	b.n	800d52a <_dtoa_r+0x3d2>
 800d636:	9f00      	ldr	r7, [sp, #0]
 800d638:	9e03      	ldr	r6, [sp, #12]
 800d63a:	e794      	b.n	800d566 <_dtoa_r+0x40e>
 800d63c:	9901      	ldr	r1, [sp, #4]
 800d63e:	4b4c      	ldr	r3, [pc, #304]	; (800d770 <_dtoa_r+0x618>)
 800d640:	4431      	add	r1, r6
 800d642:	910d      	str	r1, [sp, #52]	; 0x34
 800d644:	9908      	ldr	r1, [sp, #32]
 800d646:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d64a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d64e:	2900      	cmp	r1, #0
 800d650:	d043      	beq.n	800d6da <_dtoa_r+0x582>
 800d652:	494d      	ldr	r1, [pc, #308]	; (800d788 <_dtoa_r+0x630>)
 800d654:	2000      	movs	r0, #0
 800d656:	f7f3 f8f9 	bl	800084c <__aeabi_ddiv>
 800d65a:	4652      	mov	r2, sl
 800d65c:	465b      	mov	r3, fp
 800d65e:	f7f2 fe13 	bl	8000288 <__aeabi_dsub>
 800d662:	9d01      	ldr	r5, [sp, #4]
 800d664:	4682      	mov	sl, r0
 800d666:	468b      	mov	fp, r1
 800d668:	4649      	mov	r1, r9
 800d66a:	4640      	mov	r0, r8
 800d66c:	f7f3 fa74 	bl	8000b58 <__aeabi_d2iz>
 800d670:	4606      	mov	r6, r0
 800d672:	f7f2 ff57 	bl	8000524 <__aeabi_i2d>
 800d676:	4602      	mov	r2, r0
 800d678:	460b      	mov	r3, r1
 800d67a:	4640      	mov	r0, r8
 800d67c:	4649      	mov	r1, r9
 800d67e:	f7f2 fe03 	bl	8000288 <__aeabi_dsub>
 800d682:	3630      	adds	r6, #48	; 0x30
 800d684:	f805 6b01 	strb.w	r6, [r5], #1
 800d688:	4652      	mov	r2, sl
 800d68a:	465b      	mov	r3, fp
 800d68c:	4680      	mov	r8, r0
 800d68e:	4689      	mov	r9, r1
 800d690:	f7f3 fa24 	bl	8000adc <__aeabi_dcmplt>
 800d694:	2800      	cmp	r0, #0
 800d696:	d163      	bne.n	800d760 <_dtoa_r+0x608>
 800d698:	4642      	mov	r2, r8
 800d69a:	464b      	mov	r3, r9
 800d69c:	4936      	ldr	r1, [pc, #216]	; (800d778 <_dtoa_r+0x620>)
 800d69e:	2000      	movs	r0, #0
 800d6a0:	f7f2 fdf2 	bl	8000288 <__aeabi_dsub>
 800d6a4:	4652      	mov	r2, sl
 800d6a6:	465b      	mov	r3, fp
 800d6a8:	f7f3 fa18 	bl	8000adc <__aeabi_dcmplt>
 800d6ac:	2800      	cmp	r0, #0
 800d6ae:	f040 80b5 	bne.w	800d81c <_dtoa_r+0x6c4>
 800d6b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d6b4:	429d      	cmp	r5, r3
 800d6b6:	d081      	beq.n	800d5bc <_dtoa_r+0x464>
 800d6b8:	4b30      	ldr	r3, [pc, #192]	; (800d77c <_dtoa_r+0x624>)
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	4650      	mov	r0, sl
 800d6be:	4659      	mov	r1, fp
 800d6c0:	f7f2 ff9a 	bl	80005f8 <__aeabi_dmul>
 800d6c4:	4b2d      	ldr	r3, [pc, #180]	; (800d77c <_dtoa_r+0x624>)
 800d6c6:	4682      	mov	sl, r0
 800d6c8:	468b      	mov	fp, r1
 800d6ca:	4640      	mov	r0, r8
 800d6cc:	4649      	mov	r1, r9
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	f7f2 ff92 	bl	80005f8 <__aeabi_dmul>
 800d6d4:	4680      	mov	r8, r0
 800d6d6:	4689      	mov	r9, r1
 800d6d8:	e7c6      	b.n	800d668 <_dtoa_r+0x510>
 800d6da:	4650      	mov	r0, sl
 800d6dc:	4659      	mov	r1, fp
 800d6de:	f7f2 ff8b 	bl	80005f8 <__aeabi_dmul>
 800d6e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d6e4:	9d01      	ldr	r5, [sp, #4]
 800d6e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800d6e8:	4682      	mov	sl, r0
 800d6ea:	468b      	mov	fp, r1
 800d6ec:	4649      	mov	r1, r9
 800d6ee:	4640      	mov	r0, r8
 800d6f0:	f7f3 fa32 	bl	8000b58 <__aeabi_d2iz>
 800d6f4:	4606      	mov	r6, r0
 800d6f6:	f7f2 ff15 	bl	8000524 <__aeabi_i2d>
 800d6fa:	3630      	adds	r6, #48	; 0x30
 800d6fc:	4602      	mov	r2, r0
 800d6fe:	460b      	mov	r3, r1
 800d700:	4640      	mov	r0, r8
 800d702:	4649      	mov	r1, r9
 800d704:	f7f2 fdc0 	bl	8000288 <__aeabi_dsub>
 800d708:	f805 6b01 	strb.w	r6, [r5], #1
 800d70c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d70e:	429d      	cmp	r5, r3
 800d710:	4680      	mov	r8, r0
 800d712:	4689      	mov	r9, r1
 800d714:	f04f 0200 	mov.w	r2, #0
 800d718:	d124      	bne.n	800d764 <_dtoa_r+0x60c>
 800d71a:	4b1b      	ldr	r3, [pc, #108]	; (800d788 <_dtoa_r+0x630>)
 800d71c:	4650      	mov	r0, sl
 800d71e:	4659      	mov	r1, fp
 800d720:	f7f2 fdb4 	bl	800028c <__adddf3>
 800d724:	4602      	mov	r2, r0
 800d726:	460b      	mov	r3, r1
 800d728:	4640      	mov	r0, r8
 800d72a:	4649      	mov	r1, r9
 800d72c:	f7f3 f9f4 	bl	8000b18 <__aeabi_dcmpgt>
 800d730:	2800      	cmp	r0, #0
 800d732:	d173      	bne.n	800d81c <_dtoa_r+0x6c4>
 800d734:	4652      	mov	r2, sl
 800d736:	465b      	mov	r3, fp
 800d738:	4913      	ldr	r1, [pc, #76]	; (800d788 <_dtoa_r+0x630>)
 800d73a:	2000      	movs	r0, #0
 800d73c:	f7f2 fda4 	bl	8000288 <__aeabi_dsub>
 800d740:	4602      	mov	r2, r0
 800d742:	460b      	mov	r3, r1
 800d744:	4640      	mov	r0, r8
 800d746:	4649      	mov	r1, r9
 800d748:	f7f3 f9c8 	bl	8000adc <__aeabi_dcmplt>
 800d74c:	2800      	cmp	r0, #0
 800d74e:	f43f af35 	beq.w	800d5bc <_dtoa_r+0x464>
 800d752:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d754:	1e6b      	subs	r3, r5, #1
 800d756:	930f      	str	r3, [sp, #60]	; 0x3c
 800d758:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d75c:	2b30      	cmp	r3, #48	; 0x30
 800d75e:	d0f8      	beq.n	800d752 <_dtoa_r+0x5fa>
 800d760:	9700      	str	r7, [sp, #0]
 800d762:	e049      	b.n	800d7f8 <_dtoa_r+0x6a0>
 800d764:	4b05      	ldr	r3, [pc, #20]	; (800d77c <_dtoa_r+0x624>)
 800d766:	f7f2 ff47 	bl	80005f8 <__aeabi_dmul>
 800d76a:	4680      	mov	r8, r0
 800d76c:	4689      	mov	r9, r1
 800d76e:	e7bd      	b.n	800d6ec <_dtoa_r+0x594>
 800d770:	08010040 	.word	0x08010040
 800d774:	08010018 	.word	0x08010018
 800d778:	3ff00000 	.word	0x3ff00000
 800d77c:	40240000 	.word	0x40240000
 800d780:	401c0000 	.word	0x401c0000
 800d784:	40140000 	.word	0x40140000
 800d788:	3fe00000 	.word	0x3fe00000
 800d78c:	9d01      	ldr	r5, [sp, #4]
 800d78e:	4656      	mov	r6, sl
 800d790:	465f      	mov	r7, fp
 800d792:	4642      	mov	r2, r8
 800d794:	464b      	mov	r3, r9
 800d796:	4630      	mov	r0, r6
 800d798:	4639      	mov	r1, r7
 800d79a:	f7f3 f857 	bl	800084c <__aeabi_ddiv>
 800d79e:	f7f3 f9db 	bl	8000b58 <__aeabi_d2iz>
 800d7a2:	4682      	mov	sl, r0
 800d7a4:	f7f2 febe 	bl	8000524 <__aeabi_i2d>
 800d7a8:	4642      	mov	r2, r8
 800d7aa:	464b      	mov	r3, r9
 800d7ac:	f7f2 ff24 	bl	80005f8 <__aeabi_dmul>
 800d7b0:	4602      	mov	r2, r0
 800d7b2:	460b      	mov	r3, r1
 800d7b4:	4630      	mov	r0, r6
 800d7b6:	4639      	mov	r1, r7
 800d7b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d7bc:	f7f2 fd64 	bl	8000288 <__aeabi_dsub>
 800d7c0:	f805 6b01 	strb.w	r6, [r5], #1
 800d7c4:	9e01      	ldr	r6, [sp, #4]
 800d7c6:	9f03      	ldr	r7, [sp, #12]
 800d7c8:	1bae      	subs	r6, r5, r6
 800d7ca:	42b7      	cmp	r7, r6
 800d7cc:	4602      	mov	r2, r0
 800d7ce:	460b      	mov	r3, r1
 800d7d0:	d135      	bne.n	800d83e <_dtoa_r+0x6e6>
 800d7d2:	f7f2 fd5b 	bl	800028c <__adddf3>
 800d7d6:	4642      	mov	r2, r8
 800d7d8:	464b      	mov	r3, r9
 800d7da:	4606      	mov	r6, r0
 800d7dc:	460f      	mov	r7, r1
 800d7de:	f7f3 f99b 	bl	8000b18 <__aeabi_dcmpgt>
 800d7e2:	b9d0      	cbnz	r0, 800d81a <_dtoa_r+0x6c2>
 800d7e4:	4642      	mov	r2, r8
 800d7e6:	464b      	mov	r3, r9
 800d7e8:	4630      	mov	r0, r6
 800d7ea:	4639      	mov	r1, r7
 800d7ec:	f7f3 f96c 	bl	8000ac8 <__aeabi_dcmpeq>
 800d7f0:	b110      	cbz	r0, 800d7f8 <_dtoa_r+0x6a0>
 800d7f2:	f01a 0f01 	tst.w	sl, #1
 800d7f6:	d110      	bne.n	800d81a <_dtoa_r+0x6c2>
 800d7f8:	4620      	mov	r0, r4
 800d7fa:	ee18 1a10 	vmov	r1, s16
 800d7fe:	f000 fe79 	bl	800e4f4 <_Bfree>
 800d802:	2300      	movs	r3, #0
 800d804:	9800      	ldr	r0, [sp, #0]
 800d806:	702b      	strb	r3, [r5, #0]
 800d808:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d80a:	3001      	adds	r0, #1
 800d80c:	6018      	str	r0, [r3, #0]
 800d80e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d810:	2b00      	cmp	r3, #0
 800d812:	f43f acf1 	beq.w	800d1f8 <_dtoa_r+0xa0>
 800d816:	601d      	str	r5, [r3, #0]
 800d818:	e4ee      	b.n	800d1f8 <_dtoa_r+0xa0>
 800d81a:	9f00      	ldr	r7, [sp, #0]
 800d81c:	462b      	mov	r3, r5
 800d81e:	461d      	mov	r5, r3
 800d820:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d824:	2a39      	cmp	r2, #57	; 0x39
 800d826:	d106      	bne.n	800d836 <_dtoa_r+0x6de>
 800d828:	9a01      	ldr	r2, [sp, #4]
 800d82a:	429a      	cmp	r2, r3
 800d82c:	d1f7      	bne.n	800d81e <_dtoa_r+0x6c6>
 800d82e:	9901      	ldr	r1, [sp, #4]
 800d830:	2230      	movs	r2, #48	; 0x30
 800d832:	3701      	adds	r7, #1
 800d834:	700a      	strb	r2, [r1, #0]
 800d836:	781a      	ldrb	r2, [r3, #0]
 800d838:	3201      	adds	r2, #1
 800d83a:	701a      	strb	r2, [r3, #0]
 800d83c:	e790      	b.n	800d760 <_dtoa_r+0x608>
 800d83e:	4ba6      	ldr	r3, [pc, #664]	; (800dad8 <_dtoa_r+0x980>)
 800d840:	2200      	movs	r2, #0
 800d842:	f7f2 fed9 	bl	80005f8 <__aeabi_dmul>
 800d846:	2200      	movs	r2, #0
 800d848:	2300      	movs	r3, #0
 800d84a:	4606      	mov	r6, r0
 800d84c:	460f      	mov	r7, r1
 800d84e:	f7f3 f93b 	bl	8000ac8 <__aeabi_dcmpeq>
 800d852:	2800      	cmp	r0, #0
 800d854:	d09d      	beq.n	800d792 <_dtoa_r+0x63a>
 800d856:	e7cf      	b.n	800d7f8 <_dtoa_r+0x6a0>
 800d858:	9a08      	ldr	r2, [sp, #32]
 800d85a:	2a00      	cmp	r2, #0
 800d85c:	f000 80d7 	beq.w	800da0e <_dtoa_r+0x8b6>
 800d860:	9a06      	ldr	r2, [sp, #24]
 800d862:	2a01      	cmp	r2, #1
 800d864:	f300 80ba 	bgt.w	800d9dc <_dtoa_r+0x884>
 800d868:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d86a:	2a00      	cmp	r2, #0
 800d86c:	f000 80b2 	beq.w	800d9d4 <_dtoa_r+0x87c>
 800d870:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d874:	9e07      	ldr	r6, [sp, #28]
 800d876:	9d04      	ldr	r5, [sp, #16]
 800d878:	9a04      	ldr	r2, [sp, #16]
 800d87a:	441a      	add	r2, r3
 800d87c:	9204      	str	r2, [sp, #16]
 800d87e:	9a05      	ldr	r2, [sp, #20]
 800d880:	2101      	movs	r1, #1
 800d882:	441a      	add	r2, r3
 800d884:	4620      	mov	r0, r4
 800d886:	9205      	str	r2, [sp, #20]
 800d888:	f000 ff36 	bl	800e6f8 <__i2b>
 800d88c:	4607      	mov	r7, r0
 800d88e:	2d00      	cmp	r5, #0
 800d890:	dd0c      	ble.n	800d8ac <_dtoa_r+0x754>
 800d892:	9b05      	ldr	r3, [sp, #20]
 800d894:	2b00      	cmp	r3, #0
 800d896:	dd09      	ble.n	800d8ac <_dtoa_r+0x754>
 800d898:	42ab      	cmp	r3, r5
 800d89a:	9a04      	ldr	r2, [sp, #16]
 800d89c:	bfa8      	it	ge
 800d89e:	462b      	movge	r3, r5
 800d8a0:	1ad2      	subs	r2, r2, r3
 800d8a2:	9204      	str	r2, [sp, #16]
 800d8a4:	9a05      	ldr	r2, [sp, #20]
 800d8a6:	1aed      	subs	r5, r5, r3
 800d8a8:	1ad3      	subs	r3, r2, r3
 800d8aa:	9305      	str	r3, [sp, #20]
 800d8ac:	9b07      	ldr	r3, [sp, #28]
 800d8ae:	b31b      	cbz	r3, 800d8f8 <_dtoa_r+0x7a0>
 800d8b0:	9b08      	ldr	r3, [sp, #32]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	f000 80af 	beq.w	800da16 <_dtoa_r+0x8be>
 800d8b8:	2e00      	cmp	r6, #0
 800d8ba:	dd13      	ble.n	800d8e4 <_dtoa_r+0x78c>
 800d8bc:	4639      	mov	r1, r7
 800d8be:	4632      	mov	r2, r6
 800d8c0:	4620      	mov	r0, r4
 800d8c2:	f000 ffd9 	bl	800e878 <__pow5mult>
 800d8c6:	ee18 2a10 	vmov	r2, s16
 800d8ca:	4601      	mov	r1, r0
 800d8cc:	4607      	mov	r7, r0
 800d8ce:	4620      	mov	r0, r4
 800d8d0:	f000 ff28 	bl	800e724 <__multiply>
 800d8d4:	ee18 1a10 	vmov	r1, s16
 800d8d8:	4680      	mov	r8, r0
 800d8da:	4620      	mov	r0, r4
 800d8dc:	f000 fe0a 	bl	800e4f4 <_Bfree>
 800d8e0:	ee08 8a10 	vmov	s16, r8
 800d8e4:	9b07      	ldr	r3, [sp, #28]
 800d8e6:	1b9a      	subs	r2, r3, r6
 800d8e8:	d006      	beq.n	800d8f8 <_dtoa_r+0x7a0>
 800d8ea:	ee18 1a10 	vmov	r1, s16
 800d8ee:	4620      	mov	r0, r4
 800d8f0:	f000 ffc2 	bl	800e878 <__pow5mult>
 800d8f4:	ee08 0a10 	vmov	s16, r0
 800d8f8:	2101      	movs	r1, #1
 800d8fa:	4620      	mov	r0, r4
 800d8fc:	f000 fefc 	bl	800e6f8 <__i2b>
 800d900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d902:	2b00      	cmp	r3, #0
 800d904:	4606      	mov	r6, r0
 800d906:	f340 8088 	ble.w	800da1a <_dtoa_r+0x8c2>
 800d90a:	461a      	mov	r2, r3
 800d90c:	4601      	mov	r1, r0
 800d90e:	4620      	mov	r0, r4
 800d910:	f000 ffb2 	bl	800e878 <__pow5mult>
 800d914:	9b06      	ldr	r3, [sp, #24]
 800d916:	2b01      	cmp	r3, #1
 800d918:	4606      	mov	r6, r0
 800d91a:	f340 8081 	ble.w	800da20 <_dtoa_r+0x8c8>
 800d91e:	f04f 0800 	mov.w	r8, #0
 800d922:	6933      	ldr	r3, [r6, #16]
 800d924:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d928:	6918      	ldr	r0, [r3, #16]
 800d92a:	f000 fe95 	bl	800e658 <__hi0bits>
 800d92e:	f1c0 0020 	rsb	r0, r0, #32
 800d932:	9b05      	ldr	r3, [sp, #20]
 800d934:	4418      	add	r0, r3
 800d936:	f010 001f 	ands.w	r0, r0, #31
 800d93a:	f000 8092 	beq.w	800da62 <_dtoa_r+0x90a>
 800d93e:	f1c0 0320 	rsb	r3, r0, #32
 800d942:	2b04      	cmp	r3, #4
 800d944:	f340 808a 	ble.w	800da5c <_dtoa_r+0x904>
 800d948:	f1c0 001c 	rsb	r0, r0, #28
 800d94c:	9b04      	ldr	r3, [sp, #16]
 800d94e:	4403      	add	r3, r0
 800d950:	9304      	str	r3, [sp, #16]
 800d952:	9b05      	ldr	r3, [sp, #20]
 800d954:	4403      	add	r3, r0
 800d956:	4405      	add	r5, r0
 800d958:	9305      	str	r3, [sp, #20]
 800d95a:	9b04      	ldr	r3, [sp, #16]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	dd07      	ble.n	800d970 <_dtoa_r+0x818>
 800d960:	ee18 1a10 	vmov	r1, s16
 800d964:	461a      	mov	r2, r3
 800d966:	4620      	mov	r0, r4
 800d968:	f000 ffe0 	bl	800e92c <__lshift>
 800d96c:	ee08 0a10 	vmov	s16, r0
 800d970:	9b05      	ldr	r3, [sp, #20]
 800d972:	2b00      	cmp	r3, #0
 800d974:	dd05      	ble.n	800d982 <_dtoa_r+0x82a>
 800d976:	4631      	mov	r1, r6
 800d978:	461a      	mov	r2, r3
 800d97a:	4620      	mov	r0, r4
 800d97c:	f000 ffd6 	bl	800e92c <__lshift>
 800d980:	4606      	mov	r6, r0
 800d982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d984:	2b00      	cmp	r3, #0
 800d986:	d06e      	beq.n	800da66 <_dtoa_r+0x90e>
 800d988:	ee18 0a10 	vmov	r0, s16
 800d98c:	4631      	mov	r1, r6
 800d98e:	f001 f83d 	bl	800ea0c <__mcmp>
 800d992:	2800      	cmp	r0, #0
 800d994:	da67      	bge.n	800da66 <_dtoa_r+0x90e>
 800d996:	9b00      	ldr	r3, [sp, #0]
 800d998:	3b01      	subs	r3, #1
 800d99a:	ee18 1a10 	vmov	r1, s16
 800d99e:	9300      	str	r3, [sp, #0]
 800d9a0:	220a      	movs	r2, #10
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	4620      	mov	r0, r4
 800d9a6:	f000 fdc7 	bl	800e538 <__multadd>
 800d9aa:	9b08      	ldr	r3, [sp, #32]
 800d9ac:	ee08 0a10 	vmov	s16, r0
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	f000 81b1 	beq.w	800dd18 <_dtoa_r+0xbc0>
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	4639      	mov	r1, r7
 800d9ba:	220a      	movs	r2, #10
 800d9bc:	4620      	mov	r0, r4
 800d9be:	f000 fdbb 	bl	800e538 <__multadd>
 800d9c2:	9b02      	ldr	r3, [sp, #8]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	4607      	mov	r7, r0
 800d9c8:	f300 808e 	bgt.w	800dae8 <_dtoa_r+0x990>
 800d9cc:	9b06      	ldr	r3, [sp, #24]
 800d9ce:	2b02      	cmp	r3, #2
 800d9d0:	dc51      	bgt.n	800da76 <_dtoa_r+0x91e>
 800d9d2:	e089      	b.n	800dae8 <_dtoa_r+0x990>
 800d9d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d9d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d9da:	e74b      	b.n	800d874 <_dtoa_r+0x71c>
 800d9dc:	9b03      	ldr	r3, [sp, #12]
 800d9de:	1e5e      	subs	r6, r3, #1
 800d9e0:	9b07      	ldr	r3, [sp, #28]
 800d9e2:	42b3      	cmp	r3, r6
 800d9e4:	bfbf      	itttt	lt
 800d9e6:	9b07      	ldrlt	r3, [sp, #28]
 800d9e8:	9607      	strlt	r6, [sp, #28]
 800d9ea:	1af2      	sublt	r2, r6, r3
 800d9ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d9ee:	bfb6      	itet	lt
 800d9f0:	189b      	addlt	r3, r3, r2
 800d9f2:	1b9e      	subge	r6, r3, r6
 800d9f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d9f6:	9b03      	ldr	r3, [sp, #12]
 800d9f8:	bfb8      	it	lt
 800d9fa:	2600      	movlt	r6, #0
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	bfb7      	itett	lt
 800da00:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800da04:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800da08:	1a9d      	sublt	r5, r3, r2
 800da0a:	2300      	movlt	r3, #0
 800da0c:	e734      	b.n	800d878 <_dtoa_r+0x720>
 800da0e:	9e07      	ldr	r6, [sp, #28]
 800da10:	9d04      	ldr	r5, [sp, #16]
 800da12:	9f08      	ldr	r7, [sp, #32]
 800da14:	e73b      	b.n	800d88e <_dtoa_r+0x736>
 800da16:	9a07      	ldr	r2, [sp, #28]
 800da18:	e767      	b.n	800d8ea <_dtoa_r+0x792>
 800da1a:	9b06      	ldr	r3, [sp, #24]
 800da1c:	2b01      	cmp	r3, #1
 800da1e:	dc18      	bgt.n	800da52 <_dtoa_r+0x8fa>
 800da20:	f1ba 0f00 	cmp.w	sl, #0
 800da24:	d115      	bne.n	800da52 <_dtoa_r+0x8fa>
 800da26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800da2a:	b993      	cbnz	r3, 800da52 <_dtoa_r+0x8fa>
 800da2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800da30:	0d1b      	lsrs	r3, r3, #20
 800da32:	051b      	lsls	r3, r3, #20
 800da34:	b183      	cbz	r3, 800da58 <_dtoa_r+0x900>
 800da36:	9b04      	ldr	r3, [sp, #16]
 800da38:	3301      	adds	r3, #1
 800da3a:	9304      	str	r3, [sp, #16]
 800da3c:	9b05      	ldr	r3, [sp, #20]
 800da3e:	3301      	adds	r3, #1
 800da40:	9305      	str	r3, [sp, #20]
 800da42:	f04f 0801 	mov.w	r8, #1
 800da46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da48:	2b00      	cmp	r3, #0
 800da4a:	f47f af6a 	bne.w	800d922 <_dtoa_r+0x7ca>
 800da4e:	2001      	movs	r0, #1
 800da50:	e76f      	b.n	800d932 <_dtoa_r+0x7da>
 800da52:	f04f 0800 	mov.w	r8, #0
 800da56:	e7f6      	b.n	800da46 <_dtoa_r+0x8ee>
 800da58:	4698      	mov	r8, r3
 800da5a:	e7f4      	b.n	800da46 <_dtoa_r+0x8ee>
 800da5c:	f43f af7d 	beq.w	800d95a <_dtoa_r+0x802>
 800da60:	4618      	mov	r0, r3
 800da62:	301c      	adds	r0, #28
 800da64:	e772      	b.n	800d94c <_dtoa_r+0x7f4>
 800da66:	9b03      	ldr	r3, [sp, #12]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	dc37      	bgt.n	800dadc <_dtoa_r+0x984>
 800da6c:	9b06      	ldr	r3, [sp, #24]
 800da6e:	2b02      	cmp	r3, #2
 800da70:	dd34      	ble.n	800dadc <_dtoa_r+0x984>
 800da72:	9b03      	ldr	r3, [sp, #12]
 800da74:	9302      	str	r3, [sp, #8]
 800da76:	9b02      	ldr	r3, [sp, #8]
 800da78:	b96b      	cbnz	r3, 800da96 <_dtoa_r+0x93e>
 800da7a:	4631      	mov	r1, r6
 800da7c:	2205      	movs	r2, #5
 800da7e:	4620      	mov	r0, r4
 800da80:	f000 fd5a 	bl	800e538 <__multadd>
 800da84:	4601      	mov	r1, r0
 800da86:	4606      	mov	r6, r0
 800da88:	ee18 0a10 	vmov	r0, s16
 800da8c:	f000 ffbe 	bl	800ea0c <__mcmp>
 800da90:	2800      	cmp	r0, #0
 800da92:	f73f adbb 	bgt.w	800d60c <_dtoa_r+0x4b4>
 800da96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da98:	9d01      	ldr	r5, [sp, #4]
 800da9a:	43db      	mvns	r3, r3
 800da9c:	9300      	str	r3, [sp, #0]
 800da9e:	f04f 0800 	mov.w	r8, #0
 800daa2:	4631      	mov	r1, r6
 800daa4:	4620      	mov	r0, r4
 800daa6:	f000 fd25 	bl	800e4f4 <_Bfree>
 800daaa:	2f00      	cmp	r7, #0
 800daac:	f43f aea4 	beq.w	800d7f8 <_dtoa_r+0x6a0>
 800dab0:	f1b8 0f00 	cmp.w	r8, #0
 800dab4:	d005      	beq.n	800dac2 <_dtoa_r+0x96a>
 800dab6:	45b8      	cmp	r8, r7
 800dab8:	d003      	beq.n	800dac2 <_dtoa_r+0x96a>
 800daba:	4641      	mov	r1, r8
 800dabc:	4620      	mov	r0, r4
 800dabe:	f000 fd19 	bl	800e4f4 <_Bfree>
 800dac2:	4639      	mov	r1, r7
 800dac4:	4620      	mov	r0, r4
 800dac6:	f000 fd15 	bl	800e4f4 <_Bfree>
 800daca:	e695      	b.n	800d7f8 <_dtoa_r+0x6a0>
 800dacc:	2600      	movs	r6, #0
 800dace:	4637      	mov	r7, r6
 800dad0:	e7e1      	b.n	800da96 <_dtoa_r+0x93e>
 800dad2:	9700      	str	r7, [sp, #0]
 800dad4:	4637      	mov	r7, r6
 800dad6:	e599      	b.n	800d60c <_dtoa_r+0x4b4>
 800dad8:	40240000 	.word	0x40240000
 800dadc:	9b08      	ldr	r3, [sp, #32]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	f000 80ca 	beq.w	800dc78 <_dtoa_r+0xb20>
 800dae4:	9b03      	ldr	r3, [sp, #12]
 800dae6:	9302      	str	r3, [sp, #8]
 800dae8:	2d00      	cmp	r5, #0
 800daea:	dd05      	ble.n	800daf8 <_dtoa_r+0x9a0>
 800daec:	4639      	mov	r1, r7
 800daee:	462a      	mov	r2, r5
 800daf0:	4620      	mov	r0, r4
 800daf2:	f000 ff1b 	bl	800e92c <__lshift>
 800daf6:	4607      	mov	r7, r0
 800daf8:	f1b8 0f00 	cmp.w	r8, #0
 800dafc:	d05b      	beq.n	800dbb6 <_dtoa_r+0xa5e>
 800dafe:	6879      	ldr	r1, [r7, #4]
 800db00:	4620      	mov	r0, r4
 800db02:	f000 fcb7 	bl	800e474 <_Balloc>
 800db06:	4605      	mov	r5, r0
 800db08:	b928      	cbnz	r0, 800db16 <_dtoa_r+0x9be>
 800db0a:	4b87      	ldr	r3, [pc, #540]	; (800dd28 <_dtoa_r+0xbd0>)
 800db0c:	4602      	mov	r2, r0
 800db0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800db12:	f7ff bb3b 	b.w	800d18c <_dtoa_r+0x34>
 800db16:	693a      	ldr	r2, [r7, #16]
 800db18:	3202      	adds	r2, #2
 800db1a:	0092      	lsls	r2, r2, #2
 800db1c:	f107 010c 	add.w	r1, r7, #12
 800db20:	300c      	adds	r0, #12
 800db22:	f000 fc8d 	bl	800e440 <memcpy>
 800db26:	2201      	movs	r2, #1
 800db28:	4629      	mov	r1, r5
 800db2a:	4620      	mov	r0, r4
 800db2c:	f000 fefe 	bl	800e92c <__lshift>
 800db30:	9b01      	ldr	r3, [sp, #4]
 800db32:	f103 0901 	add.w	r9, r3, #1
 800db36:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800db3a:	4413      	add	r3, r2
 800db3c:	9305      	str	r3, [sp, #20]
 800db3e:	f00a 0301 	and.w	r3, sl, #1
 800db42:	46b8      	mov	r8, r7
 800db44:	9304      	str	r3, [sp, #16]
 800db46:	4607      	mov	r7, r0
 800db48:	4631      	mov	r1, r6
 800db4a:	ee18 0a10 	vmov	r0, s16
 800db4e:	f7ff fa77 	bl	800d040 <quorem>
 800db52:	4641      	mov	r1, r8
 800db54:	9002      	str	r0, [sp, #8]
 800db56:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800db5a:	ee18 0a10 	vmov	r0, s16
 800db5e:	f000 ff55 	bl	800ea0c <__mcmp>
 800db62:	463a      	mov	r2, r7
 800db64:	9003      	str	r0, [sp, #12]
 800db66:	4631      	mov	r1, r6
 800db68:	4620      	mov	r0, r4
 800db6a:	f000 ff6b 	bl	800ea44 <__mdiff>
 800db6e:	68c2      	ldr	r2, [r0, #12]
 800db70:	f109 3bff 	add.w	fp, r9, #4294967295
 800db74:	4605      	mov	r5, r0
 800db76:	bb02      	cbnz	r2, 800dbba <_dtoa_r+0xa62>
 800db78:	4601      	mov	r1, r0
 800db7a:	ee18 0a10 	vmov	r0, s16
 800db7e:	f000 ff45 	bl	800ea0c <__mcmp>
 800db82:	4602      	mov	r2, r0
 800db84:	4629      	mov	r1, r5
 800db86:	4620      	mov	r0, r4
 800db88:	9207      	str	r2, [sp, #28]
 800db8a:	f000 fcb3 	bl	800e4f4 <_Bfree>
 800db8e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800db92:	ea43 0102 	orr.w	r1, r3, r2
 800db96:	9b04      	ldr	r3, [sp, #16]
 800db98:	430b      	orrs	r3, r1
 800db9a:	464d      	mov	r5, r9
 800db9c:	d10f      	bne.n	800dbbe <_dtoa_r+0xa66>
 800db9e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dba2:	d02a      	beq.n	800dbfa <_dtoa_r+0xaa2>
 800dba4:	9b03      	ldr	r3, [sp, #12]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	dd02      	ble.n	800dbb0 <_dtoa_r+0xa58>
 800dbaa:	9b02      	ldr	r3, [sp, #8]
 800dbac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800dbb0:	f88b a000 	strb.w	sl, [fp]
 800dbb4:	e775      	b.n	800daa2 <_dtoa_r+0x94a>
 800dbb6:	4638      	mov	r0, r7
 800dbb8:	e7ba      	b.n	800db30 <_dtoa_r+0x9d8>
 800dbba:	2201      	movs	r2, #1
 800dbbc:	e7e2      	b.n	800db84 <_dtoa_r+0xa2c>
 800dbbe:	9b03      	ldr	r3, [sp, #12]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	db04      	blt.n	800dbce <_dtoa_r+0xa76>
 800dbc4:	9906      	ldr	r1, [sp, #24]
 800dbc6:	430b      	orrs	r3, r1
 800dbc8:	9904      	ldr	r1, [sp, #16]
 800dbca:	430b      	orrs	r3, r1
 800dbcc:	d122      	bne.n	800dc14 <_dtoa_r+0xabc>
 800dbce:	2a00      	cmp	r2, #0
 800dbd0:	ddee      	ble.n	800dbb0 <_dtoa_r+0xa58>
 800dbd2:	ee18 1a10 	vmov	r1, s16
 800dbd6:	2201      	movs	r2, #1
 800dbd8:	4620      	mov	r0, r4
 800dbda:	f000 fea7 	bl	800e92c <__lshift>
 800dbde:	4631      	mov	r1, r6
 800dbe0:	ee08 0a10 	vmov	s16, r0
 800dbe4:	f000 ff12 	bl	800ea0c <__mcmp>
 800dbe8:	2800      	cmp	r0, #0
 800dbea:	dc03      	bgt.n	800dbf4 <_dtoa_r+0xa9c>
 800dbec:	d1e0      	bne.n	800dbb0 <_dtoa_r+0xa58>
 800dbee:	f01a 0f01 	tst.w	sl, #1
 800dbf2:	d0dd      	beq.n	800dbb0 <_dtoa_r+0xa58>
 800dbf4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dbf8:	d1d7      	bne.n	800dbaa <_dtoa_r+0xa52>
 800dbfa:	2339      	movs	r3, #57	; 0x39
 800dbfc:	f88b 3000 	strb.w	r3, [fp]
 800dc00:	462b      	mov	r3, r5
 800dc02:	461d      	mov	r5, r3
 800dc04:	3b01      	subs	r3, #1
 800dc06:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800dc0a:	2a39      	cmp	r2, #57	; 0x39
 800dc0c:	d071      	beq.n	800dcf2 <_dtoa_r+0xb9a>
 800dc0e:	3201      	adds	r2, #1
 800dc10:	701a      	strb	r2, [r3, #0]
 800dc12:	e746      	b.n	800daa2 <_dtoa_r+0x94a>
 800dc14:	2a00      	cmp	r2, #0
 800dc16:	dd07      	ble.n	800dc28 <_dtoa_r+0xad0>
 800dc18:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dc1c:	d0ed      	beq.n	800dbfa <_dtoa_r+0xaa2>
 800dc1e:	f10a 0301 	add.w	r3, sl, #1
 800dc22:	f88b 3000 	strb.w	r3, [fp]
 800dc26:	e73c      	b.n	800daa2 <_dtoa_r+0x94a>
 800dc28:	9b05      	ldr	r3, [sp, #20]
 800dc2a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800dc2e:	4599      	cmp	r9, r3
 800dc30:	d047      	beq.n	800dcc2 <_dtoa_r+0xb6a>
 800dc32:	ee18 1a10 	vmov	r1, s16
 800dc36:	2300      	movs	r3, #0
 800dc38:	220a      	movs	r2, #10
 800dc3a:	4620      	mov	r0, r4
 800dc3c:	f000 fc7c 	bl	800e538 <__multadd>
 800dc40:	45b8      	cmp	r8, r7
 800dc42:	ee08 0a10 	vmov	s16, r0
 800dc46:	f04f 0300 	mov.w	r3, #0
 800dc4a:	f04f 020a 	mov.w	r2, #10
 800dc4e:	4641      	mov	r1, r8
 800dc50:	4620      	mov	r0, r4
 800dc52:	d106      	bne.n	800dc62 <_dtoa_r+0xb0a>
 800dc54:	f000 fc70 	bl	800e538 <__multadd>
 800dc58:	4680      	mov	r8, r0
 800dc5a:	4607      	mov	r7, r0
 800dc5c:	f109 0901 	add.w	r9, r9, #1
 800dc60:	e772      	b.n	800db48 <_dtoa_r+0x9f0>
 800dc62:	f000 fc69 	bl	800e538 <__multadd>
 800dc66:	4639      	mov	r1, r7
 800dc68:	4680      	mov	r8, r0
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	220a      	movs	r2, #10
 800dc6e:	4620      	mov	r0, r4
 800dc70:	f000 fc62 	bl	800e538 <__multadd>
 800dc74:	4607      	mov	r7, r0
 800dc76:	e7f1      	b.n	800dc5c <_dtoa_r+0xb04>
 800dc78:	9b03      	ldr	r3, [sp, #12]
 800dc7a:	9302      	str	r3, [sp, #8]
 800dc7c:	9d01      	ldr	r5, [sp, #4]
 800dc7e:	ee18 0a10 	vmov	r0, s16
 800dc82:	4631      	mov	r1, r6
 800dc84:	f7ff f9dc 	bl	800d040 <quorem>
 800dc88:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dc8c:	9b01      	ldr	r3, [sp, #4]
 800dc8e:	f805 ab01 	strb.w	sl, [r5], #1
 800dc92:	1aea      	subs	r2, r5, r3
 800dc94:	9b02      	ldr	r3, [sp, #8]
 800dc96:	4293      	cmp	r3, r2
 800dc98:	dd09      	ble.n	800dcae <_dtoa_r+0xb56>
 800dc9a:	ee18 1a10 	vmov	r1, s16
 800dc9e:	2300      	movs	r3, #0
 800dca0:	220a      	movs	r2, #10
 800dca2:	4620      	mov	r0, r4
 800dca4:	f000 fc48 	bl	800e538 <__multadd>
 800dca8:	ee08 0a10 	vmov	s16, r0
 800dcac:	e7e7      	b.n	800dc7e <_dtoa_r+0xb26>
 800dcae:	9b02      	ldr	r3, [sp, #8]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	bfc8      	it	gt
 800dcb4:	461d      	movgt	r5, r3
 800dcb6:	9b01      	ldr	r3, [sp, #4]
 800dcb8:	bfd8      	it	le
 800dcba:	2501      	movle	r5, #1
 800dcbc:	441d      	add	r5, r3
 800dcbe:	f04f 0800 	mov.w	r8, #0
 800dcc2:	ee18 1a10 	vmov	r1, s16
 800dcc6:	2201      	movs	r2, #1
 800dcc8:	4620      	mov	r0, r4
 800dcca:	f000 fe2f 	bl	800e92c <__lshift>
 800dcce:	4631      	mov	r1, r6
 800dcd0:	ee08 0a10 	vmov	s16, r0
 800dcd4:	f000 fe9a 	bl	800ea0c <__mcmp>
 800dcd8:	2800      	cmp	r0, #0
 800dcda:	dc91      	bgt.n	800dc00 <_dtoa_r+0xaa8>
 800dcdc:	d102      	bne.n	800dce4 <_dtoa_r+0xb8c>
 800dcde:	f01a 0f01 	tst.w	sl, #1
 800dce2:	d18d      	bne.n	800dc00 <_dtoa_r+0xaa8>
 800dce4:	462b      	mov	r3, r5
 800dce6:	461d      	mov	r5, r3
 800dce8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dcec:	2a30      	cmp	r2, #48	; 0x30
 800dcee:	d0fa      	beq.n	800dce6 <_dtoa_r+0xb8e>
 800dcf0:	e6d7      	b.n	800daa2 <_dtoa_r+0x94a>
 800dcf2:	9a01      	ldr	r2, [sp, #4]
 800dcf4:	429a      	cmp	r2, r3
 800dcf6:	d184      	bne.n	800dc02 <_dtoa_r+0xaaa>
 800dcf8:	9b00      	ldr	r3, [sp, #0]
 800dcfa:	3301      	adds	r3, #1
 800dcfc:	9300      	str	r3, [sp, #0]
 800dcfe:	2331      	movs	r3, #49	; 0x31
 800dd00:	7013      	strb	r3, [r2, #0]
 800dd02:	e6ce      	b.n	800daa2 <_dtoa_r+0x94a>
 800dd04:	4b09      	ldr	r3, [pc, #36]	; (800dd2c <_dtoa_r+0xbd4>)
 800dd06:	f7ff ba95 	b.w	800d234 <_dtoa_r+0xdc>
 800dd0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	f47f aa6e 	bne.w	800d1ee <_dtoa_r+0x96>
 800dd12:	4b07      	ldr	r3, [pc, #28]	; (800dd30 <_dtoa_r+0xbd8>)
 800dd14:	f7ff ba8e 	b.w	800d234 <_dtoa_r+0xdc>
 800dd18:	9b02      	ldr	r3, [sp, #8]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	dcae      	bgt.n	800dc7c <_dtoa_r+0xb24>
 800dd1e:	9b06      	ldr	r3, [sp, #24]
 800dd20:	2b02      	cmp	r3, #2
 800dd22:	f73f aea8 	bgt.w	800da76 <_dtoa_r+0x91e>
 800dd26:	e7a9      	b.n	800dc7c <_dtoa_r+0xb24>
 800dd28:	0800ff30 	.word	0x0800ff30
 800dd2c:	0800fd30 	.word	0x0800fd30
 800dd30:	0800feb1 	.word	0x0800feb1

0800dd34 <rshift>:
 800dd34:	6903      	ldr	r3, [r0, #16]
 800dd36:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dd3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd3e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dd42:	f100 0414 	add.w	r4, r0, #20
 800dd46:	dd45      	ble.n	800ddd4 <rshift+0xa0>
 800dd48:	f011 011f 	ands.w	r1, r1, #31
 800dd4c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dd50:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dd54:	d10c      	bne.n	800dd70 <rshift+0x3c>
 800dd56:	f100 0710 	add.w	r7, r0, #16
 800dd5a:	4629      	mov	r1, r5
 800dd5c:	42b1      	cmp	r1, r6
 800dd5e:	d334      	bcc.n	800ddca <rshift+0x96>
 800dd60:	1a9b      	subs	r3, r3, r2
 800dd62:	009b      	lsls	r3, r3, #2
 800dd64:	1eea      	subs	r2, r5, #3
 800dd66:	4296      	cmp	r6, r2
 800dd68:	bf38      	it	cc
 800dd6a:	2300      	movcc	r3, #0
 800dd6c:	4423      	add	r3, r4
 800dd6e:	e015      	b.n	800dd9c <rshift+0x68>
 800dd70:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dd74:	f1c1 0820 	rsb	r8, r1, #32
 800dd78:	40cf      	lsrs	r7, r1
 800dd7a:	f105 0e04 	add.w	lr, r5, #4
 800dd7e:	46a1      	mov	r9, r4
 800dd80:	4576      	cmp	r6, lr
 800dd82:	46f4      	mov	ip, lr
 800dd84:	d815      	bhi.n	800ddb2 <rshift+0x7e>
 800dd86:	1a9a      	subs	r2, r3, r2
 800dd88:	0092      	lsls	r2, r2, #2
 800dd8a:	3a04      	subs	r2, #4
 800dd8c:	3501      	adds	r5, #1
 800dd8e:	42ae      	cmp	r6, r5
 800dd90:	bf38      	it	cc
 800dd92:	2200      	movcc	r2, #0
 800dd94:	18a3      	adds	r3, r4, r2
 800dd96:	50a7      	str	r7, [r4, r2]
 800dd98:	b107      	cbz	r7, 800dd9c <rshift+0x68>
 800dd9a:	3304      	adds	r3, #4
 800dd9c:	1b1a      	subs	r2, r3, r4
 800dd9e:	42a3      	cmp	r3, r4
 800dda0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dda4:	bf08      	it	eq
 800dda6:	2300      	moveq	r3, #0
 800dda8:	6102      	str	r2, [r0, #16]
 800ddaa:	bf08      	it	eq
 800ddac:	6143      	streq	r3, [r0, #20]
 800ddae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddb2:	f8dc c000 	ldr.w	ip, [ip]
 800ddb6:	fa0c fc08 	lsl.w	ip, ip, r8
 800ddba:	ea4c 0707 	orr.w	r7, ip, r7
 800ddbe:	f849 7b04 	str.w	r7, [r9], #4
 800ddc2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ddc6:	40cf      	lsrs	r7, r1
 800ddc8:	e7da      	b.n	800dd80 <rshift+0x4c>
 800ddca:	f851 cb04 	ldr.w	ip, [r1], #4
 800ddce:	f847 cf04 	str.w	ip, [r7, #4]!
 800ddd2:	e7c3      	b.n	800dd5c <rshift+0x28>
 800ddd4:	4623      	mov	r3, r4
 800ddd6:	e7e1      	b.n	800dd9c <rshift+0x68>

0800ddd8 <__hexdig_fun>:
 800ddd8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800dddc:	2b09      	cmp	r3, #9
 800ddde:	d802      	bhi.n	800dde6 <__hexdig_fun+0xe>
 800dde0:	3820      	subs	r0, #32
 800dde2:	b2c0      	uxtb	r0, r0
 800dde4:	4770      	bx	lr
 800dde6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ddea:	2b05      	cmp	r3, #5
 800ddec:	d801      	bhi.n	800ddf2 <__hexdig_fun+0x1a>
 800ddee:	3847      	subs	r0, #71	; 0x47
 800ddf0:	e7f7      	b.n	800dde2 <__hexdig_fun+0xa>
 800ddf2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ddf6:	2b05      	cmp	r3, #5
 800ddf8:	d801      	bhi.n	800ddfe <__hexdig_fun+0x26>
 800ddfa:	3827      	subs	r0, #39	; 0x27
 800ddfc:	e7f1      	b.n	800dde2 <__hexdig_fun+0xa>
 800ddfe:	2000      	movs	r0, #0
 800de00:	4770      	bx	lr
	...

0800de04 <__gethex>:
 800de04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de08:	ed2d 8b02 	vpush	{d8}
 800de0c:	b089      	sub	sp, #36	; 0x24
 800de0e:	ee08 0a10 	vmov	s16, r0
 800de12:	9304      	str	r3, [sp, #16]
 800de14:	4bb4      	ldr	r3, [pc, #720]	; (800e0e8 <__gethex+0x2e4>)
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	9301      	str	r3, [sp, #4]
 800de1a:	4618      	mov	r0, r3
 800de1c:	468b      	mov	fp, r1
 800de1e:	4690      	mov	r8, r2
 800de20:	f7f2 f9d6 	bl	80001d0 <strlen>
 800de24:	9b01      	ldr	r3, [sp, #4]
 800de26:	f8db 2000 	ldr.w	r2, [fp]
 800de2a:	4403      	add	r3, r0
 800de2c:	4682      	mov	sl, r0
 800de2e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800de32:	9305      	str	r3, [sp, #20]
 800de34:	1c93      	adds	r3, r2, #2
 800de36:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800de3a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800de3e:	32fe      	adds	r2, #254	; 0xfe
 800de40:	18d1      	adds	r1, r2, r3
 800de42:	461f      	mov	r7, r3
 800de44:	f813 0b01 	ldrb.w	r0, [r3], #1
 800de48:	9100      	str	r1, [sp, #0]
 800de4a:	2830      	cmp	r0, #48	; 0x30
 800de4c:	d0f8      	beq.n	800de40 <__gethex+0x3c>
 800de4e:	f7ff ffc3 	bl	800ddd8 <__hexdig_fun>
 800de52:	4604      	mov	r4, r0
 800de54:	2800      	cmp	r0, #0
 800de56:	d13a      	bne.n	800dece <__gethex+0xca>
 800de58:	9901      	ldr	r1, [sp, #4]
 800de5a:	4652      	mov	r2, sl
 800de5c:	4638      	mov	r0, r7
 800de5e:	f001 f943 	bl	800f0e8 <strncmp>
 800de62:	4605      	mov	r5, r0
 800de64:	2800      	cmp	r0, #0
 800de66:	d168      	bne.n	800df3a <__gethex+0x136>
 800de68:	f817 000a 	ldrb.w	r0, [r7, sl]
 800de6c:	eb07 060a 	add.w	r6, r7, sl
 800de70:	f7ff ffb2 	bl	800ddd8 <__hexdig_fun>
 800de74:	2800      	cmp	r0, #0
 800de76:	d062      	beq.n	800df3e <__gethex+0x13a>
 800de78:	4633      	mov	r3, r6
 800de7a:	7818      	ldrb	r0, [r3, #0]
 800de7c:	2830      	cmp	r0, #48	; 0x30
 800de7e:	461f      	mov	r7, r3
 800de80:	f103 0301 	add.w	r3, r3, #1
 800de84:	d0f9      	beq.n	800de7a <__gethex+0x76>
 800de86:	f7ff ffa7 	bl	800ddd8 <__hexdig_fun>
 800de8a:	2301      	movs	r3, #1
 800de8c:	fab0 f480 	clz	r4, r0
 800de90:	0964      	lsrs	r4, r4, #5
 800de92:	4635      	mov	r5, r6
 800de94:	9300      	str	r3, [sp, #0]
 800de96:	463a      	mov	r2, r7
 800de98:	4616      	mov	r6, r2
 800de9a:	3201      	adds	r2, #1
 800de9c:	7830      	ldrb	r0, [r6, #0]
 800de9e:	f7ff ff9b 	bl	800ddd8 <__hexdig_fun>
 800dea2:	2800      	cmp	r0, #0
 800dea4:	d1f8      	bne.n	800de98 <__gethex+0x94>
 800dea6:	9901      	ldr	r1, [sp, #4]
 800dea8:	4652      	mov	r2, sl
 800deaa:	4630      	mov	r0, r6
 800deac:	f001 f91c 	bl	800f0e8 <strncmp>
 800deb0:	b980      	cbnz	r0, 800ded4 <__gethex+0xd0>
 800deb2:	b94d      	cbnz	r5, 800dec8 <__gethex+0xc4>
 800deb4:	eb06 050a 	add.w	r5, r6, sl
 800deb8:	462a      	mov	r2, r5
 800deba:	4616      	mov	r6, r2
 800debc:	3201      	adds	r2, #1
 800debe:	7830      	ldrb	r0, [r6, #0]
 800dec0:	f7ff ff8a 	bl	800ddd8 <__hexdig_fun>
 800dec4:	2800      	cmp	r0, #0
 800dec6:	d1f8      	bne.n	800deba <__gethex+0xb6>
 800dec8:	1bad      	subs	r5, r5, r6
 800deca:	00ad      	lsls	r5, r5, #2
 800decc:	e004      	b.n	800ded8 <__gethex+0xd4>
 800dece:	2400      	movs	r4, #0
 800ded0:	4625      	mov	r5, r4
 800ded2:	e7e0      	b.n	800de96 <__gethex+0x92>
 800ded4:	2d00      	cmp	r5, #0
 800ded6:	d1f7      	bne.n	800dec8 <__gethex+0xc4>
 800ded8:	7833      	ldrb	r3, [r6, #0]
 800deda:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dede:	2b50      	cmp	r3, #80	; 0x50
 800dee0:	d13b      	bne.n	800df5a <__gethex+0x156>
 800dee2:	7873      	ldrb	r3, [r6, #1]
 800dee4:	2b2b      	cmp	r3, #43	; 0x2b
 800dee6:	d02c      	beq.n	800df42 <__gethex+0x13e>
 800dee8:	2b2d      	cmp	r3, #45	; 0x2d
 800deea:	d02e      	beq.n	800df4a <__gethex+0x146>
 800deec:	1c71      	adds	r1, r6, #1
 800deee:	f04f 0900 	mov.w	r9, #0
 800def2:	7808      	ldrb	r0, [r1, #0]
 800def4:	f7ff ff70 	bl	800ddd8 <__hexdig_fun>
 800def8:	1e43      	subs	r3, r0, #1
 800defa:	b2db      	uxtb	r3, r3
 800defc:	2b18      	cmp	r3, #24
 800defe:	d82c      	bhi.n	800df5a <__gethex+0x156>
 800df00:	f1a0 0210 	sub.w	r2, r0, #16
 800df04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800df08:	f7ff ff66 	bl	800ddd8 <__hexdig_fun>
 800df0c:	1e43      	subs	r3, r0, #1
 800df0e:	b2db      	uxtb	r3, r3
 800df10:	2b18      	cmp	r3, #24
 800df12:	d91d      	bls.n	800df50 <__gethex+0x14c>
 800df14:	f1b9 0f00 	cmp.w	r9, #0
 800df18:	d000      	beq.n	800df1c <__gethex+0x118>
 800df1a:	4252      	negs	r2, r2
 800df1c:	4415      	add	r5, r2
 800df1e:	f8cb 1000 	str.w	r1, [fp]
 800df22:	b1e4      	cbz	r4, 800df5e <__gethex+0x15a>
 800df24:	9b00      	ldr	r3, [sp, #0]
 800df26:	2b00      	cmp	r3, #0
 800df28:	bf14      	ite	ne
 800df2a:	2700      	movne	r7, #0
 800df2c:	2706      	moveq	r7, #6
 800df2e:	4638      	mov	r0, r7
 800df30:	b009      	add	sp, #36	; 0x24
 800df32:	ecbd 8b02 	vpop	{d8}
 800df36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df3a:	463e      	mov	r6, r7
 800df3c:	4625      	mov	r5, r4
 800df3e:	2401      	movs	r4, #1
 800df40:	e7ca      	b.n	800ded8 <__gethex+0xd4>
 800df42:	f04f 0900 	mov.w	r9, #0
 800df46:	1cb1      	adds	r1, r6, #2
 800df48:	e7d3      	b.n	800def2 <__gethex+0xee>
 800df4a:	f04f 0901 	mov.w	r9, #1
 800df4e:	e7fa      	b.n	800df46 <__gethex+0x142>
 800df50:	230a      	movs	r3, #10
 800df52:	fb03 0202 	mla	r2, r3, r2, r0
 800df56:	3a10      	subs	r2, #16
 800df58:	e7d4      	b.n	800df04 <__gethex+0x100>
 800df5a:	4631      	mov	r1, r6
 800df5c:	e7df      	b.n	800df1e <__gethex+0x11a>
 800df5e:	1bf3      	subs	r3, r6, r7
 800df60:	3b01      	subs	r3, #1
 800df62:	4621      	mov	r1, r4
 800df64:	2b07      	cmp	r3, #7
 800df66:	dc0b      	bgt.n	800df80 <__gethex+0x17c>
 800df68:	ee18 0a10 	vmov	r0, s16
 800df6c:	f000 fa82 	bl	800e474 <_Balloc>
 800df70:	4604      	mov	r4, r0
 800df72:	b940      	cbnz	r0, 800df86 <__gethex+0x182>
 800df74:	4b5d      	ldr	r3, [pc, #372]	; (800e0ec <__gethex+0x2e8>)
 800df76:	4602      	mov	r2, r0
 800df78:	21de      	movs	r1, #222	; 0xde
 800df7a:	485d      	ldr	r0, [pc, #372]	; (800e0f0 <__gethex+0x2ec>)
 800df7c:	f001 f8d6 	bl	800f12c <__assert_func>
 800df80:	3101      	adds	r1, #1
 800df82:	105b      	asrs	r3, r3, #1
 800df84:	e7ee      	b.n	800df64 <__gethex+0x160>
 800df86:	f100 0914 	add.w	r9, r0, #20
 800df8a:	f04f 0b00 	mov.w	fp, #0
 800df8e:	f1ca 0301 	rsb	r3, sl, #1
 800df92:	f8cd 9008 	str.w	r9, [sp, #8]
 800df96:	f8cd b000 	str.w	fp, [sp]
 800df9a:	9306      	str	r3, [sp, #24]
 800df9c:	42b7      	cmp	r7, r6
 800df9e:	d340      	bcc.n	800e022 <__gethex+0x21e>
 800dfa0:	9802      	ldr	r0, [sp, #8]
 800dfa2:	9b00      	ldr	r3, [sp, #0]
 800dfa4:	f840 3b04 	str.w	r3, [r0], #4
 800dfa8:	eba0 0009 	sub.w	r0, r0, r9
 800dfac:	1080      	asrs	r0, r0, #2
 800dfae:	0146      	lsls	r6, r0, #5
 800dfb0:	6120      	str	r0, [r4, #16]
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	f000 fb50 	bl	800e658 <__hi0bits>
 800dfb8:	1a30      	subs	r0, r6, r0
 800dfba:	f8d8 6000 	ldr.w	r6, [r8]
 800dfbe:	42b0      	cmp	r0, r6
 800dfc0:	dd63      	ble.n	800e08a <__gethex+0x286>
 800dfc2:	1b87      	subs	r7, r0, r6
 800dfc4:	4639      	mov	r1, r7
 800dfc6:	4620      	mov	r0, r4
 800dfc8:	f000 fef4 	bl	800edb4 <__any_on>
 800dfcc:	4682      	mov	sl, r0
 800dfce:	b1a8      	cbz	r0, 800dffc <__gethex+0x1f8>
 800dfd0:	1e7b      	subs	r3, r7, #1
 800dfd2:	1159      	asrs	r1, r3, #5
 800dfd4:	f003 021f 	and.w	r2, r3, #31
 800dfd8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800dfdc:	f04f 0a01 	mov.w	sl, #1
 800dfe0:	fa0a f202 	lsl.w	r2, sl, r2
 800dfe4:	420a      	tst	r2, r1
 800dfe6:	d009      	beq.n	800dffc <__gethex+0x1f8>
 800dfe8:	4553      	cmp	r3, sl
 800dfea:	dd05      	ble.n	800dff8 <__gethex+0x1f4>
 800dfec:	1eb9      	subs	r1, r7, #2
 800dfee:	4620      	mov	r0, r4
 800dff0:	f000 fee0 	bl	800edb4 <__any_on>
 800dff4:	2800      	cmp	r0, #0
 800dff6:	d145      	bne.n	800e084 <__gethex+0x280>
 800dff8:	f04f 0a02 	mov.w	sl, #2
 800dffc:	4639      	mov	r1, r7
 800dffe:	4620      	mov	r0, r4
 800e000:	f7ff fe98 	bl	800dd34 <rshift>
 800e004:	443d      	add	r5, r7
 800e006:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e00a:	42ab      	cmp	r3, r5
 800e00c:	da4c      	bge.n	800e0a8 <__gethex+0x2a4>
 800e00e:	ee18 0a10 	vmov	r0, s16
 800e012:	4621      	mov	r1, r4
 800e014:	f000 fa6e 	bl	800e4f4 <_Bfree>
 800e018:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e01a:	2300      	movs	r3, #0
 800e01c:	6013      	str	r3, [r2, #0]
 800e01e:	27a3      	movs	r7, #163	; 0xa3
 800e020:	e785      	b.n	800df2e <__gethex+0x12a>
 800e022:	1e73      	subs	r3, r6, #1
 800e024:	9a05      	ldr	r2, [sp, #20]
 800e026:	9303      	str	r3, [sp, #12]
 800e028:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e02c:	4293      	cmp	r3, r2
 800e02e:	d019      	beq.n	800e064 <__gethex+0x260>
 800e030:	f1bb 0f20 	cmp.w	fp, #32
 800e034:	d107      	bne.n	800e046 <__gethex+0x242>
 800e036:	9b02      	ldr	r3, [sp, #8]
 800e038:	9a00      	ldr	r2, [sp, #0]
 800e03a:	f843 2b04 	str.w	r2, [r3], #4
 800e03e:	9302      	str	r3, [sp, #8]
 800e040:	2300      	movs	r3, #0
 800e042:	9300      	str	r3, [sp, #0]
 800e044:	469b      	mov	fp, r3
 800e046:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e04a:	f7ff fec5 	bl	800ddd8 <__hexdig_fun>
 800e04e:	9b00      	ldr	r3, [sp, #0]
 800e050:	f000 000f 	and.w	r0, r0, #15
 800e054:	fa00 f00b 	lsl.w	r0, r0, fp
 800e058:	4303      	orrs	r3, r0
 800e05a:	9300      	str	r3, [sp, #0]
 800e05c:	f10b 0b04 	add.w	fp, fp, #4
 800e060:	9b03      	ldr	r3, [sp, #12]
 800e062:	e00d      	b.n	800e080 <__gethex+0x27c>
 800e064:	9b03      	ldr	r3, [sp, #12]
 800e066:	9a06      	ldr	r2, [sp, #24]
 800e068:	4413      	add	r3, r2
 800e06a:	42bb      	cmp	r3, r7
 800e06c:	d3e0      	bcc.n	800e030 <__gethex+0x22c>
 800e06e:	4618      	mov	r0, r3
 800e070:	9901      	ldr	r1, [sp, #4]
 800e072:	9307      	str	r3, [sp, #28]
 800e074:	4652      	mov	r2, sl
 800e076:	f001 f837 	bl	800f0e8 <strncmp>
 800e07a:	9b07      	ldr	r3, [sp, #28]
 800e07c:	2800      	cmp	r0, #0
 800e07e:	d1d7      	bne.n	800e030 <__gethex+0x22c>
 800e080:	461e      	mov	r6, r3
 800e082:	e78b      	b.n	800df9c <__gethex+0x198>
 800e084:	f04f 0a03 	mov.w	sl, #3
 800e088:	e7b8      	b.n	800dffc <__gethex+0x1f8>
 800e08a:	da0a      	bge.n	800e0a2 <__gethex+0x29e>
 800e08c:	1a37      	subs	r7, r6, r0
 800e08e:	4621      	mov	r1, r4
 800e090:	ee18 0a10 	vmov	r0, s16
 800e094:	463a      	mov	r2, r7
 800e096:	f000 fc49 	bl	800e92c <__lshift>
 800e09a:	1bed      	subs	r5, r5, r7
 800e09c:	4604      	mov	r4, r0
 800e09e:	f100 0914 	add.w	r9, r0, #20
 800e0a2:	f04f 0a00 	mov.w	sl, #0
 800e0a6:	e7ae      	b.n	800e006 <__gethex+0x202>
 800e0a8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e0ac:	42a8      	cmp	r0, r5
 800e0ae:	dd72      	ble.n	800e196 <__gethex+0x392>
 800e0b0:	1b45      	subs	r5, r0, r5
 800e0b2:	42ae      	cmp	r6, r5
 800e0b4:	dc36      	bgt.n	800e124 <__gethex+0x320>
 800e0b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e0ba:	2b02      	cmp	r3, #2
 800e0bc:	d02a      	beq.n	800e114 <__gethex+0x310>
 800e0be:	2b03      	cmp	r3, #3
 800e0c0:	d02c      	beq.n	800e11c <__gethex+0x318>
 800e0c2:	2b01      	cmp	r3, #1
 800e0c4:	d11c      	bne.n	800e100 <__gethex+0x2fc>
 800e0c6:	42ae      	cmp	r6, r5
 800e0c8:	d11a      	bne.n	800e100 <__gethex+0x2fc>
 800e0ca:	2e01      	cmp	r6, #1
 800e0cc:	d112      	bne.n	800e0f4 <__gethex+0x2f0>
 800e0ce:	9a04      	ldr	r2, [sp, #16]
 800e0d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e0d4:	6013      	str	r3, [r2, #0]
 800e0d6:	2301      	movs	r3, #1
 800e0d8:	6123      	str	r3, [r4, #16]
 800e0da:	f8c9 3000 	str.w	r3, [r9]
 800e0de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e0e0:	2762      	movs	r7, #98	; 0x62
 800e0e2:	601c      	str	r4, [r3, #0]
 800e0e4:	e723      	b.n	800df2e <__gethex+0x12a>
 800e0e6:	bf00      	nop
 800e0e8:	0800ffa8 	.word	0x0800ffa8
 800e0ec:	0800ff30 	.word	0x0800ff30
 800e0f0:	0800ff41 	.word	0x0800ff41
 800e0f4:	1e71      	subs	r1, r6, #1
 800e0f6:	4620      	mov	r0, r4
 800e0f8:	f000 fe5c 	bl	800edb4 <__any_on>
 800e0fc:	2800      	cmp	r0, #0
 800e0fe:	d1e6      	bne.n	800e0ce <__gethex+0x2ca>
 800e100:	ee18 0a10 	vmov	r0, s16
 800e104:	4621      	mov	r1, r4
 800e106:	f000 f9f5 	bl	800e4f4 <_Bfree>
 800e10a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e10c:	2300      	movs	r3, #0
 800e10e:	6013      	str	r3, [r2, #0]
 800e110:	2750      	movs	r7, #80	; 0x50
 800e112:	e70c      	b.n	800df2e <__gethex+0x12a>
 800e114:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e116:	2b00      	cmp	r3, #0
 800e118:	d1f2      	bne.n	800e100 <__gethex+0x2fc>
 800e11a:	e7d8      	b.n	800e0ce <__gethex+0x2ca>
 800e11c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d1d5      	bne.n	800e0ce <__gethex+0x2ca>
 800e122:	e7ed      	b.n	800e100 <__gethex+0x2fc>
 800e124:	1e6f      	subs	r7, r5, #1
 800e126:	f1ba 0f00 	cmp.w	sl, #0
 800e12a:	d131      	bne.n	800e190 <__gethex+0x38c>
 800e12c:	b127      	cbz	r7, 800e138 <__gethex+0x334>
 800e12e:	4639      	mov	r1, r7
 800e130:	4620      	mov	r0, r4
 800e132:	f000 fe3f 	bl	800edb4 <__any_on>
 800e136:	4682      	mov	sl, r0
 800e138:	117b      	asrs	r3, r7, #5
 800e13a:	2101      	movs	r1, #1
 800e13c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e140:	f007 071f 	and.w	r7, r7, #31
 800e144:	fa01 f707 	lsl.w	r7, r1, r7
 800e148:	421f      	tst	r7, r3
 800e14a:	4629      	mov	r1, r5
 800e14c:	4620      	mov	r0, r4
 800e14e:	bf18      	it	ne
 800e150:	f04a 0a02 	orrne.w	sl, sl, #2
 800e154:	1b76      	subs	r6, r6, r5
 800e156:	f7ff fded 	bl	800dd34 <rshift>
 800e15a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e15e:	2702      	movs	r7, #2
 800e160:	f1ba 0f00 	cmp.w	sl, #0
 800e164:	d048      	beq.n	800e1f8 <__gethex+0x3f4>
 800e166:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e16a:	2b02      	cmp	r3, #2
 800e16c:	d015      	beq.n	800e19a <__gethex+0x396>
 800e16e:	2b03      	cmp	r3, #3
 800e170:	d017      	beq.n	800e1a2 <__gethex+0x39e>
 800e172:	2b01      	cmp	r3, #1
 800e174:	d109      	bne.n	800e18a <__gethex+0x386>
 800e176:	f01a 0f02 	tst.w	sl, #2
 800e17a:	d006      	beq.n	800e18a <__gethex+0x386>
 800e17c:	f8d9 0000 	ldr.w	r0, [r9]
 800e180:	ea4a 0a00 	orr.w	sl, sl, r0
 800e184:	f01a 0f01 	tst.w	sl, #1
 800e188:	d10e      	bne.n	800e1a8 <__gethex+0x3a4>
 800e18a:	f047 0710 	orr.w	r7, r7, #16
 800e18e:	e033      	b.n	800e1f8 <__gethex+0x3f4>
 800e190:	f04f 0a01 	mov.w	sl, #1
 800e194:	e7d0      	b.n	800e138 <__gethex+0x334>
 800e196:	2701      	movs	r7, #1
 800e198:	e7e2      	b.n	800e160 <__gethex+0x35c>
 800e19a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e19c:	f1c3 0301 	rsb	r3, r3, #1
 800e1a0:	9315      	str	r3, [sp, #84]	; 0x54
 800e1a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d0f0      	beq.n	800e18a <__gethex+0x386>
 800e1a8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e1ac:	f104 0314 	add.w	r3, r4, #20
 800e1b0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e1b4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e1b8:	f04f 0c00 	mov.w	ip, #0
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1c2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e1c6:	d01c      	beq.n	800e202 <__gethex+0x3fe>
 800e1c8:	3201      	adds	r2, #1
 800e1ca:	6002      	str	r2, [r0, #0]
 800e1cc:	2f02      	cmp	r7, #2
 800e1ce:	f104 0314 	add.w	r3, r4, #20
 800e1d2:	d13f      	bne.n	800e254 <__gethex+0x450>
 800e1d4:	f8d8 2000 	ldr.w	r2, [r8]
 800e1d8:	3a01      	subs	r2, #1
 800e1da:	42b2      	cmp	r2, r6
 800e1dc:	d10a      	bne.n	800e1f4 <__gethex+0x3f0>
 800e1de:	1171      	asrs	r1, r6, #5
 800e1e0:	2201      	movs	r2, #1
 800e1e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e1e6:	f006 061f 	and.w	r6, r6, #31
 800e1ea:	fa02 f606 	lsl.w	r6, r2, r6
 800e1ee:	421e      	tst	r6, r3
 800e1f0:	bf18      	it	ne
 800e1f2:	4617      	movne	r7, r2
 800e1f4:	f047 0720 	orr.w	r7, r7, #32
 800e1f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e1fa:	601c      	str	r4, [r3, #0]
 800e1fc:	9b04      	ldr	r3, [sp, #16]
 800e1fe:	601d      	str	r5, [r3, #0]
 800e200:	e695      	b.n	800df2e <__gethex+0x12a>
 800e202:	4299      	cmp	r1, r3
 800e204:	f843 cc04 	str.w	ip, [r3, #-4]
 800e208:	d8d8      	bhi.n	800e1bc <__gethex+0x3b8>
 800e20a:	68a3      	ldr	r3, [r4, #8]
 800e20c:	459b      	cmp	fp, r3
 800e20e:	db19      	blt.n	800e244 <__gethex+0x440>
 800e210:	6861      	ldr	r1, [r4, #4]
 800e212:	ee18 0a10 	vmov	r0, s16
 800e216:	3101      	adds	r1, #1
 800e218:	f000 f92c 	bl	800e474 <_Balloc>
 800e21c:	4681      	mov	r9, r0
 800e21e:	b918      	cbnz	r0, 800e228 <__gethex+0x424>
 800e220:	4b1a      	ldr	r3, [pc, #104]	; (800e28c <__gethex+0x488>)
 800e222:	4602      	mov	r2, r0
 800e224:	2184      	movs	r1, #132	; 0x84
 800e226:	e6a8      	b.n	800df7a <__gethex+0x176>
 800e228:	6922      	ldr	r2, [r4, #16]
 800e22a:	3202      	adds	r2, #2
 800e22c:	f104 010c 	add.w	r1, r4, #12
 800e230:	0092      	lsls	r2, r2, #2
 800e232:	300c      	adds	r0, #12
 800e234:	f000 f904 	bl	800e440 <memcpy>
 800e238:	4621      	mov	r1, r4
 800e23a:	ee18 0a10 	vmov	r0, s16
 800e23e:	f000 f959 	bl	800e4f4 <_Bfree>
 800e242:	464c      	mov	r4, r9
 800e244:	6923      	ldr	r3, [r4, #16]
 800e246:	1c5a      	adds	r2, r3, #1
 800e248:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e24c:	6122      	str	r2, [r4, #16]
 800e24e:	2201      	movs	r2, #1
 800e250:	615a      	str	r2, [r3, #20]
 800e252:	e7bb      	b.n	800e1cc <__gethex+0x3c8>
 800e254:	6922      	ldr	r2, [r4, #16]
 800e256:	455a      	cmp	r2, fp
 800e258:	dd0b      	ble.n	800e272 <__gethex+0x46e>
 800e25a:	2101      	movs	r1, #1
 800e25c:	4620      	mov	r0, r4
 800e25e:	f7ff fd69 	bl	800dd34 <rshift>
 800e262:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e266:	3501      	adds	r5, #1
 800e268:	42ab      	cmp	r3, r5
 800e26a:	f6ff aed0 	blt.w	800e00e <__gethex+0x20a>
 800e26e:	2701      	movs	r7, #1
 800e270:	e7c0      	b.n	800e1f4 <__gethex+0x3f0>
 800e272:	f016 061f 	ands.w	r6, r6, #31
 800e276:	d0fa      	beq.n	800e26e <__gethex+0x46a>
 800e278:	4453      	add	r3, sl
 800e27a:	f1c6 0620 	rsb	r6, r6, #32
 800e27e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e282:	f000 f9e9 	bl	800e658 <__hi0bits>
 800e286:	42b0      	cmp	r0, r6
 800e288:	dbe7      	blt.n	800e25a <__gethex+0x456>
 800e28a:	e7f0      	b.n	800e26e <__gethex+0x46a>
 800e28c:	0800ff30 	.word	0x0800ff30

0800e290 <L_shift>:
 800e290:	f1c2 0208 	rsb	r2, r2, #8
 800e294:	0092      	lsls	r2, r2, #2
 800e296:	b570      	push	{r4, r5, r6, lr}
 800e298:	f1c2 0620 	rsb	r6, r2, #32
 800e29c:	6843      	ldr	r3, [r0, #4]
 800e29e:	6804      	ldr	r4, [r0, #0]
 800e2a0:	fa03 f506 	lsl.w	r5, r3, r6
 800e2a4:	432c      	orrs	r4, r5
 800e2a6:	40d3      	lsrs	r3, r2
 800e2a8:	6004      	str	r4, [r0, #0]
 800e2aa:	f840 3f04 	str.w	r3, [r0, #4]!
 800e2ae:	4288      	cmp	r0, r1
 800e2b0:	d3f4      	bcc.n	800e29c <L_shift+0xc>
 800e2b2:	bd70      	pop	{r4, r5, r6, pc}

0800e2b4 <__match>:
 800e2b4:	b530      	push	{r4, r5, lr}
 800e2b6:	6803      	ldr	r3, [r0, #0]
 800e2b8:	3301      	adds	r3, #1
 800e2ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e2be:	b914      	cbnz	r4, 800e2c6 <__match+0x12>
 800e2c0:	6003      	str	r3, [r0, #0]
 800e2c2:	2001      	movs	r0, #1
 800e2c4:	bd30      	pop	{r4, r5, pc}
 800e2c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2ca:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e2ce:	2d19      	cmp	r5, #25
 800e2d0:	bf98      	it	ls
 800e2d2:	3220      	addls	r2, #32
 800e2d4:	42a2      	cmp	r2, r4
 800e2d6:	d0f0      	beq.n	800e2ba <__match+0x6>
 800e2d8:	2000      	movs	r0, #0
 800e2da:	e7f3      	b.n	800e2c4 <__match+0x10>

0800e2dc <__hexnan>:
 800e2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2e0:	680b      	ldr	r3, [r1, #0]
 800e2e2:	115e      	asrs	r6, r3, #5
 800e2e4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e2e8:	f013 031f 	ands.w	r3, r3, #31
 800e2ec:	b087      	sub	sp, #28
 800e2ee:	bf18      	it	ne
 800e2f0:	3604      	addne	r6, #4
 800e2f2:	2500      	movs	r5, #0
 800e2f4:	1f37      	subs	r7, r6, #4
 800e2f6:	4690      	mov	r8, r2
 800e2f8:	6802      	ldr	r2, [r0, #0]
 800e2fa:	9301      	str	r3, [sp, #4]
 800e2fc:	4682      	mov	sl, r0
 800e2fe:	f846 5c04 	str.w	r5, [r6, #-4]
 800e302:	46b9      	mov	r9, r7
 800e304:	463c      	mov	r4, r7
 800e306:	9502      	str	r5, [sp, #8]
 800e308:	46ab      	mov	fp, r5
 800e30a:	7851      	ldrb	r1, [r2, #1]
 800e30c:	1c53      	adds	r3, r2, #1
 800e30e:	9303      	str	r3, [sp, #12]
 800e310:	b341      	cbz	r1, 800e364 <__hexnan+0x88>
 800e312:	4608      	mov	r0, r1
 800e314:	9205      	str	r2, [sp, #20]
 800e316:	9104      	str	r1, [sp, #16]
 800e318:	f7ff fd5e 	bl	800ddd8 <__hexdig_fun>
 800e31c:	2800      	cmp	r0, #0
 800e31e:	d14f      	bne.n	800e3c0 <__hexnan+0xe4>
 800e320:	9904      	ldr	r1, [sp, #16]
 800e322:	9a05      	ldr	r2, [sp, #20]
 800e324:	2920      	cmp	r1, #32
 800e326:	d818      	bhi.n	800e35a <__hexnan+0x7e>
 800e328:	9b02      	ldr	r3, [sp, #8]
 800e32a:	459b      	cmp	fp, r3
 800e32c:	dd13      	ble.n	800e356 <__hexnan+0x7a>
 800e32e:	454c      	cmp	r4, r9
 800e330:	d206      	bcs.n	800e340 <__hexnan+0x64>
 800e332:	2d07      	cmp	r5, #7
 800e334:	dc04      	bgt.n	800e340 <__hexnan+0x64>
 800e336:	462a      	mov	r2, r5
 800e338:	4649      	mov	r1, r9
 800e33a:	4620      	mov	r0, r4
 800e33c:	f7ff ffa8 	bl	800e290 <L_shift>
 800e340:	4544      	cmp	r4, r8
 800e342:	d950      	bls.n	800e3e6 <__hexnan+0x10a>
 800e344:	2300      	movs	r3, #0
 800e346:	f1a4 0904 	sub.w	r9, r4, #4
 800e34a:	f844 3c04 	str.w	r3, [r4, #-4]
 800e34e:	f8cd b008 	str.w	fp, [sp, #8]
 800e352:	464c      	mov	r4, r9
 800e354:	461d      	mov	r5, r3
 800e356:	9a03      	ldr	r2, [sp, #12]
 800e358:	e7d7      	b.n	800e30a <__hexnan+0x2e>
 800e35a:	2929      	cmp	r1, #41	; 0x29
 800e35c:	d156      	bne.n	800e40c <__hexnan+0x130>
 800e35e:	3202      	adds	r2, #2
 800e360:	f8ca 2000 	str.w	r2, [sl]
 800e364:	f1bb 0f00 	cmp.w	fp, #0
 800e368:	d050      	beq.n	800e40c <__hexnan+0x130>
 800e36a:	454c      	cmp	r4, r9
 800e36c:	d206      	bcs.n	800e37c <__hexnan+0xa0>
 800e36e:	2d07      	cmp	r5, #7
 800e370:	dc04      	bgt.n	800e37c <__hexnan+0xa0>
 800e372:	462a      	mov	r2, r5
 800e374:	4649      	mov	r1, r9
 800e376:	4620      	mov	r0, r4
 800e378:	f7ff ff8a 	bl	800e290 <L_shift>
 800e37c:	4544      	cmp	r4, r8
 800e37e:	d934      	bls.n	800e3ea <__hexnan+0x10e>
 800e380:	f1a8 0204 	sub.w	r2, r8, #4
 800e384:	4623      	mov	r3, r4
 800e386:	f853 1b04 	ldr.w	r1, [r3], #4
 800e38a:	f842 1f04 	str.w	r1, [r2, #4]!
 800e38e:	429f      	cmp	r7, r3
 800e390:	d2f9      	bcs.n	800e386 <__hexnan+0xaa>
 800e392:	1b3b      	subs	r3, r7, r4
 800e394:	f023 0303 	bic.w	r3, r3, #3
 800e398:	3304      	adds	r3, #4
 800e39a:	3401      	adds	r4, #1
 800e39c:	3e03      	subs	r6, #3
 800e39e:	42b4      	cmp	r4, r6
 800e3a0:	bf88      	it	hi
 800e3a2:	2304      	movhi	r3, #4
 800e3a4:	4443      	add	r3, r8
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	f843 2b04 	str.w	r2, [r3], #4
 800e3ac:	429f      	cmp	r7, r3
 800e3ae:	d2fb      	bcs.n	800e3a8 <__hexnan+0xcc>
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	b91b      	cbnz	r3, 800e3bc <__hexnan+0xe0>
 800e3b4:	4547      	cmp	r7, r8
 800e3b6:	d127      	bne.n	800e408 <__hexnan+0x12c>
 800e3b8:	2301      	movs	r3, #1
 800e3ba:	603b      	str	r3, [r7, #0]
 800e3bc:	2005      	movs	r0, #5
 800e3be:	e026      	b.n	800e40e <__hexnan+0x132>
 800e3c0:	3501      	adds	r5, #1
 800e3c2:	2d08      	cmp	r5, #8
 800e3c4:	f10b 0b01 	add.w	fp, fp, #1
 800e3c8:	dd06      	ble.n	800e3d8 <__hexnan+0xfc>
 800e3ca:	4544      	cmp	r4, r8
 800e3cc:	d9c3      	bls.n	800e356 <__hexnan+0x7a>
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	f844 3c04 	str.w	r3, [r4, #-4]
 800e3d4:	2501      	movs	r5, #1
 800e3d6:	3c04      	subs	r4, #4
 800e3d8:	6822      	ldr	r2, [r4, #0]
 800e3da:	f000 000f 	and.w	r0, r0, #15
 800e3de:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e3e2:	6022      	str	r2, [r4, #0]
 800e3e4:	e7b7      	b.n	800e356 <__hexnan+0x7a>
 800e3e6:	2508      	movs	r5, #8
 800e3e8:	e7b5      	b.n	800e356 <__hexnan+0x7a>
 800e3ea:	9b01      	ldr	r3, [sp, #4]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d0df      	beq.n	800e3b0 <__hexnan+0xd4>
 800e3f0:	f04f 32ff 	mov.w	r2, #4294967295
 800e3f4:	f1c3 0320 	rsb	r3, r3, #32
 800e3f8:	fa22 f303 	lsr.w	r3, r2, r3
 800e3fc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e400:	401a      	ands	r2, r3
 800e402:	f846 2c04 	str.w	r2, [r6, #-4]
 800e406:	e7d3      	b.n	800e3b0 <__hexnan+0xd4>
 800e408:	3f04      	subs	r7, #4
 800e40a:	e7d1      	b.n	800e3b0 <__hexnan+0xd4>
 800e40c:	2004      	movs	r0, #4
 800e40e:	b007      	add	sp, #28
 800e410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e414 <_localeconv_r>:
 800e414:	4800      	ldr	r0, [pc, #0]	; (800e418 <_localeconv_r+0x4>)
 800e416:	4770      	bx	lr
 800e418:	20000184 	.word	0x20000184

0800e41c <__ascii_mbtowc>:
 800e41c:	b082      	sub	sp, #8
 800e41e:	b901      	cbnz	r1, 800e422 <__ascii_mbtowc+0x6>
 800e420:	a901      	add	r1, sp, #4
 800e422:	b142      	cbz	r2, 800e436 <__ascii_mbtowc+0x1a>
 800e424:	b14b      	cbz	r3, 800e43a <__ascii_mbtowc+0x1e>
 800e426:	7813      	ldrb	r3, [r2, #0]
 800e428:	600b      	str	r3, [r1, #0]
 800e42a:	7812      	ldrb	r2, [r2, #0]
 800e42c:	1e10      	subs	r0, r2, #0
 800e42e:	bf18      	it	ne
 800e430:	2001      	movne	r0, #1
 800e432:	b002      	add	sp, #8
 800e434:	4770      	bx	lr
 800e436:	4610      	mov	r0, r2
 800e438:	e7fb      	b.n	800e432 <__ascii_mbtowc+0x16>
 800e43a:	f06f 0001 	mvn.w	r0, #1
 800e43e:	e7f8      	b.n	800e432 <__ascii_mbtowc+0x16>

0800e440 <memcpy>:
 800e440:	440a      	add	r2, r1
 800e442:	4291      	cmp	r1, r2
 800e444:	f100 33ff 	add.w	r3, r0, #4294967295
 800e448:	d100      	bne.n	800e44c <memcpy+0xc>
 800e44a:	4770      	bx	lr
 800e44c:	b510      	push	{r4, lr}
 800e44e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e452:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e456:	4291      	cmp	r1, r2
 800e458:	d1f9      	bne.n	800e44e <memcpy+0xe>
 800e45a:	bd10      	pop	{r4, pc}

0800e45c <__malloc_lock>:
 800e45c:	4801      	ldr	r0, [pc, #4]	; (800e464 <__malloc_lock+0x8>)
 800e45e:	f000 be96 	b.w	800f18e <__retarget_lock_acquire_recursive>
 800e462:	bf00      	nop
 800e464:	20000bc8 	.word	0x20000bc8

0800e468 <__malloc_unlock>:
 800e468:	4801      	ldr	r0, [pc, #4]	; (800e470 <__malloc_unlock+0x8>)
 800e46a:	f000 be91 	b.w	800f190 <__retarget_lock_release_recursive>
 800e46e:	bf00      	nop
 800e470:	20000bc8 	.word	0x20000bc8

0800e474 <_Balloc>:
 800e474:	b570      	push	{r4, r5, r6, lr}
 800e476:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e478:	4604      	mov	r4, r0
 800e47a:	460d      	mov	r5, r1
 800e47c:	b976      	cbnz	r6, 800e49c <_Balloc+0x28>
 800e47e:	2010      	movs	r0, #16
 800e480:	f7fc ff8a 	bl	800b398 <malloc>
 800e484:	4602      	mov	r2, r0
 800e486:	6260      	str	r0, [r4, #36]	; 0x24
 800e488:	b920      	cbnz	r0, 800e494 <_Balloc+0x20>
 800e48a:	4b18      	ldr	r3, [pc, #96]	; (800e4ec <_Balloc+0x78>)
 800e48c:	4818      	ldr	r0, [pc, #96]	; (800e4f0 <_Balloc+0x7c>)
 800e48e:	2166      	movs	r1, #102	; 0x66
 800e490:	f000 fe4c 	bl	800f12c <__assert_func>
 800e494:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e498:	6006      	str	r6, [r0, #0]
 800e49a:	60c6      	str	r6, [r0, #12]
 800e49c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e49e:	68f3      	ldr	r3, [r6, #12]
 800e4a0:	b183      	cbz	r3, 800e4c4 <_Balloc+0x50>
 800e4a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4a4:	68db      	ldr	r3, [r3, #12]
 800e4a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e4aa:	b9b8      	cbnz	r0, 800e4dc <_Balloc+0x68>
 800e4ac:	2101      	movs	r1, #1
 800e4ae:	fa01 f605 	lsl.w	r6, r1, r5
 800e4b2:	1d72      	adds	r2, r6, #5
 800e4b4:	0092      	lsls	r2, r2, #2
 800e4b6:	4620      	mov	r0, r4
 800e4b8:	f000 fc9d 	bl	800edf6 <_calloc_r>
 800e4bc:	b160      	cbz	r0, 800e4d8 <_Balloc+0x64>
 800e4be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e4c2:	e00e      	b.n	800e4e2 <_Balloc+0x6e>
 800e4c4:	2221      	movs	r2, #33	; 0x21
 800e4c6:	2104      	movs	r1, #4
 800e4c8:	4620      	mov	r0, r4
 800e4ca:	f000 fc94 	bl	800edf6 <_calloc_r>
 800e4ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4d0:	60f0      	str	r0, [r6, #12]
 800e4d2:	68db      	ldr	r3, [r3, #12]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d1e4      	bne.n	800e4a2 <_Balloc+0x2e>
 800e4d8:	2000      	movs	r0, #0
 800e4da:	bd70      	pop	{r4, r5, r6, pc}
 800e4dc:	6802      	ldr	r2, [r0, #0]
 800e4de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e4e8:	e7f7      	b.n	800e4da <_Balloc+0x66>
 800e4ea:	bf00      	nop
 800e4ec:	0800febe 	.word	0x0800febe
 800e4f0:	0800ffbc 	.word	0x0800ffbc

0800e4f4 <_Bfree>:
 800e4f4:	b570      	push	{r4, r5, r6, lr}
 800e4f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e4f8:	4605      	mov	r5, r0
 800e4fa:	460c      	mov	r4, r1
 800e4fc:	b976      	cbnz	r6, 800e51c <_Bfree+0x28>
 800e4fe:	2010      	movs	r0, #16
 800e500:	f7fc ff4a 	bl	800b398 <malloc>
 800e504:	4602      	mov	r2, r0
 800e506:	6268      	str	r0, [r5, #36]	; 0x24
 800e508:	b920      	cbnz	r0, 800e514 <_Bfree+0x20>
 800e50a:	4b09      	ldr	r3, [pc, #36]	; (800e530 <_Bfree+0x3c>)
 800e50c:	4809      	ldr	r0, [pc, #36]	; (800e534 <_Bfree+0x40>)
 800e50e:	218a      	movs	r1, #138	; 0x8a
 800e510:	f000 fe0c 	bl	800f12c <__assert_func>
 800e514:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e518:	6006      	str	r6, [r0, #0]
 800e51a:	60c6      	str	r6, [r0, #12]
 800e51c:	b13c      	cbz	r4, 800e52e <_Bfree+0x3a>
 800e51e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e520:	6862      	ldr	r2, [r4, #4]
 800e522:	68db      	ldr	r3, [r3, #12]
 800e524:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e528:	6021      	str	r1, [r4, #0]
 800e52a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e52e:	bd70      	pop	{r4, r5, r6, pc}
 800e530:	0800febe 	.word	0x0800febe
 800e534:	0800ffbc 	.word	0x0800ffbc

0800e538 <__multadd>:
 800e538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e53c:	690d      	ldr	r5, [r1, #16]
 800e53e:	4607      	mov	r7, r0
 800e540:	460c      	mov	r4, r1
 800e542:	461e      	mov	r6, r3
 800e544:	f101 0c14 	add.w	ip, r1, #20
 800e548:	2000      	movs	r0, #0
 800e54a:	f8dc 3000 	ldr.w	r3, [ip]
 800e54e:	b299      	uxth	r1, r3
 800e550:	fb02 6101 	mla	r1, r2, r1, r6
 800e554:	0c1e      	lsrs	r6, r3, #16
 800e556:	0c0b      	lsrs	r3, r1, #16
 800e558:	fb02 3306 	mla	r3, r2, r6, r3
 800e55c:	b289      	uxth	r1, r1
 800e55e:	3001      	adds	r0, #1
 800e560:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e564:	4285      	cmp	r5, r0
 800e566:	f84c 1b04 	str.w	r1, [ip], #4
 800e56a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e56e:	dcec      	bgt.n	800e54a <__multadd+0x12>
 800e570:	b30e      	cbz	r6, 800e5b6 <__multadd+0x7e>
 800e572:	68a3      	ldr	r3, [r4, #8]
 800e574:	42ab      	cmp	r3, r5
 800e576:	dc19      	bgt.n	800e5ac <__multadd+0x74>
 800e578:	6861      	ldr	r1, [r4, #4]
 800e57a:	4638      	mov	r0, r7
 800e57c:	3101      	adds	r1, #1
 800e57e:	f7ff ff79 	bl	800e474 <_Balloc>
 800e582:	4680      	mov	r8, r0
 800e584:	b928      	cbnz	r0, 800e592 <__multadd+0x5a>
 800e586:	4602      	mov	r2, r0
 800e588:	4b0c      	ldr	r3, [pc, #48]	; (800e5bc <__multadd+0x84>)
 800e58a:	480d      	ldr	r0, [pc, #52]	; (800e5c0 <__multadd+0x88>)
 800e58c:	21b5      	movs	r1, #181	; 0xb5
 800e58e:	f000 fdcd 	bl	800f12c <__assert_func>
 800e592:	6922      	ldr	r2, [r4, #16]
 800e594:	3202      	adds	r2, #2
 800e596:	f104 010c 	add.w	r1, r4, #12
 800e59a:	0092      	lsls	r2, r2, #2
 800e59c:	300c      	adds	r0, #12
 800e59e:	f7ff ff4f 	bl	800e440 <memcpy>
 800e5a2:	4621      	mov	r1, r4
 800e5a4:	4638      	mov	r0, r7
 800e5a6:	f7ff ffa5 	bl	800e4f4 <_Bfree>
 800e5aa:	4644      	mov	r4, r8
 800e5ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e5b0:	3501      	adds	r5, #1
 800e5b2:	615e      	str	r6, [r3, #20]
 800e5b4:	6125      	str	r5, [r4, #16]
 800e5b6:	4620      	mov	r0, r4
 800e5b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5bc:	0800ff30 	.word	0x0800ff30
 800e5c0:	0800ffbc 	.word	0x0800ffbc

0800e5c4 <__s2b>:
 800e5c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5c8:	460c      	mov	r4, r1
 800e5ca:	4615      	mov	r5, r2
 800e5cc:	461f      	mov	r7, r3
 800e5ce:	2209      	movs	r2, #9
 800e5d0:	3308      	adds	r3, #8
 800e5d2:	4606      	mov	r6, r0
 800e5d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800e5d8:	2100      	movs	r1, #0
 800e5da:	2201      	movs	r2, #1
 800e5dc:	429a      	cmp	r2, r3
 800e5de:	db09      	blt.n	800e5f4 <__s2b+0x30>
 800e5e0:	4630      	mov	r0, r6
 800e5e2:	f7ff ff47 	bl	800e474 <_Balloc>
 800e5e6:	b940      	cbnz	r0, 800e5fa <__s2b+0x36>
 800e5e8:	4602      	mov	r2, r0
 800e5ea:	4b19      	ldr	r3, [pc, #100]	; (800e650 <__s2b+0x8c>)
 800e5ec:	4819      	ldr	r0, [pc, #100]	; (800e654 <__s2b+0x90>)
 800e5ee:	21ce      	movs	r1, #206	; 0xce
 800e5f0:	f000 fd9c 	bl	800f12c <__assert_func>
 800e5f4:	0052      	lsls	r2, r2, #1
 800e5f6:	3101      	adds	r1, #1
 800e5f8:	e7f0      	b.n	800e5dc <__s2b+0x18>
 800e5fa:	9b08      	ldr	r3, [sp, #32]
 800e5fc:	6143      	str	r3, [r0, #20]
 800e5fe:	2d09      	cmp	r5, #9
 800e600:	f04f 0301 	mov.w	r3, #1
 800e604:	6103      	str	r3, [r0, #16]
 800e606:	dd16      	ble.n	800e636 <__s2b+0x72>
 800e608:	f104 0909 	add.w	r9, r4, #9
 800e60c:	46c8      	mov	r8, r9
 800e60e:	442c      	add	r4, r5
 800e610:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e614:	4601      	mov	r1, r0
 800e616:	3b30      	subs	r3, #48	; 0x30
 800e618:	220a      	movs	r2, #10
 800e61a:	4630      	mov	r0, r6
 800e61c:	f7ff ff8c 	bl	800e538 <__multadd>
 800e620:	45a0      	cmp	r8, r4
 800e622:	d1f5      	bne.n	800e610 <__s2b+0x4c>
 800e624:	f1a5 0408 	sub.w	r4, r5, #8
 800e628:	444c      	add	r4, r9
 800e62a:	1b2d      	subs	r5, r5, r4
 800e62c:	1963      	adds	r3, r4, r5
 800e62e:	42bb      	cmp	r3, r7
 800e630:	db04      	blt.n	800e63c <__s2b+0x78>
 800e632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e636:	340a      	adds	r4, #10
 800e638:	2509      	movs	r5, #9
 800e63a:	e7f6      	b.n	800e62a <__s2b+0x66>
 800e63c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e640:	4601      	mov	r1, r0
 800e642:	3b30      	subs	r3, #48	; 0x30
 800e644:	220a      	movs	r2, #10
 800e646:	4630      	mov	r0, r6
 800e648:	f7ff ff76 	bl	800e538 <__multadd>
 800e64c:	e7ee      	b.n	800e62c <__s2b+0x68>
 800e64e:	bf00      	nop
 800e650:	0800ff30 	.word	0x0800ff30
 800e654:	0800ffbc 	.word	0x0800ffbc

0800e658 <__hi0bits>:
 800e658:	0c03      	lsrs	r3, r0, #16
 800e65a:	041b      	lsls	r3, r3, #16
 800e65c:	b9d3      	cbnz	r3, 800e694 <__hi0bits+0x3c>
 800e65e:	0400      	lsls	r0, r0, #16
 800e660:	2310      	movs	r3, #16
 800e662:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e666:	bf04      	itt	eq
 800e668:	0200      	lsleq	r0, r0, #8
 800e66a:	3308      	addeq	r3, #8
 800e66c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e670:	bf04      	itt	eq
 800e672:	0100      	lsleq	r0, r0, #4
 800e674:	3304      	addeq	r3, #4
 800e676:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e67a:	bf04      	itt	eq
 800e67c:	0080      	lsleq	r0, r0, #2
 800e67e:	3302      	addeq	r3, #2
 800e680:	2800      	cmp	r0, #0
 800e682:	db05      	blt.n	800e690 <__hi0bits+0x38>
 800e684:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e688:	f103 0301 	add.w	r3, r3, #1
 800e68c:	bf08      	it	eq
 800e68e:	2320      	moveq	r3, #32
 800e690:	4618      	mov	r0, r3
 800e692:	4770      	bx	lr
 800e694:	2300      	movs	r3, #0
 800e696:	e7e4      	b.n	800e662 <__hi0bits+0xa>

0800e698 <__lo0bits>:
 800e698:	6803      	ldr	r3, [r0, #0]
 800e69a:	f013 0207 	ands.w	r2, r3, #7
 800e69e:	4601      	mov	r1, r0
 800e6a0:	d00b      	beq.n	800e6ba <__lo0bits+0x22>
 800e6a2:	07da      	lsls	r2, r3, #31
 800e6a4:	d423      	bmi.n	800e6ee <__lo0bits+0x56>
 800e6a6:	0798      	lsls	r0, r3, #30
 800e6a8:	bf49      	itett	mi
 800e6aa:	085b      	lsrmi	r3, r3, #1
 800e6ac:	089b      	lsrpl	r3, r3, #2
 800e6ae:	2001      	movmi	r0, #1
 800e6b0:	600b      	strmi	r3, [r1, #0]
 800e6b2:	bf5c      	itt	pl
 800e6b4:	600b      	strpl	r3, [r1, #0]
 800e6b6:	2002      	movpl	r0, #2
 800e6b8:	4770      	bx	lr
 800e6ba:	b298      	uxth	r0, r3
 800e6bc:	b9a8      	cbnz	r0, 800e6ea <__lo0bits+0x52>
 800e6be:	0c1b      	lsrs	r3, r3, #16
 800e6c0:	2010      	movs	r0, #16
 800e6c2:	b2da      	uxtb	r2, r3
 800e6c4:	b90a      	cbnz	r2, 800e6ca <__lo0bits+0x32>
 800e6c6:	3008      	adds	r0, #8
 800e6c8:	0a1b      	lsrs	r3, r3, #8
 800e6ca:	071a      	lsls	r2, r3, #28
 800e6cc:	bf04      	itt	eq
 800e6ce:	091b      	lsreq	r3, r3, #4
 800e6d0:	3004      	addeq	r0, #4
 800e6d2:	079a      	lsls	r2, r3, #30
 800e6d4:	bf04      	itt	eq
 800e6d6:	089b      	lsreq	r3, r3, #2
 800e6d8:	3002      	addeq	r0, #2
 800e6da:	07da      	lsls	r2, r3, #31
 800e6dc:	d403      	bmi.n	800e6e6 <__lo0bits+0x4e>
 800e6de:	085b      	lsrs	r3, r3, #1
 800e6e0:	f100 0001 	add.w	r0, r0, #1
 800e6e4:	d005      	beq.n	800e6f2 <__lo0bits+0x5a>
 800e6e6:	600b      	str	r3, [r1, #0]
 800e6e8:	4770      	bx	lr
 800e6ea:	4610      	mov	r0, r2
 800e6ec:	e7e9      	b.n	800e6c2 <__lo0bits+0x2a>
 800e6ee:	2000      	movs	r0, #0
 800e6f0:	4770      	bx	lr
 800e6f2:	2020      	movs	r0, #32
 800e6f4:	4770      	bx	lr
	...

0800e6f8 <__i2b>:
 800e6f8:	b510      	push	{r4, lr}
 800e6fa:	460c      	mov	r4, r1
 800e6fc:	2101      	movs	r1, #1
 800e6fe:	f7ff feb9 	bl	800e474 <_Balloc>
 800e702:	4602      	mov	r2, r0
 800e704:	b928      	cbnz	r0, 800e712 <__i2b+0x1a>
 800e706:	4b05      	ldr	r3, [pc, #20]	; (800e71c <__i2b+0x24>)
 800e708:	4805      	ldr	r0, [pc, #20]	; (800e720 <__i2b+0x28>)
 800e70a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e70e:	f000 fd0d 	bl	800f12c <__assert_func>
 800e712:	2301      	movs	r3, #1
 800e714:	6144      	str	r4, [r0, #20]
 800e716:	6103      	str	r3, [r0, #16]
 800e718:	bd10      	pop	{r4, pc}
 800e71a:	bf00      	nop
 800e71c:	0800ff30 	.word	0x0800ff30
 800e720:	0800ffbc 	.word	0x0800ffbc

0800e724 <__multiply>:
 800e724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e728:	4691      	mov	r9, r2
 800e72a:	690a      	ldr	r2, [r1, #16]
 800e72c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e730:	429a      	cmp	r2, r3
 800e732:	bfb8      	it	lt
 800e734:	460b      	movlt	r3, r1
 800e736:	460c      	mov	r4, r1
 800e738:	bfbc      	itt	lt
 800e73a:	464c      	movlt	r4, r9
 800e73c:	4699      	movlt	r9, r3
 800e73e:	6927      	ldr	r7, [r4, #16]
 800e740:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e744:	68a3      	ldr	r3, [r4, #8]
 800e746:	6861      	ldr	r1, [r4, #4]
 800e748:	eb07 060a 	add.w	r6, r7, sl
 800e74c:	42b3      	cmp	r3, r6
 800e74e:	b085      	sub	sp, #20
 800e750:	bfb8      	it	lt
 800e752:	3101      	addlt	r1, #1
 800e754:	f7ff fe8e 	bl	800e474 <_Balloc>
 800e758:	b930      	cbnz	r0, 800e768 <__multiply+0x44>
 800e75a:	4602      	mov	r2, r0
 800e75c:	4b44      	ldr	r3, [pc, #272]	; (800e870 <__multiply+0x14c>)
 800e75e:	4845      	ldr	r0, [pc, #276]	; (800e874 <__multiply+0x150>)
 800e760:	f240 115d 	movw	r1, #349	; 0x15d
 800e764:	f000 fce2 	bl	800f12c <__assert_func>
 800e768:	f100 0514 	add.w	r5, r0, #20
 800e76c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e770:	462b      	mov	r3, r5
 800e772:	2200      	movs	r2, #0
 800e774:	4543      	cmp	r3, r8
 800e776:	d321      	bcc.n	800e7bc <__multiply+0x98>
 800e778:	f104 0314 	add.w	r3, r4, #20
 800e77c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e780:	f109 0314 	add.w	r3, r9, #20
 800e784:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e788:	9202      	str	r2, [sp, #8]
 800e78a:	1b3a      	subs	r2, r7, r4
 800e78c:	3a15      	subs	r2, #21
 800e78e:	f022 0203 	bic.w	r2, r2, #3
 800e792:	3204      	adds	r2, #4
 800e794:	f104 0115 	add.w	r1, r4, #21
 800e798:	428f      	cmp	r7, r1
 800e79a:	bf38      	it	cc
 800e79c:	2204      	movcc	r2, #4
 800e79e:	9201      	str	r2, [sp, #4]
 800e7a0:	9a02      	ldr	r2, [sp, #8]
 800e7a2:	9303      	str	r3, [sp, #12]
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	d80c      	bhi.n	800e7c2 <__multiply+0x9e>
 800e7a8:	2e00      	cmp	r6, #0
 800e7aa:	dd03      	ble.n	800e7b4 <__multiply+0x90>
 800e7ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d05a      	beq.n	800e86a <__multiply+0x146>
 800e7b4:	6106      	str	r6, [r0, #16]
 800e7b6:	b005      	add	sp, #20
 800e7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7bc:	f843 2b04 	str.w	r2, [r3], #4
 800e7c0:	e7d8      	b.n	800e774 <__multiply+0x50>
 800e7c2:	f8b3 a000 	ldrh.w	sl, [r3]
 800e7c6:	f1ba 0f00 	cmp.w	sl, #0
 800e7ca:	d024      	beq.n	800e816 <__multiply+0xf2>
 800e7cc:	f104 0e14 	add.w	lr, r4, #20
 800e7d0:	46a9      	mov	r9, r5
 800e7d2:	f04f 0c00 	mov.w	ip, #0
 800e7d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e7da:	f8d9 1000 	ldr.w	r1, [r9]
 800e7de:	fa1f fb82 	uxth.w	fp, r2
 800e7e2:	b289      	uxth	r1, r1
 800e7e4:	fb0a 110b 	mla	r1, sl, fp, r1
 800e7e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e7ec:	f8d9 2000 	ldr.w	r2, [r9]
 800e7f0:	4461      	add	r1, ip
 800e7f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e7f6:	fb0a c20b 	mla	r2, sl, fp, ip
 800e7fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e7fe:	b289      	uxth	r1, r1
 800e800:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e804:	4577      	cmp	r7, lr
 800e806:	f849 1b04 	str.w	r1, [r9], #4
 800e80a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e80e:	d8e2      	bhi.n	800e7d6 <__multiply+0xb2>
 800e810:	9a01      	ldr	r2, [sp, #4]
 800e812:	f845 c002 	str.w	ip, [r5, r2]
 800e816:	9a03      	ldr	r2, [sp, #12]
 800e818:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e81c:	3304      	adds	r3, #4
 800e81e:	f1b9 0f00 	cmp.w	r9, #0
 800e822:	d020      	beq.n	800e866 <__multiply+0x142>
 800e824:	6829      	ldr	r1, [r5, #0]
 800e826:	f104 0c14 	add.w	ip, r4, #20
 800e82a:	46ae      	mov	lr, r5
 800e82c:	f04f 0a00 	mov.w	sl, #0
 800e830:	f8bc b000 	ldrh.w	fp, [ip]
 800e834:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e838:	fb09 220b 	mla	r2, r9, fp, r2
 800e83c:	4492      	add	sl, r2
 800e83e:	b289      	uxth	r1, r1
 800e840:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e844:	f84e 1b04 	str.w	r1, [lr], #4
 800e848:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e84c:	f8be 1000 	ldrh.w	r1, [lr]
 800e850:	0c12      	lsrs	r2, r2, #16
 800e852:	fb09 1102 	mla	r1, r9, r2, r1
 800e856:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e85a:	4567      	cmp	r7, ip
 800e85c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e860:	d8e6      	bhi.n	800e830 <__multiply+0x10c>
 800e862:	9a01      	ldr	r2, [sp, #4]
 800e864:	50a9      	str	r1, [r5, r2]
 800e866:	3504      	adds	r5, #4
 800e868:	e79a      	b.n	800e7a0 <__multiply+0x7c>
 800e86a:	3e01      	subs	r6, #1
 800e86c:	e79c      	b.n	800e7a8 <__multiply+0x84>
 800e86e:	bf00      	nop
 800e870:	0800ff30 	.word	0x0800ff30
 800e874:	0800ffbc 	.word	0x0800ffbc

0800e878 <__pow5mult>:
 800e878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e87c:	4615      	mov	r5, r2
 800e87e:	f012 0203 	ands.w	r2, r2, #3
 800e882:	4606      	mov	r6, r0
 800e884:	460f      	mov	r7, r1
 800e886:	d007      	beq.n	800e898 <__pow5mult+0x20>
 800e888:	4c25      	ldr	r4, [pc, #148]	; (800e920 <__pow5mult+0xa8>)
 800e88a:	3a01      	subs	r2, #1
 800e88c:	2300      	movs	r3, #0
 800e88e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e892:	f7ff fe51 	bl	800e538 <__multadd>
 800e896:	4607      	mov	r7, r0
 800e898:	10ad      	asrs	r5, r5, #2
 800e89a:	d03d      	beq.n	800e918 <__pow5mult+0xa0>
 800e89c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e89e:	b97c      	cbnz	r4, 800e8c0 <__pow5mult+0x48>
 800e8a0:	2010      	movs	r0, #16
 800e8a2:	f7fc fd79 	bl	800b398 <malloc>
 800e8a6:	4602      	mov	r2, r0
 800e8a8:	6270      	str	r0, [r6, #36]	; 0x24
 800e8aa:	b928      	cbnz	r0, 800e8b8 <__pow5mult+0x40>
 800e8ac:	4b1d      	ldr	r3, [pc, #116]	; (800e924 <__pow5mult+0xac>)
 800e8ae:	481e      	ldr	r0, [pc, #120]	; (800e928 <__pow5mult+0xb0>)
 800e8b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e8b4:	f000 fc3a 	bl	800f12c <__assert_func>
 800e8b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e8bc:	6004      	str	r4, [r0, #0]
 800e8be:	60c4      	str	r4, [r0, #12]
 800e8c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e8c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e8c8:	b94c      	cbnz	r4, 800e8de <__pow5mult+0x66>
 800e8ca:	f240 2171 	movw	r1, #625	; 0x271
 800e8ce:	4630      	mov	r0, r6
 800e8d0:	f7ff ff12 	bl	800e6f8 <__i2b>
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800e8da:	4604      	mov	r4, r0
 800e8dc:	6003      	str	r3, [r0, #0]
 800e8de:	f04f 0900 	mov.w	r9, #0
 800e8e2:	07eb      	lsls	r3, r5, #31
 800e8e4:	d50a      	bpl.n	800e8fc <__pow5mult+0x84>
 800e8e6:	4639      	mov	r1, r7
 800e8e8:	4622      	mov	r2, r4
 800e8ea:	4630      	mov	r0, r6
 800e8ec:	f7ff ff1a 	bl	800e724 <__multiply>
 800e8f0:	4639      	mov	r1, r7
 800e8f2:	4680      	mov	r8, r0
 800e8f4:	4630      	mov	r0, r6
 800e8f6:	f7ff fdfd 	bl	800e4f4 <_Bfree>
 800e8fa:	4647      	mov	r7, r8
 800e8fc:	106d      	asrs	r5, r5, #1
 800e8fe:	d00b      	beq.n	800e918 <__pow5mult+0xa0>
 800e900:	6820      	ldr	r0, [r4, #0]
 800e902:	b938      	cbnz	r0, 800e914 <__pow5mult+0x9c>
 800e904:	4622      	mov	r2, r4
 800e906:	4621      	mov	r1, r4
 800e908:	4630      	mov	r0, r6
 800e90a:	f7ff ff0b 	bl	800e724 <__multiply>
 800e90e:	6020      	str	r0, [r4, #0]
 800e910:	f8c0 9000 	str.w	r9, [r0]
 800e914:	4604      	mov	r4, r0
 800e916:	e7e4      	b.n	800e8e2 <__pow5mult+0x6a>
 800e918:	4638      	mov	r0, r7
 800e91a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e91e:	bf00      	nop
 800e920:	08010108 	.word	0x08010108
 800e924:	0800febe 	.word	0x0800febe
 800e928:	0800ffbc 	.word	0x0800ffbc

0800e92c <__lshift>:
 800e92c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e930:	460c      	mov	r4, r1
 800e932:	6849      	ldr	r1, [r1, #4]
 800e934:	6923      	ldr	r3, [r4, #16]
 800e936:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e93a:	68a3      	ldr	r3, [r4, #8]
 800e93c:	4607      	mov	r7, r0
 800e93e:	4691      	mov	r9, r2
 800e940:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e944:	f108 0601 	add.w	r6, r8, #1
 800e948:	42b3      	cmp	r3, r6
 800e94a:	db0b      	blt.n	800e964 <__lshift+0x38>
 800e94c:	4638      	mov	r0, r7
 800e94e:	f7ff fd91 	bl	800e474 <_Balloc>
 800e952:	4605      	mov	r5, r0
 800e954:	b948      	cbnz	r0, 800e96a <__lshift+0x3e>
 800e956:	4602      	mov	r2, r0
 800e958:	4b2a      	ldr	r3, [pc, #168]	; (800ea04 <__lshift+0xd8>)
 800e95a:	482b      	ldr	r0, [pc, #172]	; (800ea08 <__lshift+0xdc>)
 800e95c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e960:	f000 fbe4 	bl	800f12c <__assert_func>
 800e964:	3101      	adds	r1, #1
 800e966:	005b      	lsls	r3, r3, #1
 800e968:	e7ee      	b.n	800e948 <__lshift+0x1c>
 800e96a:	2300      	movs	r3, #0
 800e96c:	f100 0114 	add.w	r1, r0, #20
 800e970:	f100 0210 	add.w	r2, r0, #16
 800e974:	4618      	mov	r0, r3
 800e976:	4553      	cmp	r3, sl
 800e978:	db37      	blt.n	800e9ea <__lshift+0xbe>
 800e97a:	6920      	ldr	r0, [r4, #16]
 800e97c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e980:	f104 0314 	add.w	r3, r4, #20
 800e984:	f019 091f 	ands.w	r9, r9, #31
 800e988:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e98c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e990:	d02f      	beq.n	800e9f2 <__lshift+0xc6>
 800e992:	f1c9 0e20 	rsb	lr, r9, #32
 800e996:	468a      	mov	sl, r1
 800e998:	f04f 0c00 	mov.w	ip, #0
 800e99c:	681a      	ldr	r2, [r3, #0]
 800e99e:	fa02 f209 	lsl.w	r2, r2, r9
 800e9a2:	ea42 020c 	orr.w	r2, r2, ip
 800e9a6:	f84a 2b04 	str.w	r2, [sl], #4
 800e9aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9ae:	4298      	cmp	r0, r3
 800e9b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e9b4:	d8f2      	bhi.n	800e99c <__lshift+0x70>
 800e9b6:	1b03      	subs	r3, r0, r4
 800e9b8:	3b15      	subs	r3, #21
 800e9ba:	f023 0303 	bic.w	r3, r3, #3
 800e9be:	3304      	adds	r3, #4
 800e9c0:	f104 0215 	add.w	r2, r4, #21
 800e9c4:	4290      	cmp	r0, r2
 800e9c6:	bf38      	it	cc
 800e9c8:	2304      	movcc	r3, #4
 800e9ca:	f841 c003 	str.w	ip, [r1, r3]
 800e9ce:	f1bc 0f00 	cmp.w	ip, #0
 800e9d2:	d001      	beq.n	800e9d8 <__lshift+0xac>
 800e9d4:	f108 0602 	add.w	r6, r8, #2
 800e9d8:	3e01      	subs	r6, #1
 800e9da:	4638      	mov	r0, r7
 800e9dc:	612e      	str	r6, [r5, #16]
 800e9de:	4621      	mov	r1, r4
 800e9e0:	f7ff fd88 	bl	800e4f4 <_Bfree>
 800e9e4:	4628      	mov	r0, r5
 800e9e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800e9ee:	3301      	adds	r3, #1
 800e9f0:	e7c1      	b.n	800e976 <__lshift+0x4a>
 800e9f2:	3904      	subs	r1, #4
 800e9f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800e9fc:	4298      	cmp	r0, r3
 800e9fe:	d8f9      	bhi.n	800e9f4 <__lshift+0xc8>
 800ea00:	e7ea      	b.n	800e9d8 <__lshift+0xac>
 800ea02:	bf00      	nop
 800ea04:	0800ff30 	.word	0x0800ff30
 800ea08:	0800ffbc 	.word	0x0800ffbc

0800ea0c <__mcmp>:
 800ea0c:	b530      	push	{r4, r5, lr}
 800ea0e:	6902      	ldr	r2, [r0, #16]
 800ea10:	690c      	ldr	r4, [r1, #16]
 800ea12:	1b12      	subs	r2, r2, r4
 800ea14:	d10e      	bne.n	800ea34 <__mcmp+0x28>
 800ea16:	f100 0314 	add.w	r3, r0, #20
 800ea1a:	3114      	adds	r1, #20
 800ea1c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ea20:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ea24:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ea28:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ea2c:	42a5      	cmp	r5, r4
 800ea2e:	d003      	beq.n	800ea38 <__mcmp+0x2c>
 800ea30:	d305      	bcc.n	800ea3e <__mcmp+0x32>
 800ea32:	2201      	movs	r2, #1
 800ea34:	4610      	mov	r0, r2
 800ea36:	bd30      	pop	{r4, r5, pc}
 800ea38:	4283      	cmp	r3, r0
 800ea3a:	d3f3      	bcc.n	800ea24 <__mcmp+0x18>
 800ea3c:	e7fa      	b.n	800ea34 <__mcmp+0x28>
 800ea3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ea42:	e7f7      	b.n	800ea34 <__mcmp+0x28>

0800ea44 <__mdiff>:
 800ea44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea48:	460c      	mov	r4, r1
 800ea4a:	4606      	mov	r6, r0
 800ea4c:	4611      	mov	r1, r2
 800ea4e:	4620      	mov	r0, r4
 800ea50:	4690      	mov	r8, r2
 800ea52:	f7ff ffdb 	bl	800ea0c <__mcmp>
 800ea56:	1e05      	subs	r5, r0, #0
 800ea58:	d110      	bne.n	800ea7c <__mdiff+0x38>
 800ea5a:	4629      	mov	r1, r5
 800ea5c:	4630      	mov	r0, r6
 800ea5e:	f7ff fd09 	bl	800e474 <_Balloc>
 800ea62:	b930      	cbnz	r0, 800ea72 <__mdiff+0x2e>
 800ea64:	4b3a      	ldr	r3, [pc, #232]	; (800eb50 <__mdiff+0x10c>)
 800ea66:	4602      	mov	r2, r0
 800ea68:	f240 2132 	movw	r1, #562	; 0x232
 800ea6c:	4839      	ldr	r0, [pc, #228]	; (800eb54 <__mdiff+0x110>)
 800ea6e:	f000 fb5d 	bl	800f12c <__assert_func>
 800ea72:	2301      	movs	r3, #1
 800ea74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ea78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea7c:	bfa4      	itt	ge
 800ea7e:	4643      	movge	r3, r8
 800ea80:	46a0      	movge	r8, r4
 800ea82:	4630      	mov	r0, r6
 800ea84:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ea88:	bfa6      	itte	ge
 800ea8a:	461c      	movge	r4, r3
 800ea8c:	2500      	movge	r5, #0
 800ea8e:	2501      	movlt	r5, #1
 800ea90:	f7ff fcf0 	bl	800e474 <_Balloc>
 800ea94:	b920      	cbnz	r0, 800eaa0 <__mdiff+0x5c>
 800ea96:	4b2e      	ldr	r3, [pc, #184]	; (800eb50 <__mdiff+0x10c>)
 800ea98:	4602      	mov	r2, r0
 800ea9a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ea9e:	e7e5      	b.n	800ea6c <__mdiff+0x28>
 800eaa0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800eaa4:	6926      	ldr	r6, [r4, #16]
 800eaa6:	60c5      	str	r5, [r0, #12]
 800eaa8:	f104 0914 	add.w	r9, r4, #20
 800eaac:	f108 0514 	add.w	r5, r8, #20
 800eab0:	f100 0e14 	add.w	lr, r0, #20
 800eab4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800eab8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800eabc:	f108 0210 	add.w	r2, r8, #16
 800eac0:	46f2      	mov	sl, lr
 800eac2:	2100      	movs	r1, #0
 800eac4:	f859 3b04 	ldr.w	r3, [r9], #4
 800eac8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800eacc:	fa1f f883 	uxth.w	r8, r3
 800ead0:	fa11 f18b 	uxtah	r1, r1, fp
 800ead4:	0c1b      	lsrs	r3, r3, #16
 800ead6:	eba1 0808 	sub.w	r8, r1, r8
 800eada:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800eade:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800eae2:	fa1f f888 	uxth.w	r8, r8
 800eae6:	1419      	asrs	r1, r3, #16
 800eae8:	454e      	cmp	r6, r9
 800eaea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800eaee:	f84a 3b04 	str.w	r3, [sl], #4
 800eaf2:	d8e7      	bhi.n	800eac4 <__mdiff+0x80>
 800eaf4:	1b33      	subs	r3, r6, r4
 800eaf6:	3b15      	subs	r3, #21
 800eaf8:	f023 0303 	bic.w	r3, r3, #3
 800eafc:	3304      	adds	r3, #4
 800eafe:	3415      	adds	r4, #21
 800eb00:	42a6      	cmp	r6, r4
 800eb02:	bf38      	it	cc
 800eb04:	2304      	movcc	r3, #4
 800eb06:	441d      	add	r5, r3
 800eb08:	4473      	add	r3, lr
 800eb0a:	469e      	mov	lr, r3
 800eb0c:	462e      	mov	r6, r5
 800eb0e:	4566      	cmp	r6, ip
 800eb10:	d30e      	bcc.n	800eb30 <__mdiff+0xec>
 800eb12:	f10c 0203 	add.w	r2, ip, #3
 800eb16:	1b52      	subs	r2, r2, r5
 800eb18:	f022 0203 	bic.w	r2, r2, #3
 800eb1c:	3d03      	subs	r5, #3
 800eb1e:	45ac      	cmp	ip, r5
 800eb20:	bf38      	it	cc
 800eb22:	2200      	movcc	r2, #0
 800eb24:	441a      	add	r2, r3
 800eb26:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800eb2a:	b17b      	cbz	r3, 800eb4c <__mdiff+0x108>
 800eb2c:	6107      	str	r7, [r0, #16]
 800eb2e:	e7a3      	b.n	800ea78 <__mdiff+0x34>
 800eb30:	f856 8b04 	ldr.w	r8, [r6], #4
 800eb34:	fa11 f288 	uxtah	r2, r1, r8
 800eb38:	1414      	asrs	r4, r2, #16
 800eb3a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800eb3e:	b292      	uxth	r2, r2
 800eb40:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800eb44:	f84e 2b04 	str.w	r2, [lr], #4
 800eb48:	1421      	asrs	r1, r4, #16
 800eb4a:	e7e0      	b.n	800eb0e <__mdiff+0xca>
 800eb4c:	3f01      	subs	r7, #1
 800eb4e:	e7ea      	b.n	800eb26 <__mdiff+0xe2>
 800eb50:	0800ff30 	.word	0x0800ff30
 800eb54:	0800ffbc 	.word	0x0800ffbc

0800eb58 <__ulp>:
 800eb58:	b082      	sub	sp, #8
 800eb5a:	ed8d 0b00 	vstr	d0, [sp]
 800eb5e:	9b01      	ldr	r3, [sp, #4]
 800eb60:	4912      	ldr	r1, [pc, #72]	; (800ebac <__ulp+0x54>)
 800eb62:	4019      	ands	r1, r3
 800eb64:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800eb68:	2900      	cmp	r1, #0
 800eb6a:	dd05      	ble.n	800eb78 <__ulp+0x20>
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	460b      	mov	r3, r1
 800eb70:	ec43 2b10 	vmov	d0, r2, r3
 800eb74:	b002      	add	sp, #8
 800eb76:	4770      	bx	lr
 800eb78:	4249      	negs	r1, r1
 800eb7a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800eb7e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800eb82:	f04f 0200 	mov.w	r2, #0
 800eb86:	f04f 0300 	mov.w	r3, #0
 800eb8a:	da04      	bge.n	800eb96 <__ulp+0x3e>
 800eb8c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800eb90:	fa41 f300 	asr.w	r3, r1, r0
 800eb94:	e7ec      	b.n	800eb70 <__ulp+0x18>
 800eb96:	f1a0 0114 	sub.w	r1, r0, #20
 800eb9a:	291e      	cmp	r1, #30
 800eb9c:	bfda      	itte	le
 800eb9e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800eba2:	fa20 f101 	lsrle.w	r1, r0, r1
 800eba6:	2101      	movgt	r1, #1
 800eba8:	460a      	mov	r2, r1
 800ebaa:	e7e1      	b.n	800eb70 <__ulp+0x18>
 800ebac:	7ff00000 	.word	0x7ff00000

0800ebb0 <__b2d>:
 800ebb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebb2:	6905      	ldr	r5, [r0, #16]
 800ebb4:	f100 0714 	add.w	r7, r0, #20
 800ebb8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ebbc:	1f2e      	subs	r6, r5, #4
 800ebbe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ebc2:	4620      	mov	r0, r4
 800ebc4:	f7ff fd48 	bl	800e658 <__hi0bits>
 800ebc8:	f1c0 0320 	rsb	r3, r0, #32
 800ebcc:	280a      	cmp	r0, #10
 800ebce:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ec4c <__b2d+0x9c>
 800ebd2:	600b      	str	r3, [r1, #0]
 800ebd4:	dc14      	bgt.n	800ec00 <__b2d+0x50>
 800ebd6:	f1c0 0e0b 	rsb	lr, r0, #11
 800ebda:	fa24 f10e 	lsr.w	r1, r4, lr
 800ebde:	42b7      	cmp	r7, r6
 800ebe0:	ea41 030c 	orr.w	r3, r1, ip
 800ebe4:	bf34      	ite	cc
 800ebe6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ebea:	2100      	movcs	r1, #0
 800ebec:	3015      	adds	r0, #21
 800ebee:	fa04 f000 	lsl.w	r0, r4, r0
 800ebf2:	fa21 f10e 	lsr.w	r1, r1, lr
 800ebf6:	ea40 0201 	orr.w	r2, r0, r1
 800ebfa:	ec43 2b10 	vmov	d0, r2, r3
 800ebfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec00:	42b7      	cmp	r7, r6
 800ec02:	bf3a      	itte	cc
 800ec04:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ec08:	f1a5 0608 	subcc.w	r6, r5, #8
 800ec0c:	2100      	movcs	r1, #0
 800ec0e:	380b      	subs	r0, #11
 800ec10:	d017      	beq.n	800ec42 <__b2d+0x92>
 800ec12:	f1c0 0c20 	rsb	ip, r0, #32
 800ec16:	fa04 f500 	lsl.w	r5, r4, r0
 800ec1a:	42be      	cmp	r6, r7
 800ec1c:	fa21 f40c 	lsr.w	r4, r1, ip
 800ec20:	ea45 0504 	orr.w	r5, r5, r4
 800ec24:	bf8c      	ite	hi
 800ec26:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ec2a:	2400      	movls	r4, #0
 800ec2c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ec30:	fa01 f000 	lsl.w	r0, r1, r0
 800ec34:	fa24 f40c 	lsr.w	r4, r4, ip
 800ec38:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ec3c:	ea40 0204 	orr.w	r2, r0, r4
 800ec40:	e7db      	b.n	800ebfa <__b2d+0x4a>
 800ec42:	ea44 030c 	orr.w	r3, r4, ip
 800ec46:	460a      	mov	r2, r1
 800ec48:	e7d7      	b.n	800ebfa <__b2d+0x4a>
 800ec4a:	bf00      	nop
 800ec4c:	3ff00000 	.word	0x3ff00000

0800ec50 <__d2b>:
 800ec50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ec54:	4689      	mov	r9, r1
 800ec56:	2101      	movs	r1, #1
 800ec58:	ec57 6b10 	vmov	r6, r7, d0
 800ec5c:	4690      	mov	r8, r2
 800ec5e:	f7ff fc09 	bl	800e474 <_Balloc>
 800ec62:	4604      	mov	r4, r0
 800ec64:	b930      	cbnz	r0, 800ec74 <__d2b+0x24>
 800ec66:	4602      	mov	r2, r0
 800ec68:	4b25      	ldr	r3, [pc, #148]	; (800ed00 <__d2b+0xb0>)
 800ec6a:	4826      	ldr	r0, [pc, #152]	; (800ed04 <__d2b+0xb4>)
 800ec6c:	f240 310a 	movw	r1, #778	; 0x30a
 800ec70:	f000 fa5c 	bl	800f12c <__assert_func>
 800ec74:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ec78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ec7c:	bb35      	cbnz	r5, 800eccc <__d2b+0x7c>
 800ec7e:	2e00      	cmp	r6, #0
 800ec80:	9301      	str	r3, [sp, #4]
 800ec82:	d028      	beq.n	800ecd6 <__d2b+0x86>
 800ec84:	4668      	mov	r0, sp
 800ec86:	9600      	str	r6, [sp, #0]
 800ec88:	f7ff fd06 	bl	800e698 <__lo0bits>
 800ec8c:	9900      	ldr	r1, [sp, #0]
 800ec8e:	b300      	cbz	r0, 800ecd2 <__d2b+0x82>
 800ec90:	9a01      	ldr	r2, [sp, #4]
 800ec92:	f1c0 0320 	rsb	r3, r0, #32
 800ec96:	fa02 f303 	lsl.w	r3, r2, r3
 800ec9a:	430b      	orrs	r3, r1
 800ec9c:	40c2      	lsrs	r2, r0
 800ec9e:	6163      	str	r3, [r4, #20]
 800eca0:	9201      	str	r2, [sp, #4]
 800eca2:	9b01      	ldr	r3, [sp, #4]
 800eca4:	61a3      	str	r3, [r4, #24]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	bf14      	ite	ne
 800ecaa:	2202      	movne	r2, #2
 800ecac:	2201      	moveq	r2, #1
 800ecae:	6122      	str	r2, [r4, #16]
 800ecb0:	b1d5      	cbz	r5, 800ece8 <__d2b+0x98>
 800ecb2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ecb6:	4405      	add	r5, r0
 800ecb8:	f8c9 5000 	str.w	r5, [r9]
 800ecbc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ecc0:	f8c8 0000 	str.w	r0, [r8]
 800ecc4:	4620      	mov	r0, r4
 800ecc6:	b003      	add	sp, #12
 800ecc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eccc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ecd0:	e7d5      	b.n	800ec7e <__d2b+0x2e>
 800ecd2:	6161      	str	r1, [r4, #20]
 800ecd4:	e7e5      	b.n	800eca2 <__d2b+0x52>
 800ecd6:	a801      	add	r0, sp, #4
 800ecd8:	f7ff fcde 	bl	800e698 <__lo0bits>
 800ecdc:	9b01      	ldr	r3, [sp, #4]
 800ecde:	6163      	str	r3, [r4, #20]
 800ece0:	2201      	movs	r2, #1
 800ece2:	6122      	str	r2, [r4, #16]
 800ece4:	3020      	adds	r0, #32
 800ece6:	e7e3      	b.n	800ecb0 <__d2b+0x60>
 800ece8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ecec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ecf0:	f8c9 0000 	str.w	r0, [r9]
 800ecf4:	6918      	ldr	r0, [r3, #16]
 800ecf6:	f7ff fcaf 	bl	800e658 <__hi0bits>
 800ecfa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ecfe:	e7df      	b.n	800ecc0 <__d2b+0x70>
 800ed00:	0800ff30 	.word	0x0800ff30
 800ed04:	0800ffbc 	.word	0x0800ffbc

0800ed08 <__ratio>:
 800ed08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed0c:	4688      	mov	r8, r1
 800ed0e:	4669      	mov	r1, sp
 800ed10:	4681      	mov	r9, r0
 800ed12:	f7ff ff4d 	bl	800ebb0 <__b2d>
 800ed16:	a901      	add	r1, sp, #4
 800ed18:	4640      	mov	r0, r8
 800ed1a:	ec55 4b10 	vmov	r4, r5, d0
 800ed1e:	f7ff ff47 	bl	800ebb0 <__b2d>
 800ed22:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ed26:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ed2a:	eba3 0c02 	sub.w	ip, r3, r2
 800ed2e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ed32:	1a9b      	subs	r3, r3, r2
 800ed34:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ed38:	ec51 0b10 	vmov	r0, r1, d0
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	bfd6      	itet	le
 800ed40:	460a      	movle	r2, r1
 800ed42:	462a      	movgt	r2, r5
 800ed44:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ed48:	468b      	mov	fp, r1
 800ed4a:	462f      	mov	r7, r5
 800ed4c:	bfd4      	ite	le
 800ed4e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ed52:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ed56:	4620      	mov	r0, r4
 800ed58:	ee10 2a10 	vmov	r2, s0
 800ed5c:	465b      	mov	r3, fp
 800ed5e:	4639      	mov	r1, r7
 800ed60:	f7f1 fd74 	bl	800084c <__aeabi_ddiv>
 800ed64:	ec41 0b10 	vmov	d0, r0, r1
 800ed68:	b003      	add	sp, #12
 800ed6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ed6e <__copybits>:
 800ed6e:	3901      	subs	r1, #1
 800ed70:	b570      	push	{r4, r5, r6, lr}
 800ed72:	1149      	asrs	r1, r1, #5
 800ed74:	6914      	ldr	r4, [r2, #16]
 800ed76:	3101      	adds	r1, #1
 800ed78:	f102 0314 	add.w	r3, r2, #20
 800ed7c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ed80:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ed84:	1f05      	subs	r5, r0, #4
 800ed86:	42a3      	cmp	r3, r4
 800ed88:	d30c      	bcc.n	800eda4 <__copybits+0x36>
 800ed8a:	1aa3      	subs	r3, r4, r2
 800ed8c:	3b11      	subs	r3, #17
 800ed8e:	f023 0303 	bic.w	r3, r3, #3
 800ed92:	3211      	adds	r2, #17
 800ed94:	42a2      	cmp	r2, r4
 800ed96:	bf88      	it	hi
 800ed98:	2300      	movhi	r3, #0
 800ed9a:	4418      	add	r0, r3
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	4288      	cmp	r0, r1
 800eda0:	d305      	bcc.n	800edae <__copybits+0x40>
 800eda2:	bd70      	pop	{r4, r5, r6, pc}
 800eda4:	f853 6b04 	ldr.w	r6, [r3], #4
 800eda8:	f845 6f04 	str.w	r6, [r5, #4]!
 800edac:	e7eb      	b.n	800ed86 <__copybits+0x18>
 800edae:	f840 3b04 	str.w	r3, [r0], #4
 800edb2:	e7f4      	b.n	800ed9e <__copybits+0x30>

0800edb4 <__any_on>:
 800edb4:	f100 0214 	add.w	r2, r0, #20
 800edb8:	6900      	ldr	r0, [r0, #16]
 800edba:	114b      	asrs	r3, r1, #5
 800edbc:	4298      	cmp	r0, r3
 800edbe:	b510      	push	{r4, lr}
 800edc0:	db11      	blt.n	800ede6 <__any_on+0x32>
 800edc2:	dd0a      	ble.n	800edda <__any_on+0x26>
 800edc4:	f011 011f 	ands.w	r1, r1, #31
 800edc8:	d007      	beq.n	800edda <__any_on+0x26>
 800edca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800edce:	fa24 f001 	lsr.w	r0, r4, r1
 800edd2:	fa00 f101 	lsl.w	r1, r0, r1
 800edd6:	428c      	cmp	r4, r1
 800edd8:	d10b      	bne.n	800edf2 <__any_on+0x3e>
 800edda:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800edde:	4293      	cmp	r3, r2
 800ede0:	d803      	bhi.n	800edea <__any_on+0x36>
 800ede2:	2000      	movs	r0, #0
 800ede4:	bd10      	pop	{r4, pc}
 800ede6:	4603      	mov	r3, r0
 800ede8:	e7f7      	b.n	800edda <__any_on+0x26>
 800edea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800edee:	2900      	cmp	r1, #0
 800edf0:	d0f5      	beq.n	800edde <__any_on+0x2a>
 800edf2:	2001      	movs	r0, #1
 800edf4:	e7f6      	b.n	800ede4 <__any_on+0x30>

0800edf6 <_calloc_r>:
 800edf6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800edf8:	fba1 2402 	umull	r2, r4, r1, r2
 800edfc:	b94c      	cbnz	r4, 800ee12 <_calloc_r+0x1c>
 800edfe:	4611      	mov	r1, r2
 800ee00:	9201      	str	r2, [sp, #4]
 800ee02:	f7fc fb4d 	bl	800b4a0 <_malloc_r>
 800ee06:	9a01      	ldr	r2, [sp, #4]
 800ee08:	4605      	mov	r5, r0
 800ee0a:	b930      	cbnz	r0, 800ee1a <_calloc_r+0x24>
 800ee0c:	4628      	mov	r0, r5
 800ee0e:	b003      	add	sp, #12
 800ee10:	bd30      	pop	{r4, r5, pc}
 800ee12:	220c      	movs	r2, #12
 800ee14:	6002      	str	r2, [r0, #0]
 800ee16:	2500      	movs	r5, #0
 800ee18:	e7f8      	b.n	800ee0c <_calloc_r+0x16>
 800ee1a:	4621      	mov	r1, r4
 800ee1c:	f7fc facc 	bl	800b3b8 <memset>
 800ee20:	e7f4      	b.n	800ee0c <_calloc_r+0x16>

0800ee22 <__ssputs_r>:
 800ee22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee26:	688e      	ldr	r6, [r1, #8]
 800ee28:	429e      	cmp	r6, r3
 800ee2a:	4682      	mov	sl, r0
 800ee2c:	460c      	mov	r4, r1
 800ee2e:	4690      	mov	r8, r2
 800ee30:	461f      	mov	r7, r3
 800ee32:	d838      	bhi.n	800eea6 <__ssputs_r+0x84>
 800ee34:	898a      	ldrh	r2, [r1, #12]
 800ee36:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ee3a:	d032      	beq.n	800eea2 <__ssputs_r+0x80>
 800ee3c:	6825      	ldr	r5, [r4, #0]
 800ee3e:	6909      	ldr	r1, [r1, #16]
 800ee40:	eba5 0901 	sub.w	r9, r5, r1
 800ee44:	6965      	ldr	r5, [r4, #20]
 800ee46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ee4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ee4e:	3301      	adds	r3, #1
 800ee50:	444b      	add	r3, r9
 800ee52:	106d      	asrs	r5, r5, #1
 800ee54:	429d      	cmp	r5, r3
 800ee56:	bf38      	it	cc
 800ee58:	461d      	movcc	r5, r3
 800ee5a:	0553      	lsls	r3, r2, #21
 800ee5c:	d531      	bpl.n	800eec2 <__ssputs_r+0xa0>
 800ee5e:	4629      	mov	r1, r5
 800ee60:	f7fc fb1e 	bl	800b4a0 <_malloc_r>
 800ee64:	4606      	mov	r6, r0
 800ee66:	b950      	cbnz	r0, 800ee7e <__ssputs_r+0x5c>
 800ee68:	230c      	movs	r3, #12
 800ee6a:	f8ca 3000 	str.w	r3, [sl]
 800ee6e:	89a3      	ldrh	r3, [r4, #12]
 800ee70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee74:	81a3      	strh	r3, [r4, #12]
 800ee76:	f04f 30ff 	mov.w	r0, #4294967295
 800ee7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee7e:	6921      	ldr	r1, [r4, #16]
 800ee80:	464a      	mov	r2, r9
 800ee82:	f7ff fadd 	bl	800e440 <memcpy>
 800ee86:	89a3      	ldrh	r3, [r4, #12]
 800ee88:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ee8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee90:	81a3      	strh	r3, [r4, #12]
 800ee92:	6126      	str	r6, [r4, #16]
 800ee94:	6165      	str	r5, [r4, #20]
 800ee96:	444e      	add	r6, r9
 800ee98:	eba5 0509 	sub.w	r5, r5, r9
 800ee9c:	6026      	str	r6, [r4, #0]
 800ee9e:	60a5      	str	r5, [r4, #8]
 800eea0:	463e      	mov	r6, r7
 800eea2:	42be      	cmp	r6, r7
 800eea4:	d900      	bls.n	800eea8 <__ssputs_r+0x86>
 800eea6:	463e      	mov	r6, r7
 800eea8:	6820      	ldr	r0, [r4, #0]
 800eeaa:	4632      	mov	r2, r6
 800eeac:	4641      	mov	r1, r8
 800eeae:	f000 f970 	bl	800f192 <memmove>
 800eeb2:	68a3      	ldr	r3, [r4, #8]
 800eeb4:	1b9b      	subs	r3, r3, r6
 800eeb6:	60a3      	str	r3, [r4, #8]
 800eeb8:	6823      	ldr	r3, [r4, #0]
 800eeba:	4433      	add	r3, r6
 800eebc:	6023      	str	r3, [r4, #0]
 800eebe:	2000      	movs	r0, #0
 800eec0:	e7db      	b.n	800ee7a <__ssputs_r+0x58>
 800eec2:	462a      	mov	r2, r5
 800eec4:	f000 f97f 	bl	800f1c6 <_realloc_r>
 800eec8:	4606      	mov	r6, r0
 800eeca:	2800      	cmp	r0, #0
 800eecc:	d1e1      	bne.n	800ee92 <__ssputs_r+0x70>
 800eece:	6921      	ldr	r1, [r4, #16]
 800eed0:	4650      	mov	r0, sl
 800eed2:	f7fc fa79 	bl	800b3c8 <_free_r>
 800eed6:	e7c7      	b.n	800ee68 <__ssputs_r+0x46>

0800eed8 <_svfiprintf_r>:
 800eed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eedc:	4698      	mov	r8, r3
 800eede:	898b      	ldrh	r3, [r1, #12]
 800eee0:	061b      	lsls	r3, r3, #24
 800eee2:	b09d      	sub	sp, #116	; 0x74
 800eee4:	4607      	mov	r7, r0
 800eee6:	460d      	mov	r5, r1
 800eee8:	4614      	mov	r4, r2
 800eeea:	d50e      	bpl.n	800ef0a <_svfiprintf_r+0x32>
 800eeec:	690b      	ldr	r3, [r1, #16]
 800eeee:	b963      	cbnz	r3, 800ef0a <_svfiprintf_r+0x32>
 800eef0:	2140      	movs	r1, #64	; 0x40
 800eef2:	f7fc fad5 	bl	800b4a0 <_malloc_r>
 800eef6:	6028      	str	r0, [r5, #0]
 800eef8:	6128      	str	r0, [r5, #16]
 800eefa:	b920      	cbnz	r0, 800ef06 <_svfiprintf_r+0x2e>
 800eefc:	230c      	movs	r3, #12
 800eefe:	603b      	str	r3, [r7, #0]
 800ef00:	f04f 30ff 	mov.w	r0, #4294967295
 800ef04:	e0d1      	b.n	800f0aa <_svfiprintf_r+0x1d2>
 800ef06:	2340      	movs	r3, #64	; 0x40
 800ef08:	616b      	str	r3, [r5, #20]
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	9309      	str	r3, [sp, #36]	; 0x24
 800ef0e:	2320      	movs	r3, #32
 800ef10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ef14:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef18:	2330      	movs	r3, #48	; 0x30
 800ef1a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f0c4 <_svfiprintf_r+0x1ec>
 800ef1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ef22:	f04f 0901 	mov.w	r9, #1
 800ef26:	4623      	mov	r3, r4
 800ef28:	469a      	mov	sl, r3
 800ef2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef2e:	b10a      	cbz	r2, 800ef34 <_svfiprintf_r+0x5c>
 800ef30:	2a25      	cmp	r2, #37	; 0x25
 800ef32:	d1f9      	bne.n	800ef28 <_svfiprintf_r+0x50>
 800ef34:	ebba 0b04 	subs.w	fp, sl, r4
 800ef38:	d00b      	beq.n	800ef52 <_svfiprintf_r+0x7a>
 800ef3a:	465b      	mov	r3, fp
 800ef3c:	4622      	mov	r2, r4
 800ef3e:	4629      	mov	r1, r5
 800ef40:	4638      	mov	r0, r7
 800ef42:	f7ff ff6e 	bl	800ee22 <__ssputs_r>
 800ef46:	3001      	adds	r0, #1
 800ef48:	f000 80aa 	beq.w	800f0a0 <_svfiprintf_r+0x1c8>
 800ef4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef4e:	445a      	add	r2, fp
 800ef50:	9209      	str	r2, [sp, #36]	; 0x24
 800ef52:	f89a 3000 	ldrb.w	r3, [sl]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	f000 80a2 	beq.w	800f0a0 <_svfiprintf_r+0x1c8>
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	f04f 32ff 	mov.w	r2, #4294967295
 800ef62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef66:	f10a 0a01 	add.w	sl, sl, #1
 800ef6a:	9304      	str	r3, [sp, #16]
 800ef6c:	9307      	str	r3, [sp, #28]
 800ef6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ef72:	931a      	str	r3, [sp, #104]	; 0x68
 800ef74:	4654      	mov	r4, sl
 800ef76:	2205      	movs	r2, #5
 800ef78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef7c:	4851      	ldr	r0, [pc, #324]	; (800f0c4 <_svfiprintf_r+0x1ec>)
 800ef7e:	f7f1 f92f 	bl	80001e0 <memchr>
 800ef82:	9a04      	ldr	r2, [sp, #16]
 800ef84:	b9d8      	cbnz	r0, 800efbe <_svfiprintf_r+0xe6>
 800ef86:	06d0      	lsls	r0, r2, #27
 800ef88:	bf44      	itt	mi
 800ef8a:	2320      	movmi	r3, #32
 800ef8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef90:	0711      	lsls	r1, r2, #28
 800ef92:	bf44      	itt	mi
 800ef94:	232b      	movmi	r3, #43	; 0x2b
 800ef96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef9a:	f89a 3000 	ldrb.w	r3, [sl]
 800ef9e:	2b2a      	cmp	r3, #42	; 0x2a
 800efa0:	d015      	beq.n	800efce <_svfiprintf_r+0xf6>
 800efa2:	9a07      	ldr	r2, [sp, #28]
 800efa4:	4654      	mov	r4, sl
 800efa6:	2000      	movs	r0, #0
 800efa8:	f04f 0c0a 	mov.w	ip, #10
 800efac:	4621      	mov	r1, r4
 800efae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800efb2:	3b30      	subs	r3, #48	; 0x30
 800efb4:	2b09      	cmp	r3, #9
 800efb6:	d94e      	bls.n	800f056 <_svfiprintf_r+0x17e>
 800efb8:	b1b0      	cbz	r0, 800efe8 <_svfiprintf_r+0x110>
 800efba:	9207      	str	r2, [sp, #28]
 800efbc:	e014      	b.n	800efe8 <_svfiprintf_r+0x110>
 800efbe:	eba0 0308 	sub.w	r3, r0, r8
 800efc2:	fa09 f303 	lsl.w	r3, r9, r3
 800efc6:	4313      	orrs	r3, r2
 800efc8:	9304      	str	r3, [sp, #16]
 800efca:	46a2      	mov	sl, r4
 800efcc:	e7d2      	b.n	800ef74 <_svfiprintf_r+0x9c>
 800efce:	9b03      	ldr	r3, [sp, #12]
 800efd0:	1d19      	adds	r1, r3, #4
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	9103      	str	r1, [sp, #12]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	bfbb      	ittet	lt
 800efda:	425b      	neglt	r3, r3
 800efdc:	f042 0202 	orrlt.w	r2, r2, #2
 800efe0:	9307      	strge	r3, [sp, #28]
 800efe2:	9307      	strlt	r3, [sp, #28]
 800efe4:	bfb8      	it	lt
 800efe6:	9204      	strlt	r2, [sp, #16]
 800efe8:	7823      	ldrb	r3, [r4, #0]
 800efea:	2b2e      	cmp	r3, #46	; 0x2e
 800efec:	d10c      	bne.n	800f008 <_svfiprintf_r+0x130>
 800efee:	7863      	ldrb	r3, [r4, #1]
 800eff0:	2b2a      	cmp	r3, #42	; 0x2a
 800eff2:	d135      	bne.n	800f060 <_svfiprintf_r+0x188>
 800eff4:	9b03      	ldr	r3, [sp, #12]
 800eff6:	1d1a      	adds	r2, r3, #4
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	9203      	str	r2, [sp, #12]
 800effc:	2b00      	cmp	r3, #0
 800effe:	bfb8      	it	lt
 800f000:	f04f 33ff 	movlt.w	r3, #4294967295
 800f004:	3402      	adds	r4, #2
 800f006:	9305      	str	r3, [sp, #20]
 800f008:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f0d4 <_svfiprintf_r+0x1fc>
 800f00c:	7821      	ldrb	r1, [r4, #0]
 800f00e:	2203      	movs	r2, #3
 800f010:	4650      	mov	r0, sl
 800f012:	f7f1 f8e5 	bl	80001e0 <memchr>
 800f016:	b140      	cbz	r0, 800f02a <_svfiprintf_r+0x152>
 800f018:	2340      	movs	r3, #64	; 0x40
 800f01a:	eba0 000a 	sub.w	r0, r0, sl
 800f01e:	fa03 f000 	lsl.w	r0, r3, r0
 800f022:	9b04      	ldr	r3, [sp, #16]
 800f024:	4303      	orrs	r3, r0
 800f026:	3401      	adds	r4, #1
 800f028:	9304      	str	r3, [sp, #16]
 800f02a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f02e:	4826      	ldr	r0, [pc, #152]	; (800f0c8 <_svfiprintf_r+0x1f0>)
 800f030:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f034:	2206      	movs	r2, #6
 800f036:	f7f1 f8d3 	bl	80001e0 <memchr>
 800f03a:	2800      	cmp	r0, #0
 800f03c:	d038      	beq.n	800f0b0 <_svfiprintf_r+0x1d8>
 800f03e:	4b23      	ldr	r3, [pc, #140]	; (800f0cc <_svfiprintf_r+0x1f4>)
 800f040:	bb1b      	cbnz	r3, 800f08a <_svfiprintf_r+0x1b2>
 800f042:	9b03      	ldr	r3, [sp, #12]
 800f044:	3307      	adds	r3, #7
 800f046:	f023 0307 	bic.w	r3, r3, #7
 800f04a:	3308      	adds	r3, #8
 800f04c:	9303      	str	r3, [sp, #12]
 800f04e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f050:	4433      	add	r3, r6
 800f052:	9309      	str	r3, [sp, #36]	; 0x24
 800f054:	e767      	b.n	800ef26 <_svfiprintf_r+0x4e>
 800f056:	fb0c 3202 	mla	r2, ip, r2, r3
 800f05a:	460c      	mov	r4, r1
 800f05c:	2001      	movs	r0, #1
 800f05e:	e7a5      	b.n	800efac <_svfiprintf_r+0xd4>
 800f060:	2300      	movs	r3, #0
 800f062:	3401      	adds	r4, #1
 800f064:	9305      	str	r3, [sp, #20]
 800f066:	4619      	mov	r1, r3
 800f068:	f04f 0c0a 	mov.w	ip, #10
 800f06c:	4620      	mov	r0, r4
 800f06e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f072:	3a30      	subs	r2, #48	; 0x30
 800f074:	2a09      	cmp	r2, #9
 800f076:	d903      	bls.n	800f080 <_svfiprintf_r+0x1a8>
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d0c5      	beq.n	800f008 <_svfiprintf_r+0x130>
 800f07c:	9105      	str	r1, [sp, #20]
 800f07e:	e7c3      	b.n	800f008 <_svfiprintf_r+0x130>
 800f080:	fb0c 2101 	mla	r1, ip, r1, r2
 800f084:	4604      	mov	r4, r0
 800f086:	2301      	movs	r3, #1
 800f088:	e7f0      	b.n	800f06c <_svfiprintf_r+0x194>
 800f08a:	ab03      	add	r3, sp, #12
 800f08c:	9300      	str	r3, [sp, #0]
 800f08e:	462a      	mov	r2, r5
 800f090:	4b0f      	ldr	r3, [pc, #60]	; (800f0d0 <_svfiprintf_r+0x1f8>)
 800f092:	a904      	add	r1, sp, #16
 800f094:	4638      	mov	r0, r7
 800f096:	f7fc fb17 	bl	800b6c8 <_printf_float>
 800f09a:	1c42      	adds	r2, r0, #1
 800f09c:	4606      	mov	r6, r0
 800f09e:	d1d6      	bne.n	800f04e <_svfiprintf_r+0x176>
 800f0a0:	89ab      	ldrh	r3, [r5, #12]
 800f0a2:	065b      	lsls	r3, r3, #25
 800f0a4:	f53f af2c 	bmi.w	800ef00 <_svfiprintf_r+0x28>
 800f0a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f0aa:	b01d      	add	sp, #116	; 0x74
 800f0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0b0:	ab03      	add	r3, sp, #12
 800f0b2:	9300      	str	r3, [sp, #0]
 800f0b4:	462a      	mov	r2, r5
 800f0b6:	4b06      	ldr	r3, [pc, #24]	; (800f0d0 <_svfiprintf_r+0x1f8>)
 800f0b8:	a904      	add	r1, sp, #16
 800f0ba:	4638      	mov	r0, r7
 800f0bc:	f7fc fda8 	bl	800bc10 <_printf_i>
 800f0c0:	e7eb      	b.n	800f09a <_svfiprintf_r+0x1c2>
 800f0c2:	bf00      	nop
 800f0c4:	08010114 	.word	0x08010114
 800f0c8:	0801011e 	.word	0x0801011e
 800f0cc:	0800b6c9 	.word	0x0800b6c9
 800f0d0:	0800ee23 	.word	0x0800ee23
 800f0d4:	0801011a 	.word	0x0801011a

0800f0d8 <nan>:
 800f0d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f0e0 <nan+0x8>
 800f0dc:	4770      	bx	lr
 800f0de:	bf00      	nop
 800f0e0:	00000000 	.word	0x00000000
 800f0e4:	7ff80000 	.word	0x7ff80000

0800f0e8 <strncmp>:
 800f0e8:	b510      	push	{r4, lr}
 800f0ea:	b17a      	cbz	r2, 800f10c <strncmp+0x24>
 800f0ec:	4603      	mov	r3, r0
 800f0ee:	3901      	subs	r1, #1
 800f0f0:	1884      	adds	r4, r0, r2
 800f0f2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f0f6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f0fa:	4290      	cmp	r0, r2
 800f0fc:	d101      	bne.n	800f102 <strncmp+0x1a>
 800f0fe:	42a3      	cmp	r3, r4
 800f100:	d101      	bne.n	800f106 <strncmp+0x1e>
 800f102:	1a80      	subs	r0, r0, r2
 800f104:	bd10      	pop	{r4, pc}
 800f106:	2800      	cmp	r0, #0
 800f108:	d1f3      	bne.n	800f0f2 <strncmp+0xa>
 800f10a:	e7fa      	b.n	800f102 <strncmp+0x1a>
 800f10c:	4610      	mov	r0, r2
 800f10e:	e7f9      	b.n	800f104 <strncmp+0x1c>

0800f110 <__ascii_wctomb>:
 800f110:	b149      	cbz	r1, 800f126 <__ascii_wctomb+0x16>
 800f112:	2aff      	cmp	r2, #255	; 0xff
 800f114:	bf85      	ittet	hi
 800f116:	238a      	movhi	r3, #138	; 0x8a
 800f118:	6003      	strhi	r3, [r0, #0]
 800f11a:	700a      	strbls	r2, [r1, #0]
 800f11c:	f04f 30ff 	movhi.w	r0, #4294967295
 800f120:	bf98      	it	ls
 800f122:	2001      	movls	r0, #1
 800f124:	4770      	bx	lr
 800f126:	4608      	mov	r0, r1
 800f128:	4770      	bx	lr
	...

0800f12c <__assert_func>:
 800f12c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f12e:	4614      	mov	r4, r2
 800f130:	461a      	mov	r2, r3
 800f132:	4b09      	ldr	r3, [pc, #36]	; (800f158 <__assert_func+0x2c>)
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	4605      	mov	r5, r0
 800f138:	68d8      	ldr	r0, [r3, #12]
 800f13a:	b14c      	cbz	r4, 800f150 <__assert_func+0x24>
 800f13c:	4b07      	ldr	r3, [pc, #28]	; (800f15c <__assert_func+0x30>)
 800f13e:	9100      	str	r1, [sp, #0]
 800f140:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f144:	4906      	ldr	r1, [pc, #24]	; (800f160 <__assert_func+0x34>)
 800f146:	462b      	mov	r3, r5
 800f148:	f000 f80e 	bl	800f168 <fiprintf>
 800f14c:	f000 fa84 	bl	800f658 <abort>
 800f150:	4b04      	ldr	r3, [pc, #16]	; (800f164 <__assert_func+0x38>)
 800f152:	461c      	mov	r4, r3
 800f154:	e7f3      	b.n	800f13e <__assert_func+0x12>
 800f156:	bf00      	nop
 800f158:	2000002c 	.word	0x2000002c
 800f15c:	08010125 	.word	0x08010125
 800f160:	08010132 	.word	0x08010132
 800f164:	08010160 	.word	0x08010160

0800f168 <fiprintf>:
 800f168:	b40e      	push	{r1, r2, r3}
 800f16a:	b503      	push	{r0, r1, lr}
 800f16c:	4601      	mov	r1, r0
 800f16e:	ab03      	add	r3, sp, #12
 800f170:	4805      	ldr	r0, [pc, #20]	; (800f188 <fiprintf+0x20>)
 800f172:	f853 2b04 	ldr.w	r2, [r3], #4
 800f176:	6800      	ldr	r0, [r0, #0]
 800f178:	9301      	str	r3, [sp, #4]
 800f17a:	f000 f87d 	bl	800f278 <_vfiprintf_r>
 800f17e:	b002      	add	sp, #8
 800f180:	f85d eb04 	ldr.w	lr, [sp], #4
 800f184:	b003      	add	sp, #12
 800f186:	4770      	bx	lr
 800f188:	2000002c 	.word	0x2000002c

0800f18c <__retarget_lock_init_recursive>:
 800f18c:	4770      	bx	lr

0800f18e <__retarget_lock_acquire_recursive>:
 800f18e:	4770      	bx	lr

0800f190 <__retarget_lock_release_recursive>:
 800f190:	4770      	bx	lr

0800f192 <memmove>:
 800f192:	4288      	cmp	r0, r1
 800f194:	b510      	push	{r4, lr}
 800f196:	eb01 0402 	add.w	r4, r1, r2
 800f19a:	d902      	bls.n	800f1a2 <memmove+0x10>
 800f19c:	4284      	cmp	r4, r0
 800f19e:	4623      	mov	r3, r4
 800f1a0:	d807      	bhi.n	800f1b2 <memmove+0x20>
 800f1a2:	1e43      	subs	r3, r0, #1
 800f1a4:	42a1      	cmp	r1, r4
 800f1a6:	d008      	beq.n	800f1ba <memmove+0x28>
 800f1a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f1ac:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f1b0:	e7f8      	b.n	800f1a4 <memmove+0x12>
 800f1b2:	4402      	add	r2, r0
 800f1b4:	4601      	mov	r1, r0
 800f1b6:	428a      	cmp	r2, r1
 800f1b8:	d100      	bne.n	800f1bc <memmove+0x2a>
 800f1ba:	bd10      	pop	{r4, pc}
 800f1bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f1c0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f1c4:	e7f7      	b.n	800f1b6 <memmove+0x24>

0800f1c6 <_realloc_r>:
 800f1c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1ca:	4680      	mov	r8, r0
 800f1cc:	4614      	mov	r4, r2
 800f1ce:	460e      	mov	r6, r1
 800f1d0:	b921      	cbnz	r1, 800f1dc <_realloc_r+0x16>
 800f1d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f1d6:	4611      	mov	r1, r2
 800f1d8:	f7fc b962 	b.w	800b4a0 <_malloc_r>
 800f1dc:	b92a      	cbnz	r2, 800f1ea <_realloc_r+0x24>
 800f1de:	f7fc f8f3 	bl	800b3c8 <_free_r>
 800f1e2:	4625      	mov	r5, r4
 800f1e4:	4628      	mov	r0, r5
 800f1e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1ea:	f000 fc59 	bl	800faa0 <_malloc_usable_size_r>
 800f1ee:	4284      	cmp	r4, r0
 800f1f0:	4607      	mov	r7, r0
 800f1f2:	d802      	bhi.n	800f1fa <_realloc_r+0x34>
 800f1f4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f1f8:	d812      	bhi.n	800f220 <_realloc_r+0x5a>
 800f1fa:	4621      	mov	r1, r4
 800f1fc:	4640      	mov	r0, r8
 800f1fe:	f7fc f94f 	bl	800b4a0 <_malloc_r>
 800f202:	4605      	mov	r5, r0
 800f204:	2800      	cmp	r0, #0
 800f206:	d0ed      	beq.n	800f1e4 <_realloc_r+0x1e>
 800f208:	42bc      	cmp	r4, r7
 800f20a:	4622      	mov	r2, r4
 800f20c:	4631      	mov	r1, r6
 800f20e:	bf28      	it	cs
 800f210:	463a      	movcs	r2, r7
 800f212:	f7ff f915 	bl	800e440 <memcpy>
 800f216:	4631      	mov	r1, r6
 800f218:	4640      	mov	r0, r8
 800f21a:	f7fc f8d5 	bl	800b3c8 <_free_r>
 800f21e:	e7e1      	b.n	800f1e4 <_realloc_r+0x1e>
 800f220:	4635      	mov	r5, r6
 800f222:	e7df      	b.n	800f1e4 <_realloc_r+0x1e>

0800f224 <__sfputc_r>:
 800f224:	6893      	ldr	r3, [r2, #8]
 800f226:	3b01      	subs	r3, #1
 800f228:	2b00      	cmp	r3, #0
 800f22a:	b410      	push	{r4}
 800f22c:	6093      	str	r3, [r2, #8]
 800f22e:	da08      	bge.n	800f242 <__sfputc_r+0x1e>
 800f230:	6994      	ldr	r4, [r2, #24]
 800f232:	42a3      	cmp	r3, r4
 800f234:	db01      	blt.n	800f23a <__sfputc_r+0x16>
 800f236:	290a      	cmp	r1, #10
 800f238:	d103      	bne.n	800f242 <__sfputc_r+0x1e>
 800f23a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f23e:	f000 b94b 	b.w	800f4d8 <__swbuf_r>
 800f242:	6813      	ldr	r3, [r2, #0]
 800f244:	1c58      	adds	r0, r3, #1
 800f246:	6010      	str	r0, [r2, #0]
 800f248:	7019      	strb	r1, [r3, #0]
 800f24a:	4608      	mov	r0, r1
 800f24c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f250:	4770      	bx	lr

0800f252 <__sfputs_r>:
 800f252:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f254:	4606      	mov	r6, r0
 800f256:	460f      	mov	r7, r1
 800f258:	4614      	mov	r4, r2
 800f25a:	18d5      	adds	r5, r2, r3
 800f25c:	42ac      	cmp	r4, r5
 800f25e:	d101      	bne.n	800f264 <__sfputs_r+0x12>
 800f260:	2000      	movs	r0, #0
 800f262:	e007      	b.n	800f274 <__sfputs_r+0x22>
 800f264:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f268:	463a      	mov	r2, r7
 800f26a:	4630      	mov	r0, r6
 800f26c:	f7ff ffda 	bl	800f224 <__sfputc_r>
 800f270:	1c43      	adds	r3, r0, #1
 800f272:	d1f3      	bne.n	800f25c <__sfputs_r+0xa>
 800f274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f278 <_vfiprintf_r>:
 800f278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f27c:	460d      	mov	r5, r1
 800f27e:	b09d      	sub	sp, #116	; 0x74
 800f280:	4614      	mov	r4, r2
 800f282:	4698      	mov	r8, r3
 800f284:	4606      	mov	r6, r0
 800f286:	b118      	cbz	r0, 800f290 <_vfiprintf_r+0x18>
 800f288:	6983      	ldr	r3, [r0, #24]
 800f28a:	b90b      	cbnz	r3, 800f290 <_vfiprintf_r+0x18>
 800f28c:	f000 fb06 	bl	800f89c <__sinit>
 800f290:	4b89      	ldr	r3, [pc, #548]	; (800f4b8 <_vfiprintf_r+0x240>)
 800f292:	429d      	cmp	r5, r3
 800f294:	d11b      	bne.n	800f2ce <_vfiprintf_r+0x56>
 800f296:	6875      	ldr	r5, [r6, #4]
 800f298:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f29a:	07d9      	lsls	r1, r3, #31
 800f29c:	d405      	bmi.n	800f2aa <_vfiprintf_r+0x32>
 800f29e:	89ab      	ldrh	r3, [r5, #12]
 800f2a0:	059a      	lsls	r2, r3, #22
 800f2a2:	d402      	bmi.n	800f2aa <_vfiprintf_r+0x32>
 800f2a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f2a6:	f7ff ff72 	bl	800f18e <__retarget_lock_acquire_recursive>
 800f2aa:	89ab      	ldrh	r3, [r5, #12]
 800f2ac:	071b      	lsls	r3, r3, #28
 800f2ae:	d501      	bpl.n	800f2b4 <_vfiprintf_r+0x3c>
 800f2b0:	692b      	ldr	r3, [r5, #16]
 800f2b2:	b9eb      	cbnz	r3, 800f2f0 <_vfiprintf_r+0x78>
 800f2b4:	4629      	mov	r1, r5
 800f2b6:	4630      	mov	r0, r6
 800f2b8:	f000 f960 	bl	800f57c <__swsetup_r>
 800f2bc:	b1c0      	cbz	r0, 800f2f0 <_vfiprintf_r+0x78>
 800f2be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f2c0:	07dc      	lsls	r4, r3, #31
 800f2c2:	d50e      	bpl.n	800f2e2 <_vfiprintf_r+0x6a>
 800f2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800f2c8:	b01d      	add	sp, #116	; 0x74
 800f2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2ce:	4b7b      	ldr	r3, [pc, #492]	; (800f4bc <_vfiprintf_r+0x244>)
 800f2d0:	429d      	cmp	r5, r3
 800f2d2:	d101      	bne.n	800f2d8 <_vfiprintf_r+0x60>
 800f2d4:	68b5      	ldr	r5, [r6, #8]
 800f2d6:	e7df      	b.n	800f298 <_vfiprintf_r+0x20>
 800f2d8:	4b79      	ldr	r3, [pc, #484]	; (800f4c0 <_vfiprintf_r+0x248>)
 800f2da:	429d      	cmp	r5, r3
 800f2dc:	bf08      	it	eq
 800f2de:	68f5      	ldreq	r5, [r6, #12]
 800f2e0:	e7da      	b.n	800f298 <_vfiprintf_r+0x20>
 800f2e2:	89ab      	ldrh	r3, [r5, #12]
 800f2e4:	0598      	lsls	r0, r3, #22
 800f2e6:	d4ed      	bmi.n	800f2c4 <_vfiprintf_r+0x4c>
 800f2e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f2ea:	f7ff ff51 	bl	800f190 <__retarget_lock_release_recursive>
 800f2ee:	e7e9      	b.n	800f2c4 <_vfiprintf_r+0x4c>
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	9309      	str	r3, [sp, #36]	; 0x24
 800f2f4:	2320      	movs	r3, #32
 800f2f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f2fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800f2fe:	2330      	movs	r3, #48	; 0x30
 800f300:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f4c4 <_vfiprintf_r+0x24c>
 800f304:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f308:	f04f 0901 	mov.w	r9, #1
 800f30c:	4623      	mov	r3, r4
 800f30e:	469a      	mov	sl, r3
 800f310:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f314:	b10a      	cbz	r2, 800f31a <_vfiprintf_r+0xa2>
 800f316:	2a25      	cmp	r2, #37	; 0x25
 800f318:	d1f9      	bne.n	800f30e <_vfiprintf_r+0x96>
 800f31a:	ebba 0b04 	subs.w	fp, sl, r4
 800f31e:	d00b      	beq.n	800f338 <_vfiprintf_r+0xc0>
 800f320:	465b      	mov	r3, fp
 800f322:	4622      	mov	r2, r4
 800f324:	4629      	mov	r1, r5
 800f326:	4630      	mov	r0, r6
 800f328:	f7ff ff93 	bl	800f252 <__sfputs_r>
 800f32c:	3001      	adds	r0, #1
 800f32e:	f000 80aa 	beq.w	800f486 <_vfiprintf_r+0x20e>
 800f332:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f334:	445a      	add	r2, fp
 800f336:	9209      	str	r2, [sp, #36]	; 0x24
 800f338:	f89a 3000 	ldrb.w	r3, [sl]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	f000 80a2 	beq.w	800f486 <_vfiprintf_r+0x20e>
 800f342:	2300      	movs	r3, #0
 800f344:	f04f 32ff 	mov.w	r2, #4294967295
 800f348:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f34c:	f10a 0a01 	add.w	sl, sl, #1
 800f350:	9304      	str	r3, [sp, #16]
 800f352:	9307      	str	r3, [sp, #28]
 800f354:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f358:	931a      	str	r3, [sp, #104]	; 0x68
 800f35a:	4654      	mov	r4, sl
 800f35c:	2205      	movs	r2, #5
 800f35e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f362:	4858      	ldr	r0, [pc, #352]	; (800f4c4 <_vfiprintf_r+0x24c>)
 800f364:	f7f0 ff3c 	bl	80001e0 <memchr>
 800f368:	9a04      	ldr	r2, [sp, #16]
 800f36a:	b9d8      	cbnz	r0, 800f3a4 <_vfiprintf_r+0x12c>
 800f36c:	06d1      	lsls	r1, r2, #27
 800f36e:	bf44      	itt	mi
 800f370:	2320      	movmi	r3, #32
 800f372:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f376:	0713      	lsls	r3, r2, #28
 800f378:	bf44      	itt	mi
 800f37a:	232b      	movmi	r3, #43	; 0x2b
 800f37c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f380:	f89a 3000 	ldrb.w	r3, [sl]
 800f384:	2b2a      	cmp	r3, #42	; 0x2a
 800f386:	d015      	beq.n	800f3b4 <_vfiprintf_r+0x13c>
 800f388:	9a07      	ldr	r2, [sp, #28]
 800f38a:	4654      	mov	r4, sl
 800f38c:	2000      	movs	r0, #0
 800f38e:	f04f 0c0a 	mov.w	ip, #10
 800f392:	4621      	mov	r1, r4
 800f394:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f398:	3b30      	subs	r3, #48	; 0x30
 800f39a:	2b09      	cmp	r3, #9
 800f39c:	d94e      	bls.n	800f43c <_vfiprintf_r+0x1c4>
 800f39e:	b1b0      	cbz	r0, 800f3ce <_vfiprintf_r+0x156>
 800f3a0:	9207      	str	r2, [sp, #28]
 800f3a2:	e014      	b.n	800f3ce <_vfiprintf_r+0x156>
 800f3a4:	eba0 0308 	sub.w	r3, r0, r8
 800f3a8:	fa09 f303 	lsl.w	r3, r9, r3
 800f3ac:	4313      	orrs	r3, r2
 800f3ae:	9304      	str	r3, [sp, #16]
 800f3b0:	46a2      	mov	sl, r4
 800f3b2:	e7d2      	b.n	800f35a <_vfiprintf_r+0xe2>
 800f3b4:	9b03      	ldr	r3, [sp, #12]
 800f3b6:	1d19      	adds	r1, r3, #4
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	9103      	str	r1, [sp, #12]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	bfbb      	ittet	lt
 800f3c0:	425b      	neglt	r3, r3
 800f3c2:	f042 0202 	orrlt.w	r2, r2, #2
 800f3c6:	9307      	strge	r3, [sp, #28]
 800f3c8:	9307      	strlt	r3, [sp, #28]
 800f3ca:	bfb8      	it	lt
 800f3cc:	9204      	strlt	r2, [sp, #16]
 800f3ce:	7823      	ldrb	r3, [r4, #0]
 800f3d0:	2b2e      	cmp	r3, #46	; 0x2e
 800f3d2:	d10c      	bne.n	800f3ee <_vfiprintf_r+0x176>
 800f3d4:	7863      	ldrb	r3, [r4, #1]
 800f3d6:	2b2a      	cmp	r3, #42	; 0x2a
 800f3d8:	d135      	bne.n	800f446 <_vfiprintf_r+0x1ce>
 800f3da:	9b03      	ldr	r3, [sp, #12]
 800f3dc:	1d1a      	adds	r2, r3, #4
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	9203      	str	r2, [sp, #12]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	bfb8      	it	lt
 800f3e6:	f04f 33ff 	movlt.w	r3, #4294967295
 800f3ea:	3402      	adds	r4, #2
 800f3ec:	9305      	str	r3, [sp, #20]
 800f3ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f4d4 <_vfiprintf_r+0x25c>
 800f3f2:	7821      	ldrb	r1, [r4, #0]
 800f3f4:	2203      	movs	r2, #3
 800f3f6:	4650      	mov	r0, sl
 800f3f8:	f7f0 fef2 	bl	80001e0 <memchr>
 800f3fc:	b140      	cbz	r0, 800f410 <_vfiprintf_r+0x198>
 800f3fe:	2340      	movs	r3, #64	; 0x40
 800f400:	eba0 000a 	sub.w	r0, r0, sl
 800f404:	fa03 f000 	lsl.w	r0, r3, r0
 800f408:	9b04      	ldr	r3, [sp, #16]
 800f40a:	4303      	orrs	r3, r0
 800f40c:	3401      	adds	r4, #1
 800f40e:	9304      	str	r3, [sp, #16]
 800f410:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f414:	482c      	ldr	r0, [pc, #176]	; (800f4c8 <_vfiprintf_r+0x250>)
 800f416:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f41a:	2206      	movs	r2, #6
 800f41c:	f7f0 fee0 	bl	80001e0 <memchr>
 800f420:	2800      	cmp	r0, #0
 800f422:	d03f      	beq.n	800f4a4 <_vfiprintf_r+0x22c>
 800f424:	4b29      	ldr	r3, [pc, #164]	; (800f4cc <_vfiprintf_r+0x254>)
 800f426:	bb1b      	cbnz	r3, 800f470 <_vfiprintf_r+0x1f8>
 800f428:	9b03      	ldr	r3, [sp, #12]
 800f42a:	3307      	adds	r3, #7
 800f42c:	f023 0307 	bic.w	r3, r3, #7
 800f430:	3308      	adds	r3, #8
 800f432:	9303      	str	r3, [sp, #12]
 800f434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f436:	443b      	add	r3, r7
 800f438:	9309      	str	r3, [sp, #36]	; 0x24
 800f43a:	e767      	b.n	800f30c <_vfiprintf_r+0x94>
 800f43c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f440:	460c      	mov	r4, r1
 800f442:	2001      	movs	r0, #1
 800f444:	e7a5      	b.n	800f392 <_vfiprintf_r+0x11a>
 800f446:	2300      	movs	r3, #0
 800f448:	3401      	adds	r4, #1
 800f44a:	9305      	str	r3, [sp, #20]
 800f44c:	4619      	mov	r1, r3
 800f44e:	f04f 0c0a 	mov.w	ip, #10
 800f452:	4620      	mov	r0, r4
 800f454:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f458:	3a30      	subs	r2, #48	; 0x30
 800f45a:	2a09      	cmp	r2, #9
 800f45c:	d903      	bls.n	800f466 <_vfiprintf_r+0x1ee>
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d0c5      	beq.n	800f3ee <_vfiprintf_r+0x176>
 800f462:	9105      	str	r1, [sp, #20]
 800f464:	e7c3      	b.n	800f3ee <_vfiprintf_r+0x176>
 800f466:	fb0c 2101 	mla	r1, ip, r1, r2
 800f46a:	4604      	mov	r4, r0
 800f46c:	2301      	movs	r3, #1
 800f46e:	e7f0      	b.n	800f452 <_vfiprintf_r+0x1da>
 800f470:	ab03      	add	r3, sp, #12
 800f472:	9300      	str	r3, [sp, #0]
 800f474:	462a      	mov	r2, r5
 800f476:	4b16      	ldr	r3, [pc, #88]	; (800f4d0 <_vfiprintf_r+0x258>)
 800f478:	a904      	add	r1, sp, #16
 800f47a:	4630      	mov	r0, r6
 800f47c:	f7fc f924 	bl	800b6c8 <_printf_float>
 800f480:	4607      	mov	r7, r0
 800f482:	1c78      	adds	r0, r7, #1
 800f484:	d1d6      	bne.n	800f434 <_vfiprintf_r+0x1bc>
 800f486:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f488:	07d9      	lsls	r1, r3, #31
 800f48a:	d405      	bmi.n	800f498 <_vfiprintf_r+0x220>
 800f48c:	89ab      	ldrh	r3, [r5, #12]
 800f48e:	059a      	lsls	r2, r3, #22
 800f490:	d402      	bmi.n	800f498 <_vfiprintf_r+0x220>
 800f492:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f494:	f7ff fe7c 	bl	800f190 <__retarget_lock_release_recursive>
 800f498:	89ab      	ldrh	r3, [r5, #12]
 800f49a:	065b      	lsls	r3, r3, #25
 800f49c:	f53f af12 	bmi.w	800f2c4 <_vfiprintf_r+0x4c>
 800f4a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f4a2:	e711      	b.n	800f2c8 <_vfiprintf_r+0x50>
 800f4a4:	ab03      	add	r3, sp, #12
 800f4a6:	9300      	str	r3, [sp, #0]
 800f4a8:	462a      	mov	r2, r5
 800f4aa:	4b09      	ldr	r3, [pc, #36]	; (800f4d0 <_vfiprintf_r+0x258>)
 800f4ac:	a904      	add	r1, sp, #16
 800f4ae:	4630      	mov	r0, r6
 800f4b0:	f7fc fbae 	bl	800bc10 <_printf_i>
 800f4b4:	e7e4      	b.n	800f480 <_vfiprintf_r+0x208>
 800f4b6:	bf00      	nop
 800f4b8:	08010184 	.word	0x08010184
 800f4bc:	080101a4 	.word	0x080101a4
 800f4c0:	08010164 	.word	0x08010164
 800f4c4:	08010114 	.word	0x08010114
 800f4c8:	0801011e 	.word	0x0801011e
 800f4cc:	0800b6c9 	.word	0x0800b6c9
 800f4d0:	0800f253 	.word	0x0800f253
 800f4d4:	0801011a 	.word	0x0801011a

0800f4d8 <__swbuf_r>:
 800f4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4da:	460e      	mov	r6, r1
 800f4dc:	4614      	mov	r4, r2
 800f4de:	4605      	mov	r5, r0
 800f4e0:	b118      	cbz	r0, 800f4ea <__swbuf_r+0x12>
 800f4e2:	6983      	ldr	r3, [r0, #24]
 800f4e4:	b90b      	cbnz	r3, 800f4ea <__swbuf_r+0x12>
 800f4e6:	f000 f9d9 	bl	800f89c <__sinit>
 800f4ea:	4b21      	ldr	r3, [pc, #132]	; (800f570 <__swbuf_r+0x98>)
 800f4ec:	429c      	cmp	r4, r3
 800f4ee:	d12b      	bne.n	800f548 <__swbuf_r+0x70>
 800f4f0:	686c      	ldr	r4, [r5, #4]
 800f4f2:	69a3      	ldr	r3, [r4, #24]
 800f4f4:	60a3      	str	r3, [r4, #8]
 800f4f6:	89a3      	ldrh	r3, [r4, #12]
 800f4f8:	071a      	lsls	r2, r3, #28
 800f4fa:	d52f      	bpl.n	800f55c <__swbuf_r+0x84>
 800f4fc:	6923      	ldr	r3, [r4, #16]
 800f4fe:	b36b      	cbz	r3, 800f55c <__swbuf_r+0x84>
 800f500:	6923      	ldr	r3, [r4, #16]
 800f502:	6820      	ldr	r0, [r4, #0]
 800f504:	1ac0      	subs	r0, r0, r3
 800f506:	6963      	ldr	r3, [r4, #20]
 800f508:	b2f6      	uxtb	r6, r6
 800f50a:	4283      	cmp	r3, r0
 800f50c:	4637      	mov	r7, r6
 800f50e:	dc04      	bgt.n	800f51a <__swbuf_r+0x42>
 800f510:	4621      	mov	r1, r4
 800f512:	4628      	mov	r0, r5
 800f514:	f000 f92e 	bl	800f774 <_fflush_r>
 800f518:	bb30      	cbnz	r0, 800f568 <__swbuf_r+0x90>
 800f51a:	68a3      	ldr	r3, [r4, #8]
 800f51c:	3b01      	subs	r3, #1
 800f51e:	60a3      	str	r3, [r4, #8]
 800f520:	6823      	ldr	r3, [r4, #0]
 800f522:	1c5a      	adds	r2, r3, #1
 800f524:	6022      	str	r2, [r4, #0]
 800f526:	701e      	strb	r6, [r3, #0]
 800f528:	6963      	ldr	r3, [r4, #20]
 800f52a:	3001      	adds	r0, #1
 800f52c:	4283      	cmp	r3, r0
 800f52e:	d004      	beq.n	800f53a <__swbuf_r+0x62>
 800f530:	89a3      	ldrh	r3, [r4, #12]
 800f532:	07db      	lsls	r3, r3, #31
 800f534:	d506      	bpl.n	800f544 <__swbuf_r+0x6c>
 800f536:	2e0a      	cmp	r6, #10
 800f538:	d104      	bne.n	800f544 <__swbuf_r+0x6c>
 800f53a:	4621      	mov	r1, r4
 800f53c:	4628      	mov	r0, r5
 800f53e:	f000 f919 	bl	800f774 <_fflush_r>
 800f542:	b988      	cbnz	r0, 800f568 <__swbuf_r+0x90>
 800f544:	4638      	mov	r0, r7
 800f546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f548:	4b0a      	ldr	r3, [pc, #40]	; (800f574 <__swbuf_r+0x9c>)
 800f54a:	429c      	cmp	r4, r3
 800f54c:	d101      	bne.n	800f552 <__swbuf_r+0x7a>
 800f54e:	68ac      	ldr	r4, [r5, #8]
 800f550:	e7cf      	b.n	800f4f2 <__swbuf_r+0x1a>
 800f552:	4b09      	ldr	r3, [pc, #36]	; (800f578 <__swbuf_r+0xa0>)
 800f554:	429c      	cmp	r4, r3
 800f556:	bf08      	it	eq
 800f558:	68ec      	ldreq	r4, [r5, #12]
 800f55a:	e7ca      	b.n	800f4f2 <__swbuf_r+0x1a>
 800f55c:	4621      	mov	r1, r4
 800f55e:	4628      	mov	r0, r5
 800f560:	f000 f80c 	bl	800f57c <__swsetup_r>
 800f564:	2800      	cmp	r0, #0
 800f566:	d0cb      	beq.n	800f500 <__swbuf_r+0x28>
 800f568:	f04f 37ff 	mov.w	r7, #4294967295
 800f56c:	e7ea      	b.n	800f544 <__swbuf_r+0x6c>
 800f56e:	bf00      	nop
 800f570:	08010184 	.word	0x08010184
 800f574:	080101a4 	.word	0x080101a4
 800f578:	08010164 	.word	0x08010164

0800f57c <__swsetup_r>:
 800f57c:	4b32      	ldr	r3, [pc, #200]	; (800f648 <__swsetup_r+0xcc>)
 800f57e:	b570      	push	{r4, r5, r6, lr}
 800f580:	681d      	ldr	r5, [r3, #0]
 800f582:	4606      	mov	r6, r0
 800f584:	460c      	mov	r4, r1
 800f586:	b125      	cbz	r5, 800f592 <__swsetup_r+0x16>
 800f588:	69ab      	ldr	r3, [r5, #24]
 800f58a:	b913      	cbnz	r3, 800f592 <__swsetup_r+0x16>
 800f58c:	4628      	mov	r0, r5
 800f58e:	f000 f985 	bl	800f89c <__sinit>
 800f592:	4b2e      	ldr	r3, [pc, #184]	; (800f64c <__swsetup_r+0xd0>)
 800f594:	429c      	cmp	r4, r3
 800f596:	d10f      	bne.n	800f5b8 <__swsetup_r+0x3c>
 800f598:	686c      	ldr	r4, [r5, #4]
 800f59a:	89a3      	ldrh	r3, [r4, #12]
 800f59c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f5a0:	0719      	lsls	r1, r3, #28
 800f5a2:	d42c      	bmi.n	800f5fe <__swsetup_r+0x82>
 800f5a4:	06dd      	lsls	r5, r3, #27
 800f5a6:	d411      	bmi.n	800f5cc <__swsetup_r+0x50>
 800f5a8:	2309      	movs	r3, #9
 800f5aa:	6033      	str	r3, [r6, #0]
 800f5ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f5b0:	81a3      	strh	r3, [r4, #12]
 800f5b2:	f04f 30ff 	mov.w	r0, #4294967295
 800f5b6:	e03e      	b.n	800f636 <__swsetup_r+0xba>
 800f5b8:	4b25      	ldr	r3, [pc, #148]	; (800f650 <__swsetup_r+0xd4>)
 800f5ba:	429c      	cmp	r4, r3
 800f5bc:	d101      	bne.n	800f5c2 <__swsetup_r+0x46>
 800f5be:	68ac      	ldr	r4, [r5, #8]
 800f5c0:	e7eb      	b.n	800f59a <__swsetup_r+0x1e>
 800f5c2:	4b24      	ldr	r3, [pc, #144]	; (800f654 <__swsetup_r+0xd8>)
 800f5c4:	429c      	cmp	r4, r3
 800f5c6:	bf08      	it	eq
 800f5c8:	68ec      	ldreq	r4, [r5, #12]
 800f5ca:	e7e6      	b.n	800f59a <__swsetup_r+0x1e>
 800f5cc:	0758      	lsls	r0, r3, #29
 800f5ce:	d512      	bpl.n	800f5f6 <__swsetup_r+0x7a>
 800f5d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f5d2:	b141      	cbz	r1, 800f5e6 <__swsetup_r+0x6a>
 800f5d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f5d8:	4299      	cmp	r1, r3
 800f5da:	d002      	beq.n	800f5e2 <__swsetup_r+0x66>
 800f5dc:	4630      	mov	r0, r6
 800f5de:	f7fb fef3 	bl	800b3c8 <_free_r>
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	6363      	str	r3, [r4, #52]	; 0x34
 800f5e6:	89a3      	ldrh	r3, [r4, #12]
 800f5e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f5ec:	81a3      	strh	r3, [r4, #12]
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	6063      	str	r3, [r4, #4]
 800f5f2:	6923      	ldr	r3, [r4, #16]
 800f5f4:	6023      	str	r3, [r4, #0]
 800f5f6:	89a3      	ldrh	r3, [r4, #12]
 800f5f8:	f043 0308 	orr.w	r3, r3, #8
 800f5fc:	81a3      	strh	r3, [r4, #12]
 800f5fe:	6923      	ldr	r3, [r4, #16]
 800f600:	b94b      	cbnz	r3, 800f616 <__swsetup_r+0x9a>
 800f602:	89a3      	ldrh	r3, [r4, #12]
 800f604:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f60c:	d003      	beq.n	800f616 <__swsetup_r+0x9a>
 800f60e:	4621      	mov	r1, r4
 800f610:	4630      	mov	r0, r6
 800f612:	f000 fa05 	bl	800fa20 <__smakebuf_r>
 800f616:	89a0      	ldrh	r0, [r4, #12]
 800f618:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f61c:	f010 0301 	ands.w	r3, r0, #1
 800f620:	d00a      	beq.n	800f638 <__swsetup_r+0xbc>
 800f622:	2300      	movs	r3, #0
 800f624:	60a3      	str	r3, [r4, #8]
 800f626:	6963      	ldr	r3, [r4, #20]
 800f628:	425b      	negs	r3, r3
 800f62a:	61a3      	str	r3, [r4, #24]
 800f62c:	6923      	ldr	r3, [r4, #16]
 800f62e:	b943      	cbnz	r3, 800f642 <__swsetup_r+0xc6>
 800f630:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f634:	d1ba      	bne.n	800f5ac <__swsetup_r+0x30>
 800f636:	bd70      	pop	{r4, r5, r6, pc}
 800f638:	0781      	lsls	r1, r0, #30
 800f63a:	bf58      	it	pl
 800f63c:	6963      	ldrpl	r3, [r4, #20]
 800f63e:	60a3      	str	r3, [r4, #8]
 800f640:	e7f4      	b.n	800f62c <__swsetup_r+0xb0>
 800f642:	2000      	movs	r0, #0
 800f644:	e7f7      	b.n	800f636 <__swsetup_r+0xba>
 800f646:	bf00      	nop
 800f648:	2000002c 	.word	0x2000002c
 800f64c:	08010184 	.word	0x08010184
 800f650:	080101a4 	.word	0x080101a4
 800f654:	08010164 	.word	0x08010164

0800f658 <abort>:
 800f658:	b508      	push	{r3, lr}
 800f65a:	2006      	movs	r0, #6
 800f65c:	f000 fa50 	bl	800fb00 <raise>
 800f660:	2001      	movs	r0, #1
 800f662:	f7f2 fe29 	bl	80022b8 <_exit>
	...

0800f668 <__sflush_r>:
 800f668:	898a      	ldrh	r2, [r1, #12]
 800f66a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f66e:	4605      	mov	r5, r0
 800f670:	0710      	lsls	r0, r2, #28
 800f672:	460c      	mov	r4, r1
 800f674:	d458      	bmi.n	800f728 <__sflush_r+0xc0>
 800f676:	684b      	ldr	r3, [r1, #4]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	dc05      	bgt.n	800f688 <__sflush_r+0x20>
 800f67c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f67e:	2b00      	cmp	r3, #0
 800f680:	dc02      	bgt.n	800f688 <__sflush_r+0x20>
 800f682:	2000      	movs	r0, #0
 800f684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f688:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f68a:	2e00      	cmp	r6, #0
 800f68c:	d0f9      	beq.n	800f682 <__sflush_r+0x1a>
 800f68e:	2300      	movs	r3, #0
 800f690:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f694:	682f      	ldr	r7, [r5, #0]
 800f696:	602b      	str	r3, [r5, #0]
 800f698:	d032      	beq.n	800f700 <__sflush_r+0x98>
 800f69a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f69c:	89a3      	ldrh	r3, [r4, #12]
 800f69e:	075a      	lsls	r2, r3, #29
 800f6a0:	d505      	bpl.n	800f6ae <__sflush_r+0x46>
 800f6a2:	6863      	ldr	r3, [r4, #4]
 800f6a4:	1ac0      	subs	r0, r0, r3
 800f6a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f6a8:	b10b      	cbz	r3, 800f6ae <__sflush_r+0x46>
 800f6aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f6ac:	1ac0      	subs	r0, r0, r3
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	4602      	mov	r2, r0
 800f6b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f6b4:	6a21      	ldr	r1, [r4, #32]
 800f6b6:	4628      	mov	r0, r5
 800f6b8:	47b0      	blx	r6
 800f6ba:	1c43      	adds	r3, r0, #1
 800f6bc:	89a3      	ldrh	r3, [r4, #12]
 800f6be:	d106      	bne.n	800f6ce <__sflush_r+0x66>
 800f6c0:	6829      	ldr	r1, [r5, #0]
 800f6c2:	291d      	cmp	r1, #29
 800f6c4:	d82c      	bhi.n	800f720 <__sflush_r+0xb8>
 800f6c6:	4a2a      	ldr	r2, [pc, #168]	; (800f770 <__sflush_r+0x108>)
 800f6c8:	40ca      	lsrs	r2, r1
 800f6ca:	07d6      	lsls	r6, r2, #31
 800f6cc:	d528      	bpl.n	800f720 <__sflush_r+0xb8>
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	6062      	str	r2, [r4, #4]
 800f6d2:	04d9      	lsls	r1, r3, #19
 800f6d4:	6922      	ldr	r2, [r4, #16]
 800f6d6:	6022      	str	r2, [r4, #0]
 800f6d8:	d504      	bpl.n	800f6e4 <__sflush_r+0x7c>
 800f6da:	1c42      	adds	r2, r0, #1
 800f6dc:	d101      	bne.n	800f6e2 <__sflush_r+0x7a>
 800f6de:	682b      	ldr	r3, [r5, #0]
 800f6e0:	b903      	cbnz	r3, 800f6e4 <__sflush_r+0x7c>
 800f6e2:	6560      	str	r0, [r4, #84]	; 0x54
 800f6e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f6e6:	602f      	str	r7, [r5, #0]
 800f6e8:	2900      	cmp	r1, #0
 800f6ea:	d0ca      	beq.n	800f682 <__sflush_r+0x1a>
 800f6ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f6f0:	4299      	cmp	r1, r3
 800f6f2:	d002      	beq.n	800f6fa <__sflush_r+0x92>
 800f6f4:	4628      	mov	r0, r5
 800f6f6:	f7fb fe67 	bl	800b3c8 <_free_r>
 800f6fa:	2000      	movs	r0, #0
 800f6fc:	6360      	str	r0, [r4, #52]	; 0x34
 800f6fe:	e7c1      	b.n	800f684 <__sflush_r+0x1c>
 800f700:	6a21      	ldr	r1, [r4, #32]
 800f702:	2301      	movs	r3, #1
 800f704:	4628      	mov	r0, r5
 800f706:	47b0      	blx	r6
 800f708:	1c41      	adds	r1, r0, #1
 800f70a:	d1c7      	bne.n	800f69c <__sflush_r+0x34>
 800f70c:	682b      	ldr	r3, [r5, #0]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d0c4      	beq.n	800f69c <__sflush_r+0x34>
 800f712:	2b1d      	cmp	r3, #29
 800f714:	d001      	beq.n	800f71a <__sflush_r+0xb2>
 800f716:	2b16      	cmp	r3, #22
 800f718:	d101      	bne.n	800f71e <__sflush_r+0xb6>
 800f71a:	602f      	str	r7, [r5, #0]
 800f71c:	e7b1      	b.n	800f682 <__sflush_r+0x1a>
 800f71e:	89a3      	ldrh	r3, [r4, #12]
 800f720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f724:	81a3      	strh	r3, [r4, #12]
 800f726:	e7ad      	b.n	800f684 <__sflush_r+0x1c>
 800f728:	690f      	ldr	r7, [r1, #16]
 800f72a:	2f00      	cmp	r7, #0
 800f72c:	d0a9      	beq.n	800f682 <__sflush_r+0x1a>
 800f72e:	0793      	lsls	r3, r2, #30
 800f730:	680e      	ldr	r6, [r1, #0]
 800f732:	bf08      	it	eq
 800f734:	694b      	ldreq	r3, [r1, #20]
 800f736:	600f      	str	r7, [r1, #0]
 800f738:	bf18      	it	ne
 800f73a:	2300      	movne	r3, #0
 800f73c:	eba6 0807 	sub.w	r8, r6, r7
 800f740:	608b      	str	r3, [r1, #8]
 800f742:	f1b8 0f00 	cmp.w	r8, #0
 800f746:	dd9c      	ble.n	800f682 <__sflush_r+0x1a>
 800f748:	6a21      	ldr	r1, [r4, #32]
 800f74a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f74c:	4643      	mov	r3, r8
 800f74e:	463a      	mov	r2, r7
 800f750:	4628      	mov	r0, r5
 800f752:	47b0      	blx	r6
 800f754:	2800      	cmp	r0, #0
 800f756:	dc06      	bgt.n	800f766 <__sflush_r+0xfe>
 800f758:	89a3      	ldrh	r3, [r4, #12]
 800f75a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f75e:	81a3      	strh	r3, [r4, #12]
 800f760:	f04f 30ff 	mov.w	r0, #4294967295
 800f764:	e78e      	b.n	800f684 <__sflush_r+0x1c>
 800f766:	4407      	add	r7, r0
 800f768:	eba8 0800 	sub.w	r8, r8, r0
 800f76c:	e7e9      	b.n	800f742 <__sflush_r+0xda>
 800f76e:	bf00      	nop
 800f770:	20400001 	.word	0x20400001

0800f774 <_fflush_r>:
 800f774:	b538      	push	{r3, r4, r5, lr}
 800f776:	690b      	ldr	r3, [r1, #16]
 800f778:	4605      	mov	r5, r0
 800f77a:	460c      	mov	r4, r1
 800f77c:	b913      	cbnz	r3, 800f784 <_fflush_r+0x10>
 800f77e:	2500      	movs	r5, #0
 800f780:	4628      	mov	r0, r5
 800f782:	bd38      	pop	{r3, r4, r5, pc}
 800f784:	b118      	cbz	r0, 800f78e <_fflush_r+0x1a>
 800f786:	6983      	ldr	r3, [r0, #24]
 800f788:	b90b      	cbnz	r3, 800f78e <_fflush_r+0x1a>
 800f78a:	f000 f887 	bl	800f89c <__sinit>
 800f78e:	4b14      	ldr	r3, [pc, #80]	; (800f7e0 <_fflush_r+0x6c>)
 800f790:	429c      	cmp	r4, r3
 800f792:	d11b      	bne.n	800f7cc <_fflush_r+0x58>
 800f794:	686c      	ldr	r4, [r5, #4]
 800f796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d0ef      	beq.n	800f77e <_fflush_r+0xa>
 800f79e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f7a0:	07d0      	lsls	r0, r2, #31
 800f7a2:	d404      	bmi.n	800f7ae <_fflush_r+0x3a>
 800f7a4:	0599      	lsls	r1, r3, #22
 800f7a6:	d402      	bmi.n	800f7ae <_fflush_r+0x3a>
 800f7a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f7aa:	f7ff fcf0 	bl	800f18e <__retarget_lock_acquire_recursive>
 800f7ae:	4628      	mov	r0, r5
 800f7b0:	4621      	mov	r1, r4
 800f7b2:	f7ff ff59 	bl	800f668 <__sflush_r>
 800f7b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f7b8:	07da      	lsls	r2, r3, #31
 800f7ba:	4605      	mov	r5, r0
 800f7bc:	d4e0      	bmi.n	800f780 <_fflush_r+0xc>
 800f7be:	89a3      	ldrh	r3, [r4, #12]
 800f7c0:	059b      	lsls	r3, r3, #22
 800f7c2:	d4dd      	bmi.n	800f780 <_fflush_r+0xc>
 800f7c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f7c6:	f7ff fce3 	bl	800f190 <__retarget_lock_release_recursive>
 800f7ca:	e7d9      	b.n	800f780 <_fflush_r+0xc>
 800f7cc:	4b05      	ldr	r3, [pc, #20]	; (800f7e4 <_fflush_r+0x70>)
 800f7ce:	429c      	cmp	r4, r3
 800f7d0:	d101      	bne.n	800f7d6 <_fflush_r+0x62>
 800f7d2:	68ac      	ldr	r4, [r5, #8]
 800f7d4:	e7df      	b.n	800f796 <_fflush_r+0x22>
 800f7d6:	4b04      	ldr	r3, [pc, #16]	; (800f7e8 <_fflush_r+0x74>)
 800f7d8:	429c      	cmp	r4, r3
 800f7da:	bf08      	it	eq
 800f7dc:	68ec      	ldreq	r4, [r5, #12]
 800f7de:	e7da      	b.n	800f796 <_fflush_r+0x22>
 800f7e0:	08010184 	.word	0x08010184
 800f7e4:	080101a4 	.word	0x080101a4
 800f7e8:	08010164 	.word	0x08010164

0800f7ec <std>:
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	b510      	push	{r4, lr}
 800f7f0:	4604      	mov	r4, r0
 800f7f2:	e9c0 3300 	strd	r3, r3, [r0]
 800f7f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f7fa:	6083      	str	r3, [r0, #8]
 800f7fc:	8181      	strh	r1, [r0, #12]
 800f7fe:	6643      	str	r3, [r0, #100]	; 0x64
 800f800:	81c2      	strh	r2, [r0, #14]
 800f802:	6183      	str	r3, [r0, #24]
 800f804:	4619      	mov	r1, r3
 800f806:	2208      	movs	r2, #8
 800f808:	305c      	adds	r0, #92	; 0x5c
 800f80a:	f7fb fdd5 	bl	800b3b8 <memset>
 800f80e:	4b05      	ldr	r3, [pc, #20]	; (800f824 <std+0x38>)
 800f810:	6263      	str	r3, [r4, #36]	; 0x24
 800f812:	4b05      	ldr	r3, [pc, #20]	; (800f828 <std+0x3c>)
 800f814:	62a3      	str	r3, [r4, #40]	; 0x28
 800f816:	4b05      	ldr	r3, [pc, #20]	; (800f82c <std+0x40>)
 800f818:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f81a:	4b05      	ldr	r3, [pc, #20]	; (800f830 <std+0x44>)
 800f81c:	6224      	str	r4, [r4, #32]
 800f81e:	6323      	str	r3, [r4, #48]	; 0x30
 800f820:	bd10      	pop	{r4, pc}
 800f822:	bf00      	nop
 800f824:	0800fb39 	.word	0x0800fb39
 800f828:	0800fb5b 	.word	0x0800fb5b
 800f82c:	0800fb93 	.word	0x0800fb93
 800f830:	0800fbb7 	.word	0x0800fbb7

0800f834 <_cleanup_r>:
 800f834:	4901      	ldr	r1, [pc, #4]	; (800f83c <_cleanup_r+0x8>)
 800f836:	f000 b8af 	b.w	800f998 <_fwalk_reent>
 800f83a:	bf00      	nop
 800f83c:	0800f775 	.word	0x0800f775

0800f840 <__sfmoreglue>:
 800f840:	b570      	push	{r4, r5, r6, lr}
 800f842:	2268      	movs	r2, #104	; 0x68
 800f844:	1e4d      	subs	r5, r1, #1
 800f846:	4355      	muls	r5, r2
 800f848:	460e      	mov	r6, r1
 800f84a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f84e:	f7fb fe27 	bl	800b4a0 <_malloc_r>
 800f852:	4604      	mov	r4, r0
 800f854:	b140      	cbz	r0, 800f868 <__sfmoreglue+0x28>
 800f856:	2100      	movs	r1, #0
 800f858:	e9c0 1600 	strd	r1, r6, [r0]
 800f85c:	300c      	adds	r0, #12
 800f85e:	60a0      	str	r0, [r4, #8]
 800f860:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f864:	f7fb fda8 	bl	800b3b8 <memset>
 800f868:	4620      	mov	r0, r4
 800f86a:	bd70      	pop	{r4, r5, r6, pc}

0800f86c <__sfp_lock_acquire>:
 800f86c:	4801      	ldr	r0, [pc, #4]	; (800f874 <__sfp_lock_acquire+0x8>)
 800f86e:	f7ff bc8e 	b.w	800f18e <__retarget_lock_acquire_recursive>
 800f872:	bf00      	nop
 800f874:	20000bc9 	.word	0x20000bc9

0800f878 <__sfp_lock_release>:
 800f878:	4801      	ldr	r0, [pc, #4]	; (800f880 <__sfp_lock_release+0x8>)
 800f87a:	f7ff bc89 	b.w	800f190 <__retarget_lock_release_recursive>
 800f87e:	bf00      	nop
 800f880:	20000bc9 	.word	0x20000bc9

0800f884 <__sinit_lock_acquire>:
 800f884:	4801      	ldr	r0, [pc, #4]	; (800f88c <__sinit_lock_acquire+0x8>)
 800f886:	f7ff bc82 	b.w	800f18e <__retarget_lock_acquire_recursive>
 800f88a:	bf00      	nop
 800f88c:	20000bca 	.word	0x20000bca

0800f890 <__sinit_lock_release>:
 800f890:	4801      	ldr	r0, [pc, #4]	; (800f898 <__sinit_lock_release+0x8>)
 800f892:	f7ff bc7d 	b.w	800f190 <__retarget_lock_release_recursive>
 800f896:	bf00      	nop
 800f898:	20000bca 	.word	0x20000bca

0800f89c <__sinit>:
 800f89c:	b510      	push	{r4, lr}
 800f89e:	4604      	mov	r4, r0
 800f8a0:	f7ff fff0 	bl	800f884 <__sinit_lock_acquire>
 800f8a4:	69a3      	ldr	r3, [r4, #24]
 800f8a6:	b11b      	cbz	r3, 800f8b0 <__sinit+0x14>
 800f8a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f8ac:	f7ff bff0 	b.w	800f890 <__sinit_lock_release>
 800f8b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f8b4:	6523      	str	r3, [r4, #80]	; 0x50
 800f8b6:	4b13      	ldr	r3, [pc, #76]	; (800f904 <__sinit+0x68>)
 800f8b8:	4a13      	ldr	r2, [pc, #76]	; (800f908 <__sinit+0x6c>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	62a2      	str	r2, [r4, #40]	; 0x28
 800f8be:	42a3      	cmp	r3, r4
 800f8c0:	bf04      	itt	eq
 800f8c2:	2301      	moveq	r3, #1
 800f8c4:	61a3      	streq	r3, [r4, #24]
 800f8c6:	4620      	mov	r0, r4
 800f8c8:	f000 f820 	bl	800f90c <__sfp>
 800f8cc:	6060      	str	r0, [r4, #4]
 800f8ce:	4620      	mov	r0, r4
 800f8d0:	f000 f81c 	bl	800f90c <__sfp>
 800f8d4:	60a0      	str	r0, [r4, #8]
 800f8d6:	4620      	mov	r0, r4
 800f8d8:	f000 f818 	bl	800f90c <__sfp>
 800f8dc:	2200      	movs	r2, #0
 800f8de:	60e0      	str	r0, [r4, #12]
 800f8e0:	2104      	movs	r1, #4
 800f8e2:	6860      	ldr	r0, [r4, #4]
 800f8e4:	f7ff ff82 	bl	800f7ec <std>
 800f8e8:	68a0      	ldr	r0, [r4, #8]
 800f8ea:	2201      	movs	r2, #1
 800f8ec:	2109      	movs	r1, #9
 800f8ee:	f7ff ff7d 	bl	800f7ec <std>
 800f8f2:	68e0      	ldr	r0, [r4, #12]
 800f8f4:	2202      	movs	r2, #2
 800f8f6:	2112      	movs	r1, #18
 800f8f8:	f7ff ff78 	bl	800f7ec <std>
 800f8fc:	2301      	movs	r3, #1
 800f8fe:	61a3      	str	r3, [r4, #24]
 800f900:	e7d2      	b.n	800f8a8 <__sinit+0xc>
 800f902:	bf00      	nop
 800f904:	0800fd1c 	.word	0x0800fd1c
 800f908:	0800f835 	.word	0x0800f835

0800f90c <__sfp>:
 800f90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f90e:	4607      	mov	r7, r0
 800f910:	f7ff ffac 	bl	800f86c <__sfp_lock_acquire>
 800f914:	4b1e      	ldr	r3, [pc, #120]	; (800f990 <__sfp+0x84>)
 800f916:	681e      	ldr	r6, [r3, #0]
 800f918:	69b3      	ldr	r3, [r6, #24]
 800f91a:	b913      	cbnz	r3, 800f922 <__sfp+0x16>
 800f91c:	4630      	mov	r0, r6
 800f91e:	f7ff ffbd 	bl	800f89c <__sinit>
 800f922:	3648      	adds	r6, #72	; 0x48
 800f924:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f928:	3b01      	subs	r3, #1
 800f92a:	d503      	bpl.n	800f934 <__sfp+0x28>
 800f92c:	6833      	ldr	r3, [r6, #0]
 800f92e:	b30b      	cbz	r3, 800f974 <__sfp+0x68>
 800f930:	6836      	ldr	r6, [r6, #0]
 800f932:	e7f7      	b.n	800f924 <__sfp+0x18>
 800f934:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f938:	b9d5      	cbnz	r5, 800f970 <__sfp+0x64>
 800f93a:	4b16      	ldr	r3, [pc, #88]	; (800f994 <__sfp+0x88>)
 800f93c:	60e3      	str	r3, [r4, #12]
 800f93e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f942:	6665      	str	r5, [r4, #100]	; 0x64
 800f944:	f7ff fc22 	bl	800f18c <__retarget_lock_init_recursive>
 800f948:	f7ff ff96 	bl	800f878 <__sfp_lock_release>
 800f94c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f950:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f954:	6025      	str	r5, [r4, #0]
 800f956:	61a5      	str	r5, [r4, #24]
 800f958:	2208      	movs	r2, #8
 800f95a:	4629      	mov	r1, r5
 800f95c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f960:	f7fb fd2a 	bl	800b3b8 <memset>
 800f964:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f968:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f96c:	4620      	mov	r0, r4
 800f96e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f970:	3468      	adds	r4, #104	; 0x68
 800f972:	e7d9      	b.n	800f928 <__sfp+0x1c>
 800f974:	2104      	movs	r1, #4
 800f976:	4638      	mov	r0, r7
 800f978:	f7ff ff62 	bl	800f840 <__sfmoreglue>
 800f97c:	4604      	mov	r4, r0
 800f97e:	6030      	str	r0, [r6, #0]
 800f980:	2800      	cmp	r0, #0
 800f982:	d1d5      	bne.n	800f930 <__sfp+0x24>
 800f984:	f7ff ff78 	bl	800f878 <__sfp_lock_release>
 800f988:	230c      	movs	r3, #12
 800f98a:	603b      	str	r3, [r7, #0]
 800f98c:	e7ee      	b.n	800f96c <__sfp+0x60>
 800f98e:	bf00      	nop
 800f990:	0800fd1c 	.word	0x0800fd1c
 800f994:	ffff0001 	.word	0xffff0001

0800f998 <_fwalk_reent>:
 800f998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f99c:	4606      	mov	r6, r0
 800f99e:	4688      	mov	r8, r1
 800f9a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f9a4:	2700      	movs	r7, #0
 800f9a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f9aa:	f1b9 0901 	subs.w	r9, r9, #1
 800f9ae:	d505      	bpl.n	800f9bc <_fwalk_reent+0x24>
 800f9b0:	6824      	ldr	r4, [r4, #0]
 800f9b2:	2c00      	cmp	r4, #0
 800f9b4:	d1f7      	bne.n	800f9a6 <_fwalk_reent+0xe>
 800f9b6:	4638      	mov	r0, r7
 800f9b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9bc:	89ab      	ldrh	r3, [r5, #12]
 800f9be:	2b01      	cmp	r3, #1
 800f9c0:	d907      	bls.n	800f9d2 <_fwalk_reent+0x3a>
 800f9c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f9c6:	3301      	adds	r3, #1
 800f9c8:	d003      	beq.n	800f9d2 <_fwalk_reent+0x3a>
 800f9ca:	4629      	mov	r1, r5
 800f9cc:	4630      	mov	r0, r6
 800f9ce:	47c0      	blx	r8
 800f9d0:	4307      	orrs	r7, r0
 800f9d2:	3568      	adds	r5, #104	; 0x68
 800f9d4:	e7e9      	b.n	800f9aa <_fwalk_reent+0x12>

0800f9d6 <__swhatbuf_r>:
 800f9d6:	b570      	push	{r4, r5, r6, lr}
 800f9d8:	460e      	mov	r6, r1
 800f9da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9de:	2900      	cmp	r1, #0
 800f9e0:	b096      	sub	sp, #88	; 0x58
 800f9e2:	4614      	mov	r4, r2
 800f9e4:	461d      	mov	r5, r3
 800f9e6:	da08      	bge.n	800f9fa <__swhatbuf_r+0x24>
 800f9e8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	602a      	str	r2, [r5, #0]
 800f9f0:	061a      	lsls	r2, r3, #24
 800f9f2:	d410      	bmi.n	800fa16 <__swhatbuf_r+0x40>
 800f9f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f9f8:	e00e      	b.n	800fa18 <__swhatbuf_r+0x42>
 800f9fa:	466a      	mov	r2, sp
 800f9fc:	f000 f902 	bl	800fc04 <_fstat_r>
 800fa00:	2800      	cmp	r0, #0
 800fa02:	dbf1      	blt.n	800f9e8 <__swhatbuf_r+0x12>
 800fa04:	9a01      	ldr	r2, [sp, #4]
 800fa06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fa0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fa0e:	425a      	negs	r2, r3
 800fa10:	415a      	adcs	r2, r3
 800fa12:	602a      	str	r2, [r5, #0]
 800fa14:	e7ee      	b.n	800f9f4 <__swhatbuf_r+0x1e>
 800fa16:	2340      	movs	r3, #64	; 0x40
 800fa18:	2000      	movs	r0, #0
 800fa1a:	6023      	str	r3, [r4, #0]
 800fa1c:	b016      	add	sp, #88	; 0x58
 800fa1e:	bd70      	pop	{r4, r5, r6, pc}

0800fa20 <__smakebuf_r>:
 800fa20:	898b      	ldrh	r3, [r1, #12]
 800fa22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fa24:	079d      	lsls	r5, r3, #30
 800fa26:	4606      	mov	r6, r0
 800fa28:	460c      	mov	r4, r1
 800fa2a:	d507      	bpl.n	800fa3c <__smakebuf_r+0x1c>
 800fa2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fa30:	6023      	str	r3, [r4, #0]
 800fa32:	6123      	str	r3, [r4, #16]
 800fa34:	2301      	movs	r3, #1
 800fa36:	6163      	str	r3, [r4, #20]
 800fa38:	b002      	add	sp, #8
 800fa3a:	bd70      	pop	{r4, r5, r6, pc}
 800fa3c:	ab01      	add	r3, sp, #4
 800fa3e:	466a      	mov	r2, sp
 800fa40:	f7ff ffc9 	bl	800f9d6 <__swhatbuf_r>
 800fa44:	9900      	ldr	r1, [sp, #0]
 800fa46:	4605      	mov	r5, r0
 800fa48:	4630      	mov	r0, r6
 800fa4a:	f7fb fd29 	bl	800b4a0 <_malloc_r>
 800fa4e:	b948      	cbnz	r0, 800fa64 <__smakebuf_r+0x44>
 800fa50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa54:	059a      	lsls	r2, r3, #22
 800fa56:	d4ef      	bmi.n	800fa38 <__smakebuf_r+0x18>
 800fa58:	f023 0303 	bic.w	r3, r3, #3
 800fa5c:	f043 0302 	orr.w	r3, r3, #2
 800fa60:	81a3      	strh	r3, [r4, #12]
 800fa62:	e7e3      	b.n	800fa2c <__smakebuf_r+0xc>
 800fa64:	4b0d      	ldr	r3, [pc, #52]	; (800fa9c <__smakebuf_r+0x7c>)
 800fa66:	62b3      	str	r3, [r6, #40]	; 0x28
 800fa68:	89a3      	ldrh	r3, [r4, #12]
 800fa6a:	6020      	str	r0, [r4, #0]
 800fa6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa70:	81a3      	strh	r3, [r4, #12]
 800fa72:	9b00      	ldr	r3, [sp, #0]
 800fa74:	6163      	str	r3, [r4, #20]
 800fa76:	9b01      	ldr	r3, [sp, #4]
 800fa78:	6120      	str	r0, [r4, #16]
 800fa7a:	b15b      	cbz	r3, 800fa94 <__smakebuf_r+0x74>
 800fa7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa80:	4630      	mov	r0, r6
 800fa82:	f000 f8d1 	bl	800fc28 <_isatty_r>
 800fa86:	b128      	cbz	r0, 800fa94 <__smakebuf_r+0x74>
 800fa88:	89a3      	ldrh	r3, [r4, #12]
 800fa8a:	f023 0303 	bic.w	r3, r3, #3
 800fa8e:	f043 0301 	orr.w	r3, r3, #1
 800fa92:	81a3      	strh	r3, [r4, #12]
 800fa94:	89a0      	ldrh	r0, [r4, #12]
 800fa96:	4305      	orrs	r5, r0
 800fa98:	81a5      	strh	r5, [r4, #12]
 800fa9a:	e7cd      	b.n	800fa38 <__smakebuf_r+0x18>
 800fa9c:	0800f835 	.word	0x0800f835

0800faa0 <_malloc_usable_size_r>:
 800faa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800faa4:	1f18      	subs	r0, r3, #4
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	bfbc      	itt	lt
 800faaa:	580b      	ldrlt	r3, [r1, r0]
 800faac:	18c0      	addlt	r0, r0, r3
 800faae:	4770      	bx	lr

0800fab0 <_raise_r>:
 800fab0:	291f      	cmp	r1, #31
 800fab2:	b538      	push	{r3, r4, r5, lr}
 800fab4:	4604      	mov	r4, r0
 800fab6:	460d      	mov	r5, r1
 800fab8:	d904      	bls.n	800fac4 <_raise_r+0x14>
 800faba:	2316      	movs	r3, #22
 800fabc:	6003      	str	r3, [r0, #0]
 800fabe:	f04f 30ff 	mov.w	r0, #4294967295
 800fac2:	bd38      	pop	{r3, r4, r5, pc}
 800fac4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fac6:	b112      	cbz	r2, 800face <_raise_r+0x1e>
 800fac8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800facc:	b94b      	cbnz	r3, 800fae2 <_raise_r+0x32>
 800face:	4620      	mov	r0, r4
 800fad0:	f000 f830 	bl	800fb34 <_getpid_r>
 800fad4:	462a      	mov	r2, r5
 800fad6:	4601      	mov	r1, r0
 800fad8:	4620      	mov	r0, r4
 800fada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fade:	f000 b817 	b.w	800fb10 <_kill_r>
 800fae2:	2b01      	cmp	r3, #1
 800fae4:	d00a      	beq.n	800fafc <_raise_r+0x4c>
 800fae6:	1c59      	adds	r1, r3, #1
 800fae8:	d103      	bne.n	800faf2 <_raise_r+0x42>
 800faea:	2316      	movs	r3, #22
 800faec:	6003      	str	r3, [r0, #0]
 800faee:	2001      	movs	r0, #1
 800faf0:	e7e7      	b.n	800fac2 <_raise_r+0x12>
 800faf2:	2400      	movs	r4, #0
 800faf4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800faf8:	4628      	mov	r0, r5
 800fafa:	4798      	blx	r3
 800fafc:	2000      	movs	r0, #0
 800fafe:	e7e0      	b.n	800fac2 <_raise_r+0x12>

0800fb00 <raise>:
 800fb00:	4b02      	ldr	r3, [pc, #8]	; (800fb0c <raise+0xc>)
 800fb02:	4601      	mov	r1, r0
 800fb04:	6818      	ldr	r0, [r3, #0]
 800fb06:	f7ff bfd3 	b.w	800fab0 <_raise_r>
 800fb0a:	bf00      	nop
 800fb0c:	2000002c 	.word	0x2000002c

0800fb10 <_kill_r>:
 800fb10:	b538      	push	{r3, r4, r5, lr}
 800fb12:	4d07      	ldr	r5, [pc, #28]	; (800fb30 <_kill_r+0x20>)
 800fb14:	2300      	movs	r3, #0
 800fb16:	4604      	mov	r4, r0
 800fb18:	4608      	mov	r0, r1
 800fb1a:	4611      	mov	r1, r2
 800fb1c:	602b      	str	r3, [r5, #0]
 800fb1e:	f7f2 fbbb 	bl	8002298 <_kill>
 800fb22:	1c43      	adds	r3, r0, #1
 800fb24:	d102      	bne.n	800fb2c <_kill_r+0x1c>
 800fb26:	682b      	ldr	r3, [r5, #0]
 800fb28:	b103      	cbz	r3, 800fb2c <_kill_r+0x1c>
 800fb2a:	6023      	str	r3, [r4, #0]
 800fb2c:	bd38      	pop	{r3, r4, r5, pc}
 800fb2e:	bf00      	nop
 800fb30:	20000bc4 	.word	0x20000bc4

0800fb34 <_getpid_r>:
 800fb34:	f7f2 bba8 	b.w	8002288 <_getpid>

0800fb38 <__sread>:
 800fb38:	b510      	push	{r4, lr}
 800fb3a:	460c      	mov	r4, r1
 800fb3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb40:	f000 f894 	bl	800fc6c <_read_r>
 800fb44:	2800      	cmp	r0, #0
 800fb46:	bfab      	itete	ge
 800fb48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fb4a:	89a3      	ldrhlt	r3, [r4, #12]
 800fb4c:	181b      	addge	r3, r3, r0
 800fb4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fb52:	bfac      	ite	ge
 800fb54:	6563      	strge	r3, [r4, #84]	; 0x54
 800fb56:	81a3      	strhlt	r3, [r4, #12]
 800fb58:	bd10      	pop	{r4, pc}

0800fb5a <__swrite>:
 800fb5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb5e:	461f      	mov	r7, r3
 800fb60:	898b      	ldrh	r3, [r1, #12]
 800fb62:	05db      	lsls	r3, r3, #23
 800fb64:	4605      	mov	r5, r0
 800fb66:	460c      	mov	r4, r1
 800fb68:	4616      	mov	r6, r2
 800fb6a:	d505      	bpl.n	800fb78 <__swrite+0x1e>
 800fb6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb70:	2302      	movs	r3, #2
 800fb72:	2200      	movs	r2, #0
 800fb74:	f000 f868 	bl	800fc48 <_lseek_r>
 800fb78:	89a3      	ldrh	r3, [r4, #12]
 800fb7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fb82:	81a3      	strh	r3, [r4, #12]
 800fb84:	4632      	mov	r2, r6
 800fb86:	463b      	mov	r3, r7
 800fb88:	4628      	mov	r0, r5
 800fb8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb8e:	f000 b817 	b.w	800fbc0 <_write_r>

0800fb92 <__sseek>:
 800fb92:	b510      	push	{r4, lr}
 800fb94:	460c      	mov	r4, r1
 800fb96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb9a:	f000 f855 	bl	800fc48 <_lseek_r>
 800fb9e:	1c43      	adds	r3, r0, #1
 800fba0:	89a3      	ldrh	r3, [r4, #12]
 800fba2:	bf15      	itete	ne
 800fba4:	6560      	strne	r0, [r4, #84]	; 0x54
 800fba6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fbaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fbae:	81a3      	strheq	r3, [r4, #12]
 800fbb0:	bf18      	it	ne
 800fbb2:	81a3      	strhne	r3, [r4, #12]
 800fbb4:	bd10      	pop	{r4, pc}

0800fbb6 <__sclose>:
 800fbb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbba:	f000 b813 	b.w	800fbe4 <_close_r>
	...

0800fbc0 <_write_r>:
 800fbc0:	b538      	push	{r3, r4, r5, lr}
 800fbc2:	4d07      	ldr	r5, [pc, #28]	; (800fbe0 <_write_r+0x20>)
 800fbc4:	4604      	mov	r4, r0
 800fbc6:	4608      	mov	r0, r1
 800fbc8:	4611      	mov	r1, r2
 800fbca:	2200      	movs	r2, #0
 800fbcc:	602a      	str	r2, [r5, #0]
 800fbce:	461a      	mov	r2, r3
 800fbd0:	f7f2 fb99 	bl	8002306 <_write>
 800fbd4:	1c43      	adds	r3, r0, #1
 800fbd6:	d102      	bne.n	800fbde <_write_r+0x1e>
 800fbd8:	682b      	ldr	r3, [r5, #0]
 800fbda:	b103      	cbz	r3, 800fbde <_write_r+0x1e>
 800fbdc:	6023      	str	r3, [r4, #0]
 800fbde:	bd38      	pop	{r3, r4, r5, pc}
 800fbe0:	20000bc4 	.word	0x20000bc4

0800fbe4 <_close_r>:
 800fbe4:	b538      	push	{r3, r4, r5, lr}
 800fbe6:	4d06      	ldr	r5, [pc, #24]	; (800fc00 <_close_r+0x1c>)
 800fbe8:	2300      	movs	r3, #0
 800fbea:	4604      	mov	r4, r0
 800fbec:	4608      	mov	r0, r1
 800fbee:	602b      	str	r3, [r5, #0]
 800fbf0:	f7f2 fba5 	bl	800233e <_close>
 800fbf4:	1c43      	adds	r3, r0, #1
 800fbf6:	d102      	bne.n	800fbfe <_close_r+0x1a>
 800fbf8:	682b      	ldr	r3, [r5, #0]
 800fbfa:	b103      	cbz	r3, 800fbfe <_close_r+0x1a>
 800fbfc:	6023      	str	r3, [r4, #0]
 800fbfe:	bd38      	pop	{r3, r4, r5, pc}
 800fc00:	20000bc4 	.word	0x20000bc4

0800fc04 <_fstat_r>:
 800fc04:	b538      	push	{r3, r4, r5, lr}
 800fc06:	4d07      	ldr	r5, [pc, #28]	; (800fc24 <_fstat_r+0x20>)
 800fc08:	2300      	movs	r3, #0
 800fc0a:	4604      	mov	r4, r0
 800fc0c:	4608      	mov	r0, r1
 800fc0e:	4611      	mov	r1, r2
 800fc10:	602b      	str	r3, [r5, #0]
 800fc12:	f7f2 fba0 	bl	8002356 <_fstat>
 800fc16:	1c43      	adds	r3, r0, #1
 800fc18:	d102      	bne.n	800fc20 <_fstat_r+0x1c>
 800fc1a:	682b      	ldr	r3, [r5, #0]
 800fc1c:	b103      	cbz	r3, 800fc20 <_fstat_r+0x1c>
 800fc1e:	6023      	str	r3, [r4, #0]
 800fc20:	bd38      	pop	{r3, r4, r5, pc}
 800fc22:	bf00      	nop
 800fc24:	20000bc4 	.word	0x20000bc4

0800fc28 <_isatty_r>:
 800fc28:	b538      	push	{r3, r4, r5, lr}
 800fc2a:	4d06      	ldr	r5, [pc, #24]	; (800fc44 <_isatty_r+0x1c>)
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	4604      	mov	r4, r0
 800fc30:	4608      	mov	r0, r1
 800fc32:	602b      	str	r3, [r5, #0]
 800fc34:	f7f2 fb9f 	bl	8002376 <_isatty>
 800fc38:	1c43      	adds	r3, r0, #1
 800fc3a:	d102      	bne.n	800fc42 <_isatty_r+0x1a>
 800fc3c:	682b      	ldr	r3, [r5, #0]
 800fc3e:	b103      	cbz	r3, 800fc42 <_isatty_r+0x1a>
 800fc40:	6023      	str	r3, [r4, #0]
 800fc42:	bd38      	pop	{r3, r4, r5, pc}
 800fc44:	20000bc4 	.word	0x20000bc4

0800fc48 <_lseek_r>:
 800fc48:	b538      	push	{r3, r4, r5, lr}
 800fc4a:	4d07      	ldr	r5, [pc, #28]	; (800fc68 <_lseek_r+0x20>)
 800fc4c:	4604      	mov	r4, r0
 800fc4e:	4608      	mov	r0, r1
 800fc50:	4611      	mov	r1, r2
 800fc52:	2200      	movs	r2, #0
 800fc54:	602a      	str	r2, [r5, #0]
 800fc56:	461a      	mov	r2, r3
 800fc58:	f7f2 fb98 	bl	800238c <_lseek>
 800fc5c:	1c43      	adds	r3, r0, #1
 800fc5e:	d102      	bne.n	800fc66 <_lseek_r+0x1e>
 800fc60:	682b      	ldr	r3, [r5, #0]
 800fc62:	b103      	cbz	r3, 800fc66 <_lseek_r+0x1e>
 800fc64:	6023      	str	r3, [r4, #0]
 800fc66:	bd38      	pop	{r3, r4, r5, pc}
 800fc68:	20000bc4 	.word	0x20000bc4

0800fc6c <_read_r>:
 800fc6c:	b538      	push	{r3, r4, r5, lr}
 800fc6e:	4d07      	ldr	r5, [pc, #28]	; (800fc8c <_read_r+0x20>)
 800fc70:	4604      	mov	r4, r0
 800fc72:	4608      	mov	r0, r1
 800fc74:	4611      	mov	r1, r2
 800fc76:	2200      	movs	r2, #0
 800fc78:	602a      	str	r2, [r5, #0]
 800fc7a:	461a      	mov	r2, r3
 800fc7c:	f7f2 fb26 	bl	80022cc <_read>
 800fc80:	1c43      	adds	r3, r0, #1
 800fc82:	d102      	bne.n	800fc8a <_read_r+0x1e>
 800fc84:	682b      	ldr	r3, [r5, #0]
 800fc86:	b103      	cbz	r3, 800fc8a <_read_r+0x1e>
 800fc88:	6023      	str	r3, [r4, #0]
 800fc8a:	bd38      	pop	{r3, r4, r5, pc}
 800fc8c:	20000bc4 	.word	0x20000bc4

0800fc90 <_init>:
 800fc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc92:	bf00      	nop
 800fc94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc96:	bc08      	pop	{r3}
 800fc98:	469e      	mov	lr, r3
 800fc9a:	4770      	bx	lr

0800fc9c <_fini>:
 800fc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc9e:	bf00      	nop
 800fca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fca2:	bc08      	pop	{r3}
 800fca4:	469e      	mov	lr, r3
 800fca6:	4770      	bx	lr
